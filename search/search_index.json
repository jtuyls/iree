{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IREE","text":"<p>IREE (Intermediate Representation Execution Environment<sup>1</sup>) is an MLIR-based end-to-end compiler and runtime that lowers Machine Learning (ML) models to a unified IR that scales up to meet the needs of the datacenter and down to satisfy the constraints and special considerations of mobile and edge deployments.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li> <p> Ahead-of-time compilation</p> <p>Scheduling and execution logic are compiled together</p> <p> Project architecture</p> </li> <li> <p> Support for advanced model features</p> <p>Dynamic shapes, flow control, streaming, and more</p> <p> Importing from ML frameworks</p> </li> <li> <p> Designed for CPUs, GPUs, and other accelerators</p> <p>First class support for many popular devices and APIs</p> <p> Deployment configurations</p> </li> <li> <p> Low overhead, pipelined execution</p> <p>Efficient power and resource usage on server and edge devices</p> <p> Benchmarking</p> </li> <li> <p> Binary size as low as 30KB on embedded systems</p> <p> Running on bare-metal</p> </li> <li> <p> Debugging and profiling support</p> <p> Profiling with Tracy</p> </li> </ul>"},{"location":"#support-matrix","title":"Support matrix","text":"<p>IREE supports importing from a variety of ML frameworks:</p> <ul> <li> JAX</li> <li> ONNX</li> <li> PyTorch</li> <li> TensorFlow and TensorFlow Lite</li> </ul> <p>The IREE compiler tools run on  Linux,  Windows, and  macOS and can generate efficient code for a variety of runtime platforms:</p> <ul> <li> Linux</li> <li> Windows</li> <li> macOS</li> <li> Android</li> <li> iOS</li> <li> Bare metal</li> <li> WebAssembly (experimental)</li> </ul> <p>and architectures:</p> <ul> <li> ARM</li> <li> x86</li> <li> RISC-V</li> </ul> <p>Support for hardware accelerators and APIs is also included:</p> <ul> <li> Vulkan</li> <li> ROCm/HIP</li> <li> CUDA</li> <li> Metal (for Apple silicon devices)</li> <li> AMD AIE (experimental)</li> <li> WebGPU (experimental)</li> </ul>"},{"location":"#project-architecture","title":"Project architecture","text":"<p>IREE adopts a holistic approach towards ML model compilation: the IR produced contains both the scheduling logic, required to communicate data dependencies to low-level parallel pipelined hardware/API like Vulkan, and the execution logic, encoding dense computation on the hardware in the form of hardware/API-specific binaries like SPIR-V.</p> <p> </p>"},{"location":"#workflow-overview","title":"Workflow overview","text":"<p>Using IREE involves the following general steps:</p> <ol> <li> <p>Import your model</p> <p>Develop your program using one of the supported frameworks, then import into IREE</p> </li> <li> <p>Select your deployment configuration</p> <p>Identify your target platform, accelerator(s), and other constraints</p> </li> <li> <p>Compile your model</p> <p>Compile through IREE, picking settings based on your deployment configuration</p> </li> <li> <p>Run your model</p> <p>Use IREE's runtime components to execute your compiled model</p> </li> </ol>"},{"location":"#importing-models-from-ml-frameworks","title":"Importing models from ML frameworks","text":"<p>IREE supports importing models from a growing list of ML frameworks and model formats:</p> <ul> <li> JAX</li> <li> ONNX</li> <li> PyTorch</li> <li> TensorFlow and    TensorFlow Lite</li> </ul>"},{"location":"#selecting-deployment-configurations","title":"Selecting deployment configurations","text":"<p>IREE provides a flexible set of tools for various deployment scenarios. Fully featured environments can use IREE for dynamic model deployments taking advantage of multi-threaded hardware, while embedded systems can bypass IREE's runtime entirely or interface with custom accelerators.</p> <ul> <li>What platforms are you targeting? Desktop? Mobile? An embedded system?</li> <li>What hardware should the bulk of your model run on? CPU? GPU?</li> <li>How fixed is your model itself? Can the weights be changed? Do you want   to support loading different model architectures dynamically?</li> </ul> <p>IREE supports the full set of these configurations using the same underlying technology.</p>"},{"location":"#compiling-models","title":"Compiling models","text":"<p>Model compilation is performed ahead-of-time on a host machine for any combination of targets. The compilation process converts from layers and operators used by high level frameworks down into optimized native code and associated scheduling logic.</p> <p>For example, compiling for GPU execution using Vulkan generates SPIR-V kernels and Vulkan API calls. For CPU execution, native code with static or dynamic linkage and the associated function calls are generated.</p>"},{"location":"#running-models","title":"Running models","text":"<p>IREE offers a low level C API, as well as several sets of API bindings for compiling and running programs using various languages.</p>"},{"location":"#community","title":"Community","text":"<p>IREE is a sandbox-stage project of LF AI &amp; Data Foundation made possible thanks to a growing community of developers.</p> <p>See how IREE is used:</p> <p> Community</p>"},{"location":"#project-news","title":"Project news","text":"<ul> <li>2025-04-02: AMD submitted an IREE-based SDXL implementation to the MLPerf benchmark suite</li> <li>2024-05-23: IREE joins the LF AI &amp; Data Foundation as a sandbox-stage project</li> </ul>"},{"location":"#communication-channels","title":"Communication channels","text":"<ul> <li> GitHub issues: Feature requests,   bugs, and other work tracking</li> <li> IREE Discord server: Daily development   discussions with the core team and collaborators</li> <li> (New) iree-announce email list:   Announcements</li> <li> (New) iree-technical-discussion email list:   General and low-priority discussion</li> <li> (Legacy) iree-discuss email list:   Announcements, general and low-priority discussion</li> </ul>"},{"location":"#project-operations","title":"Project operations","text":""},{"location":"#developer-documentation","title":"Developer documentation","text":"<p>Interested in contributing to IREE? Check out our developer documentation:</p> <p> Developers</p>"},{"location":"#roadmap","title":"Roadmap","text":"<p>IREE uses GitHub Issues for most work planning. Some subprojects use both GitHub Projects and GitHub Milestones to track progress.</p> <ol> <li> <p>Pronounced \"eerie\" and often styled with the   emoji\u00a0\u21a9</p> </li> </ol>"},{"location":"building-from-source/","title":"Building from source","text":"<p>While IREE does offer binary distributions for its compiler tools and Python bindings, building from source is still useful when using IREE's runtime or when making changes to the compiler or import tools themselves.</p>"},{"location":"building-from-source/#reference-pages","title":"Reference pages","text":"<ul> <li>Getting started</li> <li>Android cross-compilation</li> <li>iOS cross-compilation</li> <li>RISC-V cross-compilation</li> </ul>"},{"location":"building-from-source/android/","title":"Android cross-compilation","text":"<p>Running on a platform like Android involves cross-compiling from a host platform (e.g. Linux) to a target platform (a specific Android version and system architecture):</p> <ul> <li>IREE's compiler is built on the host and is used there to generate modules   for the target</li> <li>IREE's runtime is built on the host for the target. The runtime is then   either pushed to the target to run natively or is bundled into an Android   APK</li> </ul>","tags":["Android"]},{"location":"building-from-source/android/#prerequisites","title":"Prerequisites","text":"","tags":["Android"]},{"location":"building-from-source/android/#host-environment-setup","title":"Host environment setup","text":"<p>You should already be able to build IREE from source on your host platform. Please make sure you have followed the getting started steps.</p>","tags":["Android"]},{"location":"building-from-source/android/#install-android-ndk-and-adb","title":"Install Android NDK and ADB","text":"<p>The Android Native Developer Kit (NDK) is needed to use native C/C++ code on Android. You can download it here, or, if you have installed Android Studio, you can follow this guide instead.</p> <p>Note</p> <p>Make sure the <code>ANDROID_NDK</code> environment variable is set after installing the NDK.</p> <p>ADB (the Android Debug Bridge) is also needed to communicate with Android devices from the command line. Install it following the official user guide.</p>","tags":["Android"]},{"location":"building-from-source/android/#configure-and-build","title":"Configure and build","text":"","tags":["Android"]},{"location":"building-from-source/android/#host-configuration","title":"Host configuration","text":"<p>Build and install on your host machine:</p> <pre><code>cmake -GNinja -B ../iree-build/ \\\n  -DCMAKE_INSTALL_PREFIX=../iree-build/install \\\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n  .\ncmake --build ../iree-build/ --target install\n</code></pre>","tags":["Android"]},{"location":"building-from-source/android/#target-configuration","title":"Target configuration","text":"<p>Build the runtime using the Android NDK toolchain:</p>  Linux macOS Windows <pre><code>cmake -GNinja -B ../iree-build-android/ \\\n  -DCMAKE_TOOLCHAIN_FILE=\"${ANDROID_NDK?}/build/cmake/android.toolchain.cmake\" \\\n  -DIREE_HOST_BIN_DIR=\"$PWD/../iree-build/install/bin\" \\\n  -DANDROID_ABI=\"arm64-v8a\" \\\n  -DANDROID_PLATFORM=\"android-29\" \\\n  -DIREE_BUILD_COMPILER=OFF \\\n  .\ncmake --build ../iree-build-android/\n</code></pre> <pre><code>cmake -GNinja -B ../iree-build-android/ \\\n  -DCMAKE_TOOLCHAIN_FILE=\"${ANDROID_NDK?}/build/cmake/android.toolchain.cmake\" \\\n  -DIREE_HOST_BIN_DIR=\"$PWD/../iree-build/install/bin\" \\\n  -DANDROID_ABI=\"arm64-v8a\" \\\n  -DANDROID_PLATFORM=\"android-29\" \\\n  -DIREE_BUILD_COMPILER=OFF \\\n  .\ncmake --build ../iree-build-android/\n</code></pre> <pre><code>cmake -GNinja -B ../iree-build-android/ \\\n  -DCMAKE_TOOLCHAIN_FILE=\"%ANDROID_NDK%/build/cmake/android.toolchain.cmake\" \\\n  -DIREE_HOST_BIN_DIR=\"%CD%/../iree-build/install/bin\" \\\n  -DANDROID_ABI=\"arm64-v8a\" \\\n  -DANDROID_PLATFORM=\"android-29\" \\\n  -DIREE_BUILD_COMPILER=OFF \\\n  .\ncmake --build ../iree-build-android/\n</code></pre> <p>Note</p> <p>See the Android NDK CMake guide and Android Studio CMake guide for details on configuring CMake for Android.</p> <p>The specific <code>ANDROID_ABI</code> and <code>ANDROID_PLATFORM</code> used should match your target device.</p>","tags":["Android"]},{"location":"building-from-source/android/#running-android-tests","title":"Running Android tests","text":"<p>Make sure you enable developer options and USB debugging on your Android device and can see your it when you run <code>adb devices</code>, then run all tests through ctest:</p> <pre><code># Build test dependencies\ncmake --build ../iree-build-android/ --target iree-test-deps\n\n# Ensure that your Android device is visible\nadb devices\n\n# Run tests\nctest --test-dir ../iree-build-android/ --output-on-failure\n</code></pre> <p>This will automatically upload build artifacts to the connected Android device, run the tests, then report the status back to your host machine.</p>","tags":["Android"]},{"location":"building-from-source/android/#running-tools-directly","title":"Running tools directly","text":"<p>Invoke the host compiler tools to produce a bytecode module FlatBuffer:</p> <pre><code>../iree-build/install/bin/iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  samples/models/simple_abs.mlir \\\n  -o /tmp/simple_abs_vmvx.vmfb\n</code></pre> <p>Push the Android runtime tools to the device, along with any FlatBuffer files:</p> <pre><code>adb push ../iree-build-android/tools/iree-run-module /data/local/tmp/\nadb shell chmod +x /data/local/tmp/iree-run-module\nadb push /tmp/simple_abs_vmvx.vmfb /data/local/tmp/\n</code></pre> <p>Run the tool:</p> <pre><code>adb shell /data/local/tmp/iree-run-module --device=local-task \\\n  --module=/data/local/tmp/simple_abs_vmvx.vmfb \\\n  --function=abs \\\n  --input=\"f32=-5\"\n</code></pre>","tags":["Android"]},{"location":"building-from-source/getting-started/","title":"Getting started","text":""},{"location":"building-from-source/getting-started/#prerequisites","title":"Prerequisites","text":"<p>IREE can be built from source using CMake. We also recommend the Ninja CMake generator and the clang or MSVC C/C++ compilers.</p> Note - Other CMake generators and compilers <p>IREE developers and CIs primarily use Ninja, clang, and MSVC. Other configurations (including the Makefile generator and gcc) are \"best effort\". Patches to improve support are always welcome.</p>  Linux macOS Windows <ol> <li> <p>Install a compiler/linker (typically \"clang\" and \"lld\" package)</p> </li> <li> <p>Install CMake (typically \"cmake\" package)</p> </li> <li> <p>Install Ninja (typically \"ninja-build\"    package)</p> </li> </ol> <p>On Debian/Ubuntu:</p> <pre><code>sudo apt install cmake ninja-build clang lld\n</code></pre> <ol> <li> <p>Install CMake</p> </li> <li> <p>Install Ninja</p> </li> </ol> <p>If using Homebrew:</p> <pre><code>brew install cmake ninja\n</code></pre> <ol> <li> <p>Install MSVC from Visual Studio or \"Tools for Visual Studio\" on the    official downloads page</p> </li> <li> <p>Install CMake from the    official downloads page</p> </li> <li> <p>Install Ninja from the official site</p> </li> </ol> <p>Note</p> <p>Initialize MSVC by running <code>vcvarsall.bat</code> to build on the command line. See the official documentation for details.</p>"},{"location":"building-from-source/getting-started/#quickstart-clone-and-build","title":"Quickstart: clone and build","text":"<p>Use Git to clone the IREE repository and initialize its submodules:</p> <pre><code>git clone https://github.com/iree-org/iree.git\ncd iree\ngit submodule update --init\n</code></pre> <p>The most basic CMake workflow is:</p> <pre><code># Configure\ncmake -G Ninja -B ../iree-build/ .\n\n# Build\ncmake --build ../iree-build/\n</code></pre> <p>Caution - slow builds</p> <p>The compiler build is complex. You will want a powerful machine and to tune the settings following the next section. In 2023, we've seen builds take around 5-10 minutes on 64-core Linux machines.</p> <p>Use case permitting, disabling the compiler build with <code>-DIREE_BUILD_COMPILER=OFF</code> will drastically simplify the build.</p>"},{"location":"building-from-source/getting-started/#configuration-settings","title":"Configuration settings","text":"<p>The configure step should be customized for your build environment. These settings can improve compile and link times substantially.</p>  Linux macOS Windows <pre><code># Recommended development options using clang and lld:\ncmake -G Ninja -B ../iree-build/ -S . \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DIREE_ENABLE_ASSERTIONS=ON \\\n    -DIREE_ENABLE_SPLIT_DWARF=ON \\\n    -DIREE_ENABLE_THIN_ARCHIVES=ON \\\n    -DCMAKE_C_COMPILER=clang \\\n    -DCMAKE_CXX_COMPILER=clang++ \\\n    -DIREE_ENABLE_LLD=ON\n</code></pre> <pre><code># Recommended development options using clang and lld:\ncmake -G Ninja -B ../iree-build/ -S . \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DIREE_ENABLE_ASSERTIONS=ON \\\n    -DIREE_ENABLE_SPLIT_DWARF=ON \\\n    -DCMAKE_C_COMPILER=clang \\\n    -DCMAKE_CXX_COMPILER=clang++ \\\n    -DIREE_ENABLE_LLD=ON\n</code></pre> <p>It is also possible to add <code>-DIREE_ENABLE_THIN_ARCHIVES=ON</code> if the <code>CMAKE_AR</code> variable is defined and points to the path of either the GNU binutils or LLVM <code>ar</code> program, overriding the default Apple <code>ar</code>.</p> <pre><code># Recommended development options:\ncmake -G Ninja -B ../iree-build/ -S . \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DIREE_ENABLE_ASSERTIONS=ON\n</code></pre> Tip - CMAKE_BUILD_TYPE values <p>We recommend using the <code>RelWithDebInfo</code> build type by default for a good balance of debug info and performance. The <code>Debug</code>, <code>Release</code>, and <code>MinSizeRel</code> build types are useful in more specific cases. Note that several useful LLVM debugging features are only available in <code>Debug</code> builds. See the official CMake documentation for general details.</p> Tip - Faster recompilation with ccache <p>We recommend using <code>ccache</code> with CMake, especially when rebuilding the compiler. To use it, configure CMake with:</p> <pre><code>-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache\n</code></pre> <p>See also our developer documentation for ccache.</p>"},{"location":"building-from-source/getting-started/#optional-components","title":"Optional components","text":"<p>Enabled components and other configurations can be changed via CMake options, listed in the root <code>CMakeLists.txt</code>. We also maintain a few CMake presets at <code>build_tools/cmake/presets</code> for common configurations.</p> <p>By default, the CMake build includes:</p> <ul> <li>All small to medium size compiler targets   (<code>llvm-cpu</code>, <code>vulkan-spirv</code>, etc.)</li> <li>All runtime HAL drivers   (<code>local-task</code>, <code>cuda</code>, <code>vulkan</code>, etc.)</li> <li>All compiler input formats   (PyTorch, StableHLO, TOSA, etc.)</li> <li>All compiler output formats (VM bytecode, C)</li> </ul> <p>The default build does not include:</p> <ul> <li>CUDA and ROCM/HIP targets</li> <li>Python and other language bindings for the compiler or runtime</li> <li>Advanced features like AddressSanitizer or tracing instrumentation</li> <li>Experimental components</li> </ul> <p>Configuration examples</p> Disable all backends except CPUEnable CUDA <p>This configure command will</p> <ul> <li>Disable all compiler target backends then enable just <code>llvm-cpu</code></li> <li>Disable all runtime HAL drivers then enable just the CPU \"local\" runtime   HAL drivers</li> </ul> <pre><code>cmake -G Ninja -B ../iree-build/ -S . \\\n    -DIREE_TARGET_BACKEND_DEFAULTS=OFF \\\n    -DIREE_TARGET_BACKEND_LLVM_CPU=ON \\\n    -DIREE_HAL_DRIVER_DEFAULTS=OFF \\\n    -DIREE_HAL_DRIVER_LOCAL_SYNC=ON \\\n    -DIREE_HAL_DRIVER_LOCAL_TASK=ON\n</code></pre> <p>This configure command will</p> <ul> <li>Enable the CUDA compiler target backend</li> <li>Enable the CUDA runtime HAL driver</li> </ul> <pre><code>cmake -G Ninja -B ../iree-build/ -S . \\\n    -DIREE_TARGET_BACKEND_CUDA=ON \\\n    -DIREE_HAL_DRIVER_CUDA=ON\n</code></pre>"},{"location":"building-from-source/getting-started/#extensions-and-integrations","title":"Extensions and integrations","text":"<p>When using IREE within other projects, you can register compiler plugins and runtime HAL drivers. You can also bring your own copy of LLVM and some other tools. See the root <code>CMakeLists.txt</code> for details.</p>"},{"location":"building-from-source/getting-started/#tests-and-samples","title":"Tests and samples","text":""},{"location":"building-from-source/getting-started/#running-tests","title":"Running tests","text":"<p>Tests are run via ctest. To build and run the core project tests:</p> <pre><code># Build default targets\ncmake --build ../iree-build/\n\n# Run tests\nctest --test-dir ../iree-build/\n</code></pre> <p>Caution</p> <p>This has two limitations:</p> <ol> <li>Large tests are excluded from the build by default</li> <li>Some tests require hardware like a GPU and will fail on unsupported systems</li> </ol> <p>To build and then run all tests:</p> <pre><code># 1. Build default targets\ncmake --build ../iree-build/\n\n# 2. Build test dependencies\ncmake --build ../iree-build/ --target iree-test-deps\n\n# 3. Run tests\nctest --test-dir ../iree-build/\n\n\n# Or combine all steps using a utility target\ncmake --build ../iree-build --target iree-run-tests\n</code></pre> <p>To run only certain tests, we have a helper script that converts environment variables into ctest filters:</p> <pre><code># Run default tests\n./build_tools/cmake/ctest_all.sh ../iree-build\n\n# Run tests, turning CUDA on and Vulkan off\nexport IREE_CUDA_DISABLE=0\nexport IREE_VULKAN_DISABLE=1\n./build_tools/cmake/ctest_all.sh ../iree-build\n</code></pre>"},{"location":"building-from-source/getting-started/#running-samples","title":"Running samples","text":"<pre><code># Build\ncmake --build ../iree-build/\n\n# Run a standalone sample application\n../iree-build/runtime/src/iree/runtime/demo/hello_world_embedded\n# 4xf32=1 1.1 1.2 1.3\n#  *\n# 4xf32=10 100 1000 10000\n#  =\n# 4xf32=10 110 1200 13000\n\n# Try out the developer tools\nls ../iree-build/tools/\n../iree-build/tools/iree-compile --help\n../iree-build/tools/iree-run-module --help\n</code></pre>"},{"location":"building-from-source/getting-started/#python-bindings","title":"Python bindings","text":"<p>Python packages can either be built from source or installed from our releases. See the Python bindings page for details about the bindings themselves.</p>"},{"location":"building-from-source/getting-started/#dependencies","title":"Dependencies","text":"<p>You will need a recent Python installation &gt;=3.9 (we aim to support non-eol Python versions).</p> Tip - Managing Python versions <p>Make sure your 'python' is what you expect:</p>  Linux macOS Windows <p>Note that on multi-python systems, this may have a version suffix, and on many Linuxes where python2 and python3 can co-exist, you may also want to use <code>python3</code>.</p> <pre><code>which python\npython --version\n</code></pre> <p>Note that on multi-python systems, this may have a version suffix, and on macOS where python2 and python3 can co-exist, you may also want to use <code>python3</code>.</p> <pre><code>which python\npython --version\n</code></pre> <p>The Python launcher for Windows (<code>py</code>) can help manage versions.</p> <pre><code>which python\npython --version\npy --list-paths\n</code></pre> Tip - Virtual environments <p>We recommend using virtual environments to manage python packages, such as through <code>venv</code> (about, tutorial):</p>  Linux macOS Windows <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre> <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre> <pre><code>python -m venv .venv\n.venv\\Scripts\\activate.bat\n</code></pre> <p>When done, run <code>deactivate</code>.</p> <pre><code># Upgrade PIP before installing other requirements\npython -m pip install --upgrade pip\n\n# Install IREE build requirements\npython -m pip install -r runtime/bindings/python/iree/runtime/build_requirements.txt\n</code></pre>"},{"location":"building-from-source/getting-started/#building-with-cmake","title":"Building with CMake","text":"<p>To build the Python bindings, configure CMake with the <code>IREE_BUILD_PYTHON_BINDINGS</code> option. We also recommend explicitly setting which Python executable to use with <code>Python3_EXECUTABLE</code>:</p> <pre><code># Configure (including other options as discussed above)\ncmake -G Ninja -B ../iree-build/ \\\n  -DIREE_BUILD_PYTHON_BINDINGS=ON  \\\n  -DPython3_EXECUTABLE=\"$(which python3)\" \\\n  .\n\n# Build\ncmake --build ../iree-build/\n</code></pre>"},{"location":"building-from-source/getting-started/#using-the-python-bindings","title":"Using the Python bindings","text":"<p>There are two available methods for installing the Python bindings, either through creating an editable wheel or through extending <code>PYTHONPATH</code>.</p>"},{"location":"building-from-source/getting-started/#option-a-installing-the-bindings-as-editable-wheels","title":"Option A: Installing the bindings as editable wheels","text":"<p>This method links the files in your build tree into your Python package directory as an editable wheel.</p>  Linux macOS Windows <pre><code>CMAKE_INSTALL_METHOD=ABS_SYMLINK python -m pip install -e ../iree-build/compiler\nCMAKE_INSTALL_METHOD=ABS_SYMLINK python -m pip install -e ../iree-build/runtime\n</code></pre> <pre><code>CMAKE_INSTALL_METHOD=ABS_SYMLINK python -m pip install -e ../iree-build/compiler\nCMAKE_INSTALL_METHOD=ABS_SYMLINK python -m pip install -e ../iree-build/runtime\n</code></pre> <pre><code>$env:CMAKE_INSTALL_MODE=\"ABS_SYMLINK\"\npython -m pip install -e ..\\iree-build\\compiler\npython -m pip install -e ..\\iree-build\\runtime\n$env:CMAKE_INSTALL_MODE=null\n</code></pre>"},{"location":"building-from-source/getting-started/#option-b-extending-pythonpath","title":"Option B: Extending PYTHONPATH","text":"<p>This method more effectively captures the state of your build directory, but is prone to errors arising from forgetting to source the environment variables.</p> <p>Extend your <code>PYTHONPATH</code> with IREE's <code>bindings/python</code> paths and try importing:</p>  Linux macOS Windows <pre><code>source ../iree-build/.env &amp;&amp; export PYTHONPATH\n# The 'PYTHONPATH' environment variable should now contain\n#   iree-build/compiler/bindings/python;iree-build/runtime/bindings/python\n\npython -c \"import iree.compiler; help(iree.compiler)\"\npython -c \"import iree.runtime; help(iree.runtime)\"\n</code></pre> <pre><code>source ../iree-build/.env &amp;&amp; export PYTHONPATH\n# The 'PYTHONPATH' environment variable should now contain\n#   iree-build/compiler/bindings/python;iree-build/runtime/bindings/python\n\npython -c \"import iree.compiler; help(iree.compiler)\"\npython -c \"import iree.runtime; help(iree.runtime)\"\n</code></pre> <pre><code>..\\iree-build\\.env.ps1  # or ..\\iree-build\\.env.bat\n# The 'PYTHONPATH' environment variable should now contain\n#   iree-build/compiler/bindings/python;iree-build/runtime/bindings/python\n\npython -c \"import iree.compiler; help(iree.compiler)\"\npython -c \"import iree.runtime; help(iree.runtime)\"\n</code></pre>"},{"location":"building-from-source/getting-started/#tensorflowtflite-bindings","title":"Tensorflow/TFLite bindings","text":"<p>Using IREE's TensorFlow/TFLite importers requires a few extra steps:</p> <pre><code># Install test requirements\npython -m pip install -r integrations/tensorflow/test/requirements.txt\n\n# Install pure Python packages (no build required)\n# You may use `pip install -e` here to create an editable wheel.\npython -m pip install integrations/tensorflow/python_projects/iree_tf\npython -m pip install integrations/tensorflow/python_projects/iree_tflite\n\n# Then test the tools:\niree-import-tf --help\niree-import-tflite --help\n</code></pre>"},{"location":"building-from-source/ios/","title":"iOS cross-compilation","text":"<p>Cross-compilation for iOS consists of the two steps below.</p> <ul> <li>On the macOS host, build the IREE compiler.  We can run it to create   IREE modules.</li> <li>Build the IREE runtime on the macOS host for iOS devices and the   simulator.  We can then run the IREE module on the simulator.</li> </ul>","tags":["iOS"]},{"location":"building-from-source/ios/#prerequisites","title":"Prerequisites","text":"","tags":["iOS"]},{"location":"building-from-source/ios/#install-xcode-and-ios-sdk","title":"Install Xcode and iOS SDK","text":"<p>For cross-compilation, you need Xcode. It comes with the SDKs for iOS devices and the simulator, as well as the <code>simctl</code> tool for controlling the simulator from the command line.</p>","tags":["iOS"]},{"location":"building-from-source/ios/#host-environment-setup","title":"Host environment setup","text":"<p>On your host platform, you should already be able to build IREE from source.  Please make sure you've gone through the steps in getting started.</p>","tags":["iOS"]},{"location":"building-from-source/ios/#configure-and-build","title":"Configure and build","text":"","tags":["iOS"]},{"location":"building-from-source/ios/#build-the-iree-compiler-for-the-host","title":"Build the IREE compiler for the Host","text":"<p>Build and install on your macOS host:</p> <pre><code>cmake -S . -B ../iree-build/ -GNinja \\\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n  -DCMAKE_INSTALL_PREFIX=../iree-build/install\n\ncmake --build ../iree-build/ --target install\n</code></pre>","tags":["iOS"]},{"location":"building-from-source/ios/#cross-compile-the-iree-runtime-for-ios","title":"Cross-compile the IREE runtime for iOS","text":"<p>Build the runtime for the iOS Simulator.</p> <pre><code>cmake -S . -B ../build-ios-sim -GNinja \\\n  -DCMAKE_SYSTEM_NAME=iOS \\\n  -DCMAKE_OSX_SYSROOT=$(xcodebuild -version -sdk iphonesimulator Path) \\\n  -DCMAKE_OSX_ARCHITECTURES=arm64 \\\n  -DCMAKE_SYSTEM_PROCESSOR=arm64 \\\n  -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \\\n  -DCMAKE_IOS_INSTALL_COMBINED=YES \\\n  -DIREE_HOST_BIN_DIR=\"$PWD/../iree-build/install/bin\" \\\n  -DCMAKE_INSTALL_PREFIX=../build-ios-sim/install \\\n  -DIREE_BUILD_COMPILER=OFF\n\ncmake --build ../build-ios-sim --config Release --target install\n</code></pre> <p>Or, we can build the runtime for iOS devices it by changing the value of the <code>-DCMAKE OSX SYSROOT</code> option to:</p> <pre><code>  -DCMAKE_OSX_SYSROOT=$(xcodebuild -version -sdk iphoneos Path)\n</code></pre>","tags":["iOS"]},{"location":"building-from-source/ios/#running-iree-modules-on-the-ios-simulator","title":"Running IREE modules on the iOS Simulator","text":"<p>Run the IREE compiler on the host to generate a module.</p> <pre><code>../iree-build/install/bin/iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  samples/models/simple_abs.mlir \\\n  -o /tmp/simple_abs_vmvx.vmfb\n</code></pre> <p>We could test the generated module by running the macOS version of <code>iree-run-module</code> on the host.</p> <pre><code>../iree-build/install/bin/iree-run-module \\\n  --module=/tmp/simple_abs_vmvx.vmfb \\\n  --device=local-task \\\n  --function=abs \\\n  --input=\"f32=-5\"\n</code></pre> <p>To run it on the iOS simulator, we need to copy the vmfb file into the <code>iree-run-module</code> iOS app bundle.</p> <pre><code>cp /tmp/simple_abs_vmvx.vmfb \\\n   ../build-ios-sim/install/bin/iree-run-module.app/\n</code></pre> <p>Open the iOS Simulator Manager on the host.</p> <pre><code>open -a Simulator\n</code></pre> <p>After creating and booting a simulator in this app, you can list it from the command-line.</p> <pre><code>xcrun simctl list devices | grep Booted\n</code></pre> <p>This is what should come out of the command:</p> <pre><code>    iPhone 14 Pro (12341234-ABCD-ABCD-ABCD-123412341234) (Booted)\n</code></pre> <p>where <code>iPhone 14 Pro</code> is the device being simulated and <code>12341234-ABCD-ABCD-ABCD-123412341234</code> is the simulator's unique device ID (UDID).</p> <p>Install the app <code>iree-run-module</code> on the simulator, given its UDID.</p> <pre><code>xcrun simctl install &lt;UDID&gt; ../build-ios-sim/install/bin/iree-run-module.app\n</code></pre> <p>Check the path to the installed bundle, where the <code>simple_abs_vmvx.vmfb</code> module should be found.</p> <pre><code>ls $(xcrun simctl get_app_container &lt;UDID&gt; dev.iree.iree-run-module)\n</code></pre> <p>The string <code>dev.iree.iree-run-module</code> is the bundle identifier of the iOS app.  The CMake building process generates it and saves it in the property list (plist) file <code>../build-ios-sim/install/bin/iree-run-module.app/Info.plist</code>.</p> <p>Launch the <code>iree-run-module</code> app on the simulator to run the IREE module <code>simple_abs_vmvx.vmfb</code>.</p> <pre><code>xcrun simctl launch --console \\\n  &lt;UDID&gt; \\\n  dev.iree.runmodule \\\n  --device=local-task \\\n  --function=abs \\\n  --input=\"f32=-5\" \\\n  --module=$(xcrun simctl get_app_container &lt;UDID&gt; dev.iree.iree-run-module)/simple_abs_vmvx.vmfb\n</code></pre>","tags":["iOS"]},{"location":"building-from-source/riscv/","title":"RISC-V cross-compilation","text":"<p>Running on a platform like RISC-V involves cross-compiling from a host platform (e.g. Linux) to a target platform (a specific RISC-V CPU architecture and operating system):</p> <ul> <li>IREE's compiler is built on the host and is used there to generate modules   for the target</li> <li>IREE's runtime is built on the host for the target. The runtime is then   pushed to the target to run natively.</li> </ul>","tags":["CPU"]},{"location":"building-from-source/riscv/#prerequisites","title":"Prerequisites","text":"","tags":["CPU"]},{"location":"building-from-source/riscv/#host-environment-setup","title":"Host environment setup","text":"<p>You should already be able to build IREE from source on your host platform. Please make sure you have followed the getting started steps.</p>","tags":["CPU"]},{"location":"building-from-source/riscv/#install-risc-v-cross-compile-toolchain-and-emulator","title":"Install RISC-V cross-compile toolchain and emulator","text":"<p>You'll need a RISC-V LLVM compilation toolchain and a RISC-V enabled QEMU emulator.</p> <p>See instructions in the following links</p> <ul> <li>Clang getting started</li> <li>RISC-V GNU toolchain</li> <li>QEMU</li> <li>RISC-V Linux QEMU</li> </ul> <p>Note</p> <p>The <code>RISCV_TOOLCHAIN_ROOT</code> environment variable needs to be set to the root directory of the installed GNU toolchain when building the RISC-V compiler target and the runtime library.</p>","tags":["CPU"]},{"location":"building-from-source/riscv/#install-prebuilt-risc-v-tools-risc-v-64-bit-linux-toolchain","title":"Install prebuilt RISC-V tools (RISC-V 64-bit Linux toolchain)","text":"<p>Execute the following script to download the prebuilt RISC-V toolchain and QEMU from the IREE root directory:</p> <pre><code>./build_tools/riscv/riscv_bootstrap.sh\n</code></pre> <p>Note</p> <p>The prebuilt toolchain is built with AlmaLinux release 8.8 docker It requires glibc &gt;= 2.28 for your host machine.</p>","tags":["CPU"]},{"location":"building-from-source/riscv/#support-vector-extension","title":"Support vector extension","text":"<p>For RISC-V vector extensions support, see additional instructions</p>","tags":["CPU"]},{"location":"building-from-source/riscv/#configure-and-build","title":"Configure and build","text":"","tags":["CPU"]},{"location":"building-from-source/riscv/#host-configuration","title":"Host configuration","text":"<p>Build and install on your host machine:</p> <pre><code>cmake -GNinja -B ../iree-build/ \\\n  -DCMAKE_C_COMPILER=clang \\\n  -DCMAKE_CXX_COMPILER=clang++ \\\n  -DCMAKE_INSTALL_PREFIX=../iree-build/install \\\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n  .\ncmake --build ../iree-build/ --target install\n</code></pre>","tags":["CPU"]},{"location":"building-from-source/riscv/#target-configuration","title":"Target configuration","text":"<p>The following instruction shows how to build for a RISC-V 64-bit Linux machine. For other RISC-V targets, please refer to riscv.toolchain.cmake as a reference of how to set up the cmake configuration.</p>","tags":["CPU"]},{"location":"building-from-source/riscv/#risc-v-64-bit-linux-target","title":"RISC-V 64-bit Linux target","text":"<pre><code>cmake -GNinja -B ../iree-build-riscv/ \\\n  -DCMAKE_TOOLCHAIN_FILE=\"./build_tools/cmake/riscv.toolchain.cmake\" \\\n  -DIREE_HOST_BIN_DIR=$(realpath ../iree-build/install/bin) \\\n  -DRISCV_CPU=linux-riscv_64 \\\n  -DIREE_BUILD_COMPILER=OFF \\\n  -DRISCV_TOOLCHAIN_ROOT=${RISCV_TOOLCHAIN_ROOT} \\\n  -DIREE_ENABLE_CPUINFO=OFF \\\n  .\ncmake --build ../iree-build-riscv/\n</code></pre>","tags":["CPU"]},{"location":"building-from-source/riscv/#running-iree-bytecode-modules-on-the-risc-v-system","title":"Running IREE bytecode modules on the RISC-V system","text":"<p>Note</p> <p>The following instructions are meant for the RISC-V 64-bit Linux target. For the bare-metal target, please refer to simple_embedding to see how to build a ML workload for a bare-metal machine.</p> <p>Set the path to qemu-riscv64 Linux emulator binary in the <code>QEMU_BIN</code> environment variable. If it is installed with <code>riscv_bootstrap.sh</code>, the path is default at ${HOME}/riscv/qemu/linux/RISCV/bin/qemu-riscv64.</p> <pre><code>export QEMU_BIN=&lt;path to qemu-riscv64 binary&gt;\n</code></pre> <p>Invoke the host compiler tools to produce a bytecode module FlatBuffer:</p> <pre><code>../iree-build/install/bin/iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  samples/models/simple_abs.mlir \\\n  -o /tmp/simple_abs_vmvx.vmfb\n</code></pre> <p>Run the RISC-V emulation:</p> <pre><code>${QEMU_BIN} \\\n  -cpu rv64 \\\n  -L ${RISCV_TOOLCHAIN_ROOT}/sysroot/ \\\n  ../iree-build-riscv/tools/iree-run-module \\\n  --device=local-task \\\n  --module=/tmp/simple_abs_vmvx.vmfb \\\n  --function=abs \\\n  --input=f32=-5\n</code></pre>","tags":["CPU"]},{"location":"building-from-source/riscv/#optional-configuration","title":"Optional configuration","text":"<p>RISC-V Vector extensions allows SIMD  code to run more efficiently. To enable the vector extension for the compiler  toolchain and the emulator, build the tools from the following sources:</p> <ul> <li>RISC-V toolchain is built from https://github.com/llvm/llvm-project.<ul> <li>Currently, the LLVM compiler is built on GNU toolchain, including libgcc,   GNU linker, and C libraries. You need to build GNU toolchain first.</li> <li>Clone GNU toolchain from:   https://github.com/riscv/riscv-gnu-toolchain.   Switch the \"riscv-binutils\" submodule to   <code>git://sourceware.org/git/binutils-gdb.git</code> manually.</li> </ul> </li> <li>RISC-V QEMU is built from https://gitlab.com/qemu-project/qemu/tree/v8.1.2.</li> </ul> <p>The SIMD code can be generated following the IREE CPU flow with the additional command-line flags</p> <pre><code>tools/iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-llvmcpu-target-triple=riscv64 \\\n  --iree-llvmcpu-target-abi=lp64d \\\n  --iree-llvmcpu-target-cpu-features=\"+m,+a,+f,+d,+zvl512b,+v\" \\\n  --riscv-v-fixed-length-vector-lmul-max=8 \\\n  iree_input.mlir -o mobilenet_cpu.vmfb\n</code></pre> <p>Then run on the RISC-V QEMU:</p> <pre><code>${QEMU_BIN} \\\n  -cpu rv64,Zve64d=true,vlen=512,elen=64,vext_spec=v1.0 \\\n  -L ${RISCV_TOOLCHAIN_ROOT}/sysroot/ \\\n  ../iree-build-riscv/tools/iree-run-module \\\n  --device=local-task \\\n  --module=mobilenet_cpu.vmfb \\\n  --function=predict \\\n  --input=\"1x224x224x3xf32=0\"\n</code></pre>","tags":["CPU"]},{"location":"community/","title":"Community projects","text":"<p>Projects built by community members:</p> <ul> <li> <p>The SHARK-Studio project offers user   interfaces for running a large corpus of machine learning programs.</p> </li> <li> <p>The shark-ai project   contains modeling and serving libraries.</p> </li> <li> <p>The SHARK-ModelDev project is an   integration repository for various model bringup activities. Several parts   of SHARK-ModelDev graduated to   iree-turbine and   shark-ai.</p> </li> <li> <p>The IREE C++ Template (archived)   showed one way to integrate IREE's runtime into a project with CMake.</p> </li> </ul> <p>Official repositories:</p> <ul> <li> <p>iree-turbine is home to IREE's   PyTorch frontend.</p> </li> <li> <p>iree-jax is home to   IREE's AOT support for JAX programs.</p> </li> <li> <p>iree-experimental   includes various samples and prototypes built with IREE.</p> </li> <li> <p>iree-llvm-sandbox   contains experimental work by the IREE team closely related to LLVM and   MLIR, usually with the aim of contributing back to those upstream projects.</p> </li> <li> <p>iree-org/iree-bare-metal-arm   contains a various samples that demonstrate how to build IREE with the   Arm GNU Toolchain   for bare-metal Arm targets using the open-source firmware libraries   CMSIS and   libopencm3.</p> </li> </ul>"},{"location":"community/blog/","title":"Blog","text":"<p>Updates from the IREE team</p>"},{"location":"community/blog/2021-10-15-cuda-backend/","title":"CUDA backend","text":"<p>IREE is being designed with re-targetability as a core goal: it should be possible to use IREE to target a broad spectrum of power regimes, from embedded systems to distributed clusters; and it should be possible to extend IREE to target new back-ends without having to reinvent the wheel each time.</p> <p>To explore this, we recently branched out from our initial focus on low-latency mobile deployments with a goal of using IREE to target data center workloads on Nvidia CUDA. This post describes how we quickly brought up a CUDA back-end for IREE and used it to train BERT, then shares some metrics and next steps.</p>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#bring-up","title":"Bring up","text":"","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#hal-support","title":"HAL support","text":"<p>IREE has a HAL API that abstract all the targets behind a common interface. The first step to supporting a CUDA target was to map the HAL API onto CUDA. We use the CUDA driver API to reduce dependencies and be closer to the hardware. The HAL API is based on other GPU APIs like Vulkan and Metal, so it was a natural fit for CUDA. The HAL API exposes memory allocations, basic fill and memset commands, kernel dispatch, and general command buffer handling. The original implementation uses the CUDA graph API as a graph maps naturally to command buffers. There is also an implementation using CUDA streams for comparison.</p> <p>HAL exposes an API that can be tested independently, even if we are not able to create CUDA kernels yet we can test a large portion of the CUDA driver using CTS tests. Those can be run to make sure a system has the required CUDA support.</p> <p></p>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#compiler-support","title":"Compiler support","text":"<p>CUDA has an open source backend in LLVM generating PTX that we are leveraging. Therefore IREE can create NVVM (CUDA LLVM variant) and use LLVM's backend to generate PTX. The CUDA driver will do the \"last mile compilation\" at runtime to convert PTX into the GPU's native ISA.</p> <p>IREE compiler pipeline starts from linalg with tensor operands. A large part of the compiler is independent of the target.</p> <p>The linalg on tensor representation of the graph is broken up into dispatch regions that are processed by NVVM Codegen. A simple implementation of the compiler is to run bufferization and convert linalg to standard followed by conversion to NVVM/LLVM. Most of those transformation can re-use upstream MLIR transformations and share it with any other backend targeting LLVM IR. Leveraging MLIR conversion to LLVM will allow us to quickly go from a simple \"hello world\" to supporting full models.</p> <p>IREE code generation is based on MLIR infrastructure so each step can easily be tested independently using the MLIR lit framework.</p>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#flatbuffer-definition","title":"FlatBuffer definition","text":"<p>Kernels are encoded in a FlatBuffer containing the PTX code as well as the workgroup size to use for the dispatch. This allows serialization of the kernels in the IR, it is then de-serialized by the HAL layer.</p> <pre><code>table CUDAExecutableDef {\n  // A map of entry point ordinals to string names as used in the shader\n  // library.\n  entry_points:[string];\n\n  // Block sizes for each entry point.\n  block_sizes:[CUDABlockSize];\n\n  // PTX string of the module.\n  ptx_image:string;\n}\n</code></pre>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#hello-world","title":"Hello world","text":"<p>Together those 3 steps are enough to provide most of the functionality and we can now successfully compile full models.</p> <p></p> <p>To reproduce running a simple op end to end through CUDA backend, save the following mlir in <code>/tmp/add.mlir</code> and then run the following given commands:</p> <pre><code>func.func @add(%arg0: tensor&lt;4xf32&gt;, %arg1: tensor&lt;4xf32&gt;) -&gt; tensor&lt;4xf32&gt; {\n  %0 = tensor.empty() : tensor&lt;4xf32&gt;\n  %1 = linalg.generic {\n    indexing_maps = [\n      affine_map&lt;(d0) -&gt; (d0)&gt;, affine_map&lt;(d0) -&gt; (d0)&gt;, affine_map&lt;(d0) -&gt; (d0)&gt;], iterator_types = [\"parallel\"]}\n      ins(%arg0, %arg1 : tensor&lt;4xf32&gt;, tensor&lt;4xf32&gt;)\n      outs(%0 : tensor&lt;4xf32&gt;) {\n  ^bb0(%in: f32, %in_0: f32, %out: f32):\n    %2 = arith.addf %in, %in_0 : f32\n    linalg.yield %2 : f32\n  } -&gt; tensor&lt;4xf32&gt;\n  return %1 : tensor&lt;4xf32&gt;\n}\n</code></pre> <pre><code># First compile into a VM bytecode module.\n$ ../iree-build/tools/iree-compile \\\n  --iree-hal-target-device=cuda \\\n  /tmp/add.mlir \\\n  -o /tmp/add.vmfb\n\n# Run the module through CUDA HAL backend.\n$ ../iree-build/tools/iree-run-module \\\n  --device=cuda \\\n  --module=/tmp/add.vmfb \\\n  --function=add \\\n  --input=\"4xf32=[1 2 3 4]\" \\\n  --input=\"4xf32=[2 2 2 2]\"\n\nEXEC @add\n4xf32=3 4 5 6\n</code></pre>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#performance","title":"Performance","text":"<p>Now that we have enabled functionality we need to look at the performance. Once again we can leverage existing MLIR transformations to speed up the developement work.</p>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#tiling-and-distribution","title":"Tiling and distribution","text":"<p>The first obvious step to get efficient code on CUDA is to make sure we distribute the work on enough blocks and threads to fill up the GPU. At the time of bring up not all ops were being tiled and distributed in the common IREE layer. During dispatch region creation we apply tile and fuse which will distribute the work into a set of workgroups that are mapped to CUDA blocks.</p> <p>At the beginning of the code generation we look at the dispatch region and decide on the tile size for a workgroup. For CUDA we also decide the number of threads per block. We will then have a pass tiling the ops in the dispatch region a second time to distribute the work onto threads within the block.</p> <p>At this stage the IR looks like the following:</p> <pre><code>    %8 = \"gpu.thread_id\"() {dimension = \"x\"} : () -&gt; index\n    %9 = affine.apply affine_map&lt;()[s0] -&gt; (s0 * 4)&gt;()[%8]\n    %10 = memref.subview %in0[%9] [4] [1] : memref&lt;128xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt; to memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;\n    %11 = memref.subview %in1[%9] [4] [1] : memref&lt;128xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt; to memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;\n    %12 = memref.subview %out[%9] [4] [1] : memref&lt;128xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt; to memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;\n    linalg.generic {\n        indexing_maps = [affine_map&lt;(d0) -&gt; (d0)&gt;,\n                         affine_map&lt;(d0) -&gt; (d0)&gt;,\n                         affine_map&lt;(d0) -&gt; (d0)&gt;],\n        iterator_types = [\"parallel\"]}\n      ins(%10, %11 :\n          memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;,\n          memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;)\n      outs(%12 : memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;) {\n    ^bb0(%arg1: f32, %arg2: f32, %arg3: f32):\n      %13 = addf %arg1, %arg2 : f32\n      linalg.yield %13 : f32\n    }\n</code></pre>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#vectorization","title":"Vectorization","text":"<p>Even though GPUs execute most operations as scalar, memory operations are optimized to access 128 bits of data per thread. Therefore it is critical to vectorize load/store operations. After tiling to a size we vectorize the IR to get vector read/write mapping to load4/store4. This significantly improves the memory access pattern of the code generated.</p> <p>This convert the previous IR to:</p> <pre><code>    %8 = \"gpu.thread_id\"() {dimension = \"x\"} : () -&gt; index\n    %9 = affine.apply affine_map&lt;()[s0] -&gt; (s0 * 4)&gt;()[%8]\n    %10 = memref.subview %in0[%9] [4] [1] : memref&lt;128xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt; to memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;\n    %11 = memref.subview %in1[%9] [4] [1] : memref&lt;128xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt; to memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;\n    %12 = memref.subview %out[%9] [4] [1] : memref&lt;128xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt; to memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;\n    %13 = vector.transfer_read %10[%c0], %cst {in_bounds = [true]} : memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;, vector&lt;4xf32&gt;\n    %14 = vector.transfer_read %11[%c0], %cst {in_bounds = [true]} : memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;, vector&lt;4xf32&gt;\n    %15 = addf %13, %14 : vector&lt;4xf32&gt;\n    vector.transfer_write %15, %12[%c0] {in_bounds = [true]} : vector&lt;4xf32&gt;, memref&lt;4xf32, affine_map&lt;(d0)[s0] -&gt; (d0 + s0)&gt;&gt;\n</code></pre>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#shared-memory-optimization","title":"Shared memory optimization","text":"<p>Nvidia GPUs have a fast shared memory that needs to be leveraged to optimize cases where we may be memory bound and have the potential to re-use memory reads.</p> <p>For operations like GEMM using shared memory gives us a significant speed up. We leverage memory promotion, vector distribution and software pipelining transformations from MLIR to generate efficient copies from global to shared memory that can be interleaved with the compute work.</p>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#optimization-pipeline","title":"Optimization pipeline","text":"<p>Those different transformations compose to this flow:</p> <p></p> <p>The full dump step by step of a linalg.matmul operation can be found here.</p>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#results-and-next-steps","title":"Results and next steps","text":"","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#gemm","title":"GEMM","text":"<p>We compare the performance of a single GEMM operation to highly optimized library cuBLAS using mmperf framework.</p> <p></p> <p>The graph can be re-produced based on instructions on mmperf</p>","tags":["GPU","CUDA"]},{"location":"community/blog/2021-10-15-cuda-backend/#future-work","title":"Future work","text":"<p>Nod.ai has contributed an experimental HAL module for ROCM that allows us to re-use the compiler parts to support ROCM, more support is going to be added in the future.</p> <p>Several performance improvements are still under progress, including optimizing the runtime allocator to reduce the host-side overhead and tuning tile sizes based profiling.</p> <p>Several models are running and we will publish more detailed benchmark results in the near future.</p>","tags":["GPU","CUDA"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/","title":"IREE / MLIR / Linalg tutorial","text":"","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#introduction","title":"Introduction","text":"<p>This tutorial is simultaneously about IREE, MLIR, and specifically the MLIR Linalg dialect.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#what-is-mlir","title":"What is MLIR?","text":"<p>MLIR is a programming language, but MLIR in itself is almost just an empty shell. What it really provides is a framework allowing to define MLIR dialects which are where the features come from.</p> <p>The \"IR\" part of the MLIR name stands for \"intermediate representation\". It means that MLIR is meant to be primarily for compiler-internal representations of code. But MLIR is actually fairly nice for humans to work with, and it's not hard to hand-author some MLIR programs from scratch. That is exactly the topic of this tutorial.</p> <p>The \"ML\" part of the MLIR name stands for \"multi-level\" (not machine learning!). It means that MLIR allows for multiple dialects to be freely mixed in the same MLIR programs. Each dialect can define operations, types and attributes, and each single MLIR statement can mix ops, types and attributes coming from different dialects.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#what-is-the-linalg-dialect","title":"What is the Linalg dialect?","text":"<p>Linalg is a MLIR dialect that essentially consists of a single op, <code>linalg.generic</code>, with most other ops in this dialect being just convenience aliases for special cases of <code>linalg.generic</code>. So, to describe Linalg dialect is essentially to describe <code>linalg.generic</code>.</p> <p>The point of this is that this single op, <code>linalg.generic</code>, is:</p> <ul> <li>General enough to express the entirety of usual machine learning workloads in   any quantization scheme at all.</li> <li>High-level enough to be lowered to efficient code for any target (CPU, GPU,   ...)</li> <li>Designed to be a good fit for compiler IR-to-IR transformations.</li> </ul> <p>These traits make the Linalg dialect an ideal \"middle-end\" IR for a machine learning compiler.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#what-is-iree","title":"What is IREE?","text":"<p>IREE is a MLIR compiler and runtime that can lower MLIR programs through successive, ever lower-level dialects, ultimately producing machine code for various CPU, GPU and other hardware targets. Check out the Developer overview docs and the ML frameworks docs.</p> <p>Front-ends can ingest source programs from various machine-learning frameworks into MLIR Linalg dialect. Boundaries are in flux, but it is a good enough mental model to think of anything up to Linalg as \"front-end\". One example is, for ingesting PyTorch programs, the front-end is torch-mlir and end-users are encouraged to use iree-turbine, which integrates IREE, torch-mlir and PyTorch.</p> <p>This tutorial is only concerned about the Linalg dialect, and we are going to learn to hand-author some Linalg programs. The point of the above tangent about front-ends is to make it clear that no matter which way you feed a program into IREE, it will internally be rewritten into a Linalg program, because that really is the intermediate representation in this compiler.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#getting-iree-binaries","title":"Getting IREE binaries","text":"<p>IREE builds can be downloaded or installed as Python packages or built from sources.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#first-linalg-programs","title":"First linalg programs","text":"<p>Before we start: there is also an official Linalg tutorial. It takes a different approach compared to the present tutorial, so the two are complementary.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#static-shape-element-wise-addition-of-two-1d-arrays","title":"Static-shape, element-wise addition of two 1D arrays","text":"<p>Here is our first Linalg function. The scalar type used in this program, <code>f32</code>, is 32-bit floating-point.</p> <p>Notice some elements of MLIR syntax:</p> <ul> <li>The <code>%</code> prefix on an identifier indicates a   SSA value, like   here <code>%result</code>.</li> <li>The <code>@</code> prefix on an identifier indicates a function, like here <code>@foo</code>.</li> <li>The <code>^</code> prefix on an identifier indicates a   block, like here <code>^bb0</code>.</li> <li>The <code>#</code> prefix on an identifier indicates an   attribute alias,   like here <code>#map_1d_identity</code>.</li> <li>The <code>x</code> letter is used as delimiter in shapes, and between the shape and the   element type, like here <code>10xf32</code> meaning a 1D shape of size 10 with element   type <code>f32</code>.</li> <li>Operations have the form <code>dialect.name</code>. For example, <code>tensor.empty</code> is the   <code>empty</code> operation within the <code>tensor</code> dialect, and <code>func.func</code> is the <code>func</code>   operation within the <code>func</code> dialect.</li> </ul> <pre><code>// The 1D identity map, used below.\n#map_1d_identity = affine_map&lt;(m) -&gt; (m)&gt;\n\n// Define a function @foo taking two tensor arguments `%lhs` and `%rhs` and returning a tensor.\nfunc.func @foo(\n      %lhs : tensor&lt;10xf32&gt;,\n      %rhs : tensor&lt;10xf32&gt;\n    ) -&gt; tensor&lt;10xf32&gt; {\n  // A constant used below.\n  %c0f32 = arith.constant 0.0 : f32\n  // Create a result \"init value\". Think of it as an abstract \"allocation\",\n  // creating a tensor but not giving its elements any particular value. It would be\n  // undefined behavior to read any element from this tensor.\n  %result_empty =  tensor.empty() : tensor&lt;10xf32&gt;\n\n  // Perform the computation. The following is all a single linalg.generic op.\n\n  %result = linalg.generic {\n    // This {...} section is the \"attributes\" - some compile-time settings for this op.\n    indexing_maps=[\n      // Indexing maps for the parameters listed in `ins(...)`\n      #map_1d_identity,\n      #map_1d_identity,\n      // Indexing maps for the parameters listed in `outs(...)`\n      #map_1d_identity\n    ],\n    // There is one tensor dimension, and it's a parallel-iteration dimension,\n    // meaning that it occurs also as a result tensor dimension. The alternative\n    // would be \"reduction\", for dimensions that do not occur in the result tensor.\n    iterator_types=[\"parallel\"]\n  } // End of the attributes for this linalg.generic. Next come the parameters:\n    // `ins` is where we pass regular input-parameters\n    ins(%lhs, %rhs : tensor&lt;10xf32&gt;, tensor&lt;10xf32&gt;)\n    // `outs` is where we pass the \"outputs\", but that term has a subtle meaning\n    // in linalg. Here we are passing a tensor.empty, meaning just a placeholder\n    // for the output with no preexisting element values. In other examples with\n    // an accumulator, this is where the accumulator would be passed.\n    outs(%result_empty : tensor&lt;10xf32&gt;)\n    // End of parameters. The next {...} part is the \"code block\".\n  {\n    // bb0 is a code block taking one scalar from each input tensor as argument, and\n    // computing and \"yielding\" (ie returning) the corresponding output tensor element.\n    ^bb0(%lhs_entry : f32, %rhs_entry : f32, %unused_result_entry : f32):\n      %add = arith.addf %lhs_entry, %rhs_entry : f32\n      linalg.yield %add : f32\n  } // End of the basic block. Finally, we describe the return type.\n  -&gt; tensor&lt;10xf32&gt;\n\n  // End of the linalg.generic op.\n\n  // Return the function's return value.\n  return %result : tensor&lt;10xf32&gt;\n}\n</code></pre> <p>Compile it like this:</p> <pre><code>$ iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  prog.mlir \\\n  -o /tmp/prog.vmfb\n</code></pre> <p>Note</p> <p>These are just minimalist <code>iree-compile</code> flags for running on CPU without trying to maximize performance.</p> <ul> <li>To run on GPU or other non-CPU targets, explore other values for   <code>--iree-hal-target-device=</code>. You will then need to pass a matching   <code>--device=</code> to <code>iree-run-module</code> below.</li> <li>To cross-compile, explore <code>--iree-llvmcpu-target-triple=</code>.</li> <li>To enable higher CPU performance by enabling CPU features:<ul> <li>On x86, explore <code>--iree-llvmcpu-target-cpu=</code> (e.g.   <code>--iree-llvmcpu-target-cpu=znver4</code> to target AMD Zen4).</li> <li>On other architectures, explore <code>--iree-llvmcpu-target-cpu-features=</code>.</li> <li>To optimize for running on the same machine that the compilation ran   on, pass  <code>--iree-llvmcpu-target-cpu=host</code>. That works regardless of   CPU architecture.</li> </ul> </li> <li>Check out   these docs for   more useful <code>iree-compile</code> flags.</li> </ul> <p>Run it like this:</p> <pre><code>$ iree-run-module --module=/tmp/prog.vmfb \\\n  --input=10xf32=[0,1,2,3,4,5,6,7,8,9] \\\n  --input=10xf32=[90,80,70,60,50,40,30,20,10,0]\n\nEXEC @foo\nresult[0]: hal.buffer_view\n10xf32=90 81 72 63 54 45 36 27 18 9\n</code></pre> <p>Here, each <code>--input</code> parameter specifies one input. First its shape and element type, <code>10xf32</code>, then the example array elements in <code>[...]</code> brackets. The output of <code>iree-run-module</code> above shows the contents of the result.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#dynamic-shape-element-wise-addition-of-two-1d-arrays","title":"Dynamic-shape, element-wise addition of two 1D arrays","text":"<p>While we are going to mostly focus on static shapes for simplicity in the rest of this tutorial, let us give one dynamic-shape example to at least show that that's not a problem. Here is the dynamic-shape equivalent of the previous example.</p> <pre><code>#map_1d_identity = affine_map&lt;(m) -&gt; (m)&gt;\n\nfunc.func @foo(\n      %lhs : tensor&lt;?xf32&gt;,\n      %rhs : tensor&lt;?xf32&gt;\n    ) -&gt; tensor&lt;?xf32&gt; {\n  %c0f32 = arith.constant 0.0 : f32\n  %c0 = arith.constant 0 : index\n  %size = tensor.dim %lhs, %c0 : tensor&lt;?xf32&gt;\n  %result_empty =  tensor.empty(%size) : tensor&lt;?xf32&gt;\n\n  %result = linalg.generic {\n    indexing_maps=[\n      // Indexing maps for the parameters listed in `ins(...)`\n      #map_1d_identity,\n      #map_1d_identity,\n      // Indexing maps for the parameters listed in `outs(...)`\n      #map_1d_identity\n    ],\n    iterator_types=[\"parallel\"]\n  } ins(%lhs, %rhs : tensor&lt;?xf32&gt;, tensor&lt;?xf32&gt;)\n    outs(%result_empty : tensor&lt;?xf32&gt;)\n  {\n    ^bb0(%lhs_entry : f32, %rhs_entry : f32, %unused_result_entry : f32):\n      %add = arith.addf %lhs_entry, %rhs_entry : f32\n      linalg.yield %add : f32\n  }\n  -&gt; tensor&lt;?xf32&gt;\n\n  return %result : tensor&lt;?xf32&gt;\n}\n</code></pre> <p>This program can be compiled and run exactly like the previous one, except that now the <code>iree-run-module</code> command may specify inputs of arbitrary length. The only requirement is that both inputs have the same length, otherwise the <code>linalg.generic</code> will have undefined behavior.</p> <pre><code>$ iree-compile prog.mlir -o /tmp/prog.vmfb \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu\n$ iree-run-module --module=/tmp/prog.vmfb \\\n  --input=10xf32=[0,1,2,3,4,5,6,7,8,9] \\\n  --input=10xf32=[90,80,70,60,50,40,30,20,10,0]\n\nEXEC @foo\nresult[0]: hal.buffer_view\n10xf32=90 81 72 63 54 45 36 27 18 9\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#passing-one-of-the-inputs-in-outs","title":"Passing one of the inputs in <code>outs</code>","text":"<p>Here is a more concise variant achieving the same result in fewer lines of code, and giving us a first taste of that that <code>outs(...)</code> parameters list can do. We didn't want to show it first, because it's less idiomatic. <code>outs</code> will only become really necessary (and idiomatic) when we will look at <code>reduction</code> iterators. In the previous examples, we had only passed a <code>tensor.empty</code> placeholder for <code>outs</code>. This new example shows that we can actually pass there any of the inputs that are shaped like the result.</p> <pre><code>#map_1d_identity = affine_map&lt;(m) -&gt; (m)&gt;\n\nfunc.func @foo(\n      %lhs : tensor&lt;10xf32&gt;,\n      %rhs : tensor&lt;10xf32&gt;\n    ) -&gt; tensor&lt;10xf32&gt; {\n\n  %result = linalg.generic {\n    indexing_maps=[\n      // Indexing maps for the parameters listed in `ins(...)`\n      #map_1d_identity,\n      // Indexing maps for the parameters listed in `outs(...)`\n      #map_1d_identity\n    ],\n    iterator_types=[\"parallel\"]\n  } ins(%lhs : tensor&lt;10xf32&gt;)\n    outs(%rhs : tensor&lt;10xf32&gt;)\n  {\n    ^bb0(%lhs_entry : f32, %rhs_entry : f32):\n      %add = arith.addf %lhs_entry, %rhs_entry : f32\n      linalg.yield %add : f32\n  }\n  -&gt; tensor&lt;10xf32&gt;\n\n  return %result : tensor&lt;10xf32&gt;\n}\n</code></pre> <pre><code>$ iree-compile prog.mlir -o /tmp/prog.vmfb \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu\n$ iree-run-module --module=/tmp/prog.vmfb \\\n  --input=10xf32=[0,1,2,3,4,5,6,7,8,9] \\\n  --input=10xf32=[90,80,70,60,50,40,30,20,10,0]\n\nEXEC @foo\nresult[0]: hal.buffer_view\n10xf32=90 81 72 63 54 45 36 27 18 9\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#a-first-reduction-example-summing-a-1d-array","title":"A first <code>reduction</code> example: summing a 1D array","text":"<p>This function takes a 1D array of floats and returns their sum. <code>tensor&lt;f32&gt;</code> is a 0-dimensional tensor type. We could as well extract the single <code>f32</code> element and return that, but we wanted to make this example as simple as possible.</p> <p>What's subtle here is how the <code>bb0</code> block in the <code>linalg.generic</code> now actively uses the <code>%result_entry</code> as an operand to <code>arith.addf</code>, yielding the result of this addition on every iteration. Implicitly, this stores the result of that addition to the destination, from where it is re-loaded on the next iteration again as <code>%result_entry</code>. So the SSA value <code>%result_entry</code> has a different value on each iteration.</p> <p>Because the values from the <code>outs</code> parameter are now actually used, we can't directly pass there the <code>tensor.empty</code>, whose elements are uninitialized. We have to initialize the result entries as zeroes, which is achieved by the <code>linalg.fill</code>.</p> <pre><code>#map_1d_identity = affine_map&lt;(m) -&gt; (m)&gt;\n#map_1d_proj_0d = affine_map&lt;(m) -&gt; ()&gt;\n\nfunc.func @foo(\n      %input : tensor&lt;10xf32&gt;) -&gt; tensor&lt;f32&gt; {\n  %result_empty = tensor.empty() : tensor&lt;f32&gt;\n  %cst_0 = arith.constant 0.0 : f32\n  %result_init = linalg.fill ins(%cst_0 : f32) outs(%result_empty : tensor&lt;f32&gt;) -&gt; tensor&lt;f32&gt;\n  %result = linalg.generic {\n    indexing_maps=[\n      // Indexing maps for the parameters listed in `ins(...)`\n      #map_1d_identity,\n      // Indexing maps for the parameters listed in `outs(...)`\n      #map_1d_proj_0d\n    ],\n    iterator_types=[\"reduction\"]\n  } ins(%input : tensor&lt;10xf32&gt;)\n    outs(%result_init : tensor&lt;f32&gt;)\n  {\n    ^bb0(%input_entry : f32, %result_entry : f32):\n      %add = arith.addf %input_entry, %result_entry : f32\n      linalg.yield %add : f32\n  }\n  -&gt; tensor&lt;f32&gt;\n\n  return %result : tensor&lt;f32&gt;\n}\n</code></pre> <pre><code>$ iree-compile prog.mlir -o /tmp/prog.vmfb \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu\n$ iree-run-module --module=/tmp/prog.vmfb --input=10xf32=[0,1,2,3,4,5,6,7,8,9]\n\nEXEC @foo\nresult[0]: hal.buffer_view\nf32=45\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#combining-parallel-and-reduction-iterators-summing-each-row-of-a-2d-array","title":"Combining <code>parallel</code> and <code>reduction</code> iterators: summing each row of a 2D array.","text":"<p>This is our first 2D example so for the first time we have to start explaining how the <code>iterator_types</code> are enumerated and we start seeing some more interesting examples of <code>affine_map</code>.</p> <pre><code>#map_2d_identity = affine_map&lt;(m, n) -&gt; (m, n)&gt;\n#map_2d_proj_first = affine_map&lt;(m, n) -&gt; (m)&gt;\n\nfunc.func @foo(\n      %input : tensor&lt;3x5xf32&gt;) -&gt; tensor&lt;3xf32&gt; {\n  %result_empty = tensor.empty() : tensor&lt;3xf32&gt;\n  %cst_0 = arith.constant 0.0 : f32\n  %result_init = linalg.fill ins(%cst_0 : f32) outs(%result_empty : tensor&lt;3xf32&gt;) -&gt; tensor&lt;3xf32&gt;\n  %result = linalg.generic {\n    indexing_maps=[\n      // Indexing maps for the parameters listed in `ins(...)`\n      #map_2d_identity,\n      // Indexing maps for the parameters listed in `outs(...)`\n      #map_2d_proj_first\n    ],\n    iterator_types=[\n      // Rule: the i-th iterator_type corresponds to the i-th coordinate in the\n      // source space of the affine_maps defined above, (m, n). So:\n      \"parallel\",  // This refers to the `m` coordinate in the affine-maps.\n                   // This is the coordinate that is preserved in the result,\n                   // see the map_2d_proj_first map given above.\n      \"reduction\" // This refers to the `n` coordinate in the affine-maps.\n                  // This is the coordinate that is dropped by the map_2d_proj_first\n                  // given above and thus not present in the 1D result.\n    ]\n  } ins(%input : tensor&lt;3x5xf32&gt;)\n    outs(%result_init : tensor&lt;3xf32&gt;)\n  {\n    ^bb0(%input_entry : f32, %result_entry : f32):\n      %add = arith.addf %input_entry, %result_entry : f32\n      linalg.yield %add : f32\n  }\n  -&gt; tensor&lt;3xf32&gt;\n\n  return %result : tensor&lt;3xf32&gt;\n}\n</code></pre> <pre><code>$ iree-compile prog.mlir -o /tmp/prog.vmfb \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu\n$ iree-run-module --module=/tmp/prog.vmfb \\\n  --input=3x5xf32=[[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]]\n\nEXEC @foo\nresult[0]: hal.buffer_view\n3xf32=10 35 60\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#matrix-multiplication-as-a-linalgmatmul-and-as-a-linalggeneric","title":"Matrix multiplication as a <code>linalg.matmul</code> and as a <code>linalg.generic</code>","text":"<p>We are now ready to see how to express matrix multiplication as a <code>linalg.generic</code>. But actually, rather than just writing that by hand, we are going to let Linalg do it for us. Indeed, in addition to <code>linalg.generic</code>, Linalg contains a number of \"named ops\", which are essentially just short-hand notation for special cases of <code>linalg.generic</code>. One of them is <code>linalg.matmul</code>, doing matrix multiplication accumulating into an existing accumulator. Here is a simple function performing a matrix-multiplication-with-accumulation using <code>linalg.matmul</code>. Also in this example, we use dynamic shapes (the <code>?</code> in the shapes, see the above section where we encountered that), but we could just as well use static shapes.</p> <pre><code>func.func @foo(%lhs: tensor&lt;?x?xf32&gt;, %rhs: tensor&lt;?x?xf32&gt;, %acc: tensor&lt;?x?xf32&gt;) -&gt; tensor&lt;?x?xf32&gt; {\n  %result = linalg.matmul\n    ins(%lhs, %rhs: tensor&lt;?x?xf32&gt;, tensor&lt;?x?xf32&gt;)\n    outs(%acc: tensor&lt;?x?xf32&gt;)\n  -&gt; tensor&lt;?x?xf32&gt;\n  return %result: tensor&lt;?x?xf32&gt;\n}\n</code></pre> <pre><code>$ iree-compile prog.mlir -o /tmp/prog.vmfb \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu\n$ iree-run-module --module=/tmp/prog.vmfb \\\n  --input=2x2xf32=[[1,2][3,4]] \\\n  --input=2x2xf32=[[1,4][3,2]] \\\n  --input=2x2xf32=[[0,0][0,0]]\n\nEXEC @matmul_dynamic\nresult[0]: hal.buffer_view\n2x2xf32=[7 8][15 20]\n</code></pre> <p>Now we encounter another IREE tool: <code>iree-opt</code>. Unlike <code>iree-compile</code> which compiles a MLIR program all the way down to a <code>.vmfb</code> that's ready to run on the target device, <code>iree-opt</code> only applies selected transformations.</p> <p>We run:</p> <pre><code>iree-opt --linalg-generalize-named-ops prog.mlir\n</code></pre> <p>And that prints:</p> <pre><code>#map = affine_map&lt;(d0, d1, d2) -&gt; (d0, d2)&gt;\n#map1 = affine_map&lt;(d0, d1, d2) -&gt; (d2, d1)&gt;\n#map2 = affine_map&lt;(d0, d1, d2) -&gt; (d0, d1)&gt;\nmodule {\n  func.func @foo(%arg0: tensor&lt;?x?xf32&gt;, %arg1: tensor&lt;?x?xf32&gt;, %arg2: tensor&lt;?x?xf32&gt;) -&gt; tensor&lt;?x?xf32&gt; {\n    %0 = linalg.generic {indexing_maps = [#map, #map1, #map2], iterator_types = [\"parallel\", \"parallel\", \"reduction\"]} ins(%arg0, %arg1 : tensor&lt;?x?xf32&gt;, tensor&lt;?x?xf32&gt;) outs(%arg2 : tensor&lt;?x?xf32&gt;) {\n    ^bb0(%in: f32, %in_0: f32, %out: f32):\n      %1 = arith.mulf %in, %in_0 : f32\n      %2 = arith.addf %out, %1 : f32\n      linalg.yield %2 : f32\n    } -&gt; tensor&lt;?x?xf32&gt;\n    return %0 : tensor&lt;?x?xf32&gt;\n  }\n}\n</code></pre> <p>So that's the <code>linalg.generic</code> implementing matrix multiplication equivalently to the above <code>linalg.matmul</code> form. We can  compile and run that like the above program and it will have exactly the same result.</p> <p>Here the 3 listed <code>iterator_types</code>, <code>[\"parallel\", \"parallel\", \"reduction\"]</code>, correspond to the 3 listed coordinates in the <code>affine_map</code>'s, <code>(d0, d1, d2)</code>. So, <code>d0</code> and <code>d1</code> are parallel dimensions and <code>d2</code> is the reduction dimension. That's why the first two <code>affine_map</code>'s results involve <code>d2</code> (they are respectively for the LHS <code>%arg0</code> and RHS <code>%arg1</code>) and the last <code>affine_map</code>'s result only involves the parallel <code>d0</code> and <code>d1</code>, as it refers to the result matrix.</p> <p>Note</p> <p>Some current IREE compiler optimizations are only triggering on named ops like <code>linalg.matmul</code>, not on the equivalent <code>linalg.generic</code> form. Think of that as a non-essential current limitation, and the intent is over time to overcome these, but in the near term do use <code>linalg.matmul</code> when performance matters.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-29-iree-mlir-linalg-tutorial/#integer-element-types","title":"Integer element types","text":"<p>MLIR defines integer types for absolutely any bit-width, including non-power-of-two bit-widths, and in three signedness flavors:</p> <ul> <li>Signed integers, indicated by the letters <code>si</code>.</li> <li>Unsigned integers, indicated by the letters <code>ui</code>.</li> <li>Sign-less integers indicated by the letter <code>i</code>. \"Sign-less\" means that the   integer type does not convey signedness; the integer value may be used as   either a signed or an unsigned value but that's a property of the operation   using that value as an operand, that's not encoded in the type.</li> </ul> <p>So for instance, <code>si16</code> is the 16-bit signed integer type, <code>ui24</code> is the 24-bit unsigned integer type, and <code>i8</code> is the sign-less 8-bit integer type.</p> <p>Now here is a very important principle of how the MLIR dialects that are relevant to us in IREE operate:</p> <p>Note</p> <p>Only use sign-less types. Always encode signedness in operations, not in types.</p> <p>For example, here is how we perform a matrix multiplication where the LHS is signed 8-bit integers, the RHS is unsigned 8-bit integers, and the accumulator is signed 32-bit integers. Notice how the fact that LHS is signed and the RHS is unsigned is encoded only in the implementation of the <code>linalg.generic</code> basic block, where the LHS and RHS entries are extended, respectively as signed (<code>arith.extsi</code>) and unsigned (<code>arith.extui</code>):</p> <pre><code>#map = affine_map&lt;(d0, d1, d2) -&gt; (d0, d2)&gt;\n#map1 = affine_map&lt;(d0, d1, d2) -&gt; (d2, d1)&gt;\n#map2 = affine_map&lt;(d0, d1, d2) -&gt; (d0, d1)&gt;\nmodule {\n  func.func @foo(%lhs: tensor&lt;?x?xi8&gt;, %rhs: tensor&lt;?x?xi8&gt;, %acc: tensor&lt;?x?xi32&gt;) -&gt; tensor&lt;?x?xi32&gt; {\n    %result = linalg.generic\n      {indexing_maps = [#map, #map1, #map2],\n       iterator_types = [\"parallel\", \"parallel\", \"reduction\"]}\n      ins(%lhs, %rhs : tensor&lt;?x?xi8&gt;, tensor&lt;?x?xi8&gt;)\n      outs(%acc : tensor&lt;?x?xi32&gt;) {\n    ^bb0(%lhs_entry: i8, %rhs_entry: i8, %acc_entry: i32):\n      %lhs_extended = arith.extsi %lhs_entry : i8 to i32\n      %rhs_extended = arith.extui %rhs_entry : i8 to i32\n      %mul = arith.muli %lhs_extended, %rhs_extended : i32\n      %add = arith.addi %acc_entry, %mul : i32\n      linalg.yield %add : i32\n    } -&gt; tensor&lt;?x?xi32&gt;\n    return %result : tensor&lt;?x?xi32&gt;\n  }\n}\n</code></pre> <pre><code>$ iree-compile prog.mlir -o /tmp/prog.vmfb \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu\n$ iree-run-module --module=/tmp/prog.vmfb \\\n  --input=2x2xi8=[[-1,-2][-3,-4]] \\\n  --input=2x2xi8=[[1,4][3,2]] \\\n  --input=2x2xi32=[[0,0][0,0]]\n\nEXEC @foo\nresult[0]: hal.buffer_view\n2x2xi32=[-7 -8][-15 -20]\n</code></pre> <p>Note</p> <p>A current runtime limitation, https://github.com/iree-org/iree/issues/16241, prevents passing sub-byte-bit-width integers on the <code>iree-run-module</code> command line.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/","title":"Exploring CPU microkernels on a matmul example","text":"","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#basic-setup-command-lines","title":"Basic setup, command lines","text":"<p>Source file: <code>matmul.mlir</code>:</p> <pre><code>func.func @matmul_dynamic(%lhs: tensor&lt;?x?xf32&gt;, %rhs: tensor&lt;?x?xf32&gt;, %acc: tensor&lt;?x?xf32&gt;) -&gt; tensor&lt;?x?xf32&gt; {\n  %result = linalg.matmul ins(%lhs, %rhs: tensor&lt;?x?xf32&gt;, tensor&lt;?x?xf32&gt;) outs(%acc: tensor&lt;?x?xf32&gt;) -&gt; tensor&lt;?x?xf32&gt;\n  return %result: tensor&lt;?x?xf32&gt;\n}\n</code></pre> <p>Basic compilation command line:</p> <pre><code>$ iree-compile matmul.mlir -o /tmp/matmul.vmfb \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-llvmcpu-target-cpu=znver4 \\\n  --iree-llvmcpu-enable-ukernels=all\n</code></pre> <p>This creates a IREE bytecode module:</p> <pre><code>$ ls -l /tmp/matmul.vmfb\n\n-rw-rw-r-- 1 2884 Jan 22 10:37 /tmp/matmul.vmfb\n</code></pre> <p>The above <code>.vmfb</code> is the only thing that's needed to run this matmul on the target device. But to understand microkernels, we are now going to generate additional intermediate files.</p> <p>Additional <code>iree-compile</code> flags to save intermediate files (IR, assembly, object code):</p> <pre><code>--iree-hal-dump-executable-intermediates-to=/tmp/matmul --x86-asm-syntax=intel\n</code></pre> <p>This saves LLVM IR in binary serialization (\"bitcode\", filename extension <code>.bc</code>). To read it, we need to \"disassemble\" it using <code>llvm-dis</code> to obtain textual IR (filename extension <code>.ll</code>).</p> <pre><code>llvm-dis /tmp/matmul/*.bc\n</code></pre> <p>Intermediate files:</p> <pre><code>  35196 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.codegen.bc\n 251597 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.codegen.ll\n 181740 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.linked.bc\n1396190 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.linked.ll\n  32096 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.o\n  34504 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.optimized.bc\n 184981 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.optimized.ll\n  82016 /tmp/matmul/module_matmul_linked_llvm_cpu_embedded_elf_x86_64.s\n</code></pre> <p>Another important <code>iree-compile</code> flag: <code>--mlir-print-ir-after-all</code> records the IR after each pass. We save that (stderr) output to a file, <code>ir.log</code> by appending to the <code>iree-compile</code> command line:</p> <pre><code>--mlir-print-ir-after-all 2&gt;/tmp/matmul/ir.log\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#overview-of-the-compilation-and-linking-flow","title":"Overview of the compilation and linking flow","text":"<p>This graph shows the transformations from the source <code>matmul.mlir</code> to the final <code>matmul.vmfb</code> with the various intermediates met in the previous section:</p> <pre><code>graph TD;\nmatmulontensors-- CPUMaterializeEncoding --&gt;mmt4dontensors;\nmmt4dontensors-- CPULowerToUKernels --&gt;ukernelontensors;\nukernelontensors-- IREEComprehensiveBufferize --&gt;ukernelonmemref;\nukernelonmemref-- LowerUKernelOpsToCalls --&gt;ukernelcall;\nukernelcall-- ConvertToLLVM --&gt;codegenll;\ncodegenll--&gt;bitcodelinking;\ngenericsource-- clang -emit-llvm --&gt; genericbitcode -- llvm-link --&gt; ukernelbitcode;\narchsource -- clang -emit-llvm --&gt; archbitcode -- llvm-link --&gt; ukernelbitcode;\nukernelbitcode--&gt;ukernelbitcodeembedded;\nukernelbitcodeembedded--&gt;bitcodelinking;\nbitcodelinking--&gt;linkedll;\nlinkedll -- IR optimization --&gt; optimizedll;\noptimizedll -- LLVM x86 backend --&gt; asm -- LLVM assembler --&gt; object -- iree-compile output --&gt; vmfb;\nmatmulontensors[\"linalg.matmul on tensors\"];\nmmt4dontensors[\"linalg.mmt4d on tensors\"];\nukernelontensors[\"ukernel.generic on tensors\"];\nukernelonmemref[\"ukernel.generic on memrefs\"];\nukernelcall[\"call to ukernel entry point\"];\ncodegenll[\"module_matmul_...codegen.ll\"];\nlinkedll[\"module_matmul_...linked.ll\"];\noptimizedll[\"module_matmul_...optimized.ll\"];\ngenericsource[\"generic source code\nmmt4d.c\"]\narchsource[\"architecture-specific source code\nmmt4d_x86_64_avx512_base.c\"]\ngenericbitcode[\"generic code as bitcode\nukernel_bitcode_generic_x86_64.bc\"]\narchbitcode[\"architecture-specific code as bitcode\nukernel_bitcode_arch_x86_64_avx512_base.bc\"]\nukernelbitcode[\"linked bitcode\nukernel_bitcode_x86_64.bc\"];\nukernelbitcodeembedded[\"microkernel bitcode embedded as\nstatic data in iree-compile\"];\nbitcodelinking[\"llvm::Linker::LinkInModule\"];\nasm[\"x86 asm, module_matmul_...s\"];\nobject[\"x86 ELF, module_matmul_...o\"];\nvmfb[\"matmul.vmfb\"];\n\nsubgraph Part1[\"Part 1: MLIR code generation\"]\n  matmulontensors\n  mmt4dontensors\n  ukernelontensors\n  ukernelonmemref\n  ukernelcall\n  codegenll\nend\n\nsubgraph Part2[\"Part 2: Microkernels compilation (part of the IREE build)\"]\n  genericsource\n  archsource\n  genericbitcode\n  archbitcode\n  ukernelbitcode\n  ukernelbitcodeembedded\nend\n\nsubgraph Part3[\"Part 3: Linking with microkernels, optimizing, producing object code\"]\n  bitcodelinking\n  linkedll\n  optimizedll\n  asm\n  object\n  vmfb\nend\n\nstyle Part1 stroke:#FDD835,stroke-width:2px\nstyle Part2 stroke:#039BE5,stroke-width:2px\nstyle Part3 stroke:#43A047,stroke-width:2px</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#part-1-mlir-code-generation","title":"\ud83d\udfe8 Part 1: MLIR code generation","text":"<p>Some initial boilerplate happens around our <code>linalg.matmul</code> before anything interesting happens to it.:</p> <p>\u27a4 Appendix: IR dump after WrapEntryPointsPass</p> <p>Next, the first interesting thing is the <code>CPUMaterializeHostEncoding</code> pass, where the <code>linalg.matmul</code> gets rewritten into a <code>linalg.mmt4d</code> which is a matmul with a tiled data layout. This is where we start specializing to the target ISA feature set, AVX-512, favoring a 16x16 tile size for this float32 matmul.</p> <p>\u27a4 Appendix: IR Dump After CPUMaterializeHostEncoding</p> <p>The idea is that <code>linalg.mmt4d</code> is what we will have a microkernel for, below. There is no need to have microkernels for anything but the target-optimal tiled layout, so we don't bother carrying a microkernel for <code>linalg.matmul</code> itself. The matrix layout transformation, bringing matrix data into this tiled layout, is also out of the scope of this <code>linalg.mmt4d</code> and hence of the <code>mmt4d</code> microkernel: we can rely on generic code-generation to take care of these byte-permutations, which is our preference as we aim to let that fuse into producers/consumers.</p> <p>Next comes the rewrite of <code>linalg.mmt4d</code> into a microkernel op, done by the <code>CPULowerToUKernels</code> pass. Here is the TableGen definition of the generic microkernel op we're going to generate:</p> <p>TableGen definition of <code>ukernel.generic</code></p> <p>C++ compiler code for CPULowerToUKernels</p> <p>\u27a4 Appendix: IR Dump After CPULowerToUKernels</p> <p>Notice that this IR is still working on <code>tensor</code> values, not on <code>memref</code> values.</p> <ul> <li>Rewrites are much nicer to perform on tensors than on memrefs.</li> <li><code>ukernel.generic</code> works with both tensors and memrefs.</li> <li>Allows performing the rewrite to <code>ukernel.generic</code> while still on tensors,   then just ride bufferization.</li> </ul> <p>Next, bufferization takes place. <code>tensor</code> values become <code>memref</code>.</p> <p>\u27a4 Appendix: IR Dump After IREEComprehensiveBufferize</p> <p>Next, the <code>LowerUKernelOpsToCalls</code> runs, rewriting <code>ukernel.generic</code> ops into function calls.</p> <ul> <li>Made possible by bufferization: there now are buffer pointers and strides to   pass to the target function.</li> </ul> <p>\u27a4 Appendix: IR Dump After LowerUKernelOpsToCalls</p> <p>Finally, this gets lowered to the MLIR LLVM dialect, in preparation for outputting plain LLVM IR.</p> <p>\u27a4 Appendix: IR Dump After ConvertToLLVM</p> <p>The above gets converted to plain LLVM IR and that's our first intermediate file, <code>module_matmul_linked_llvm_cpu_embedded_elf_x86_64.codegen.bc</code>, which <code>llvm-dis</code> helps disassemble into a textual IR file (<code>.ll</code>).</p> <p>\u27a4 Appendix: Intermediate file: <code>...codegen.bc</code>, disassembled to <code>...codegen.ll</code></p> <p>The above IR references an external symbol <code>iree_uk_mmt4d</code> for the microkernel that it calls, so it now needs to be linked against the ukernels bitcode.</p>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#part-2-microkernels-compilation-part-of-the-iree-build","title":"\ud83d\udfe6 Part 2: Microkernels compilation (part of the IREE build)","text":"<p>Microkernels are:</p> <ul> <li>Compiled to self-contained bitcode, once for each target architecture.<ul> <li>That puts requirement on the source languages that they can be defined in.<ul> <li>Can use C via <code>clang -emit-llvm</code> plus extra flags like <code>-ffreestanding</code>.<ul> <li>The source must not <code>#include</code> standard library headers or do   anything OS-specific.</li> </ul> </li> <li>Can use inline assembly but not out-of-line assembly.</li> </ul> </li> </ul> </li> <li>Taking scalar parameters, including buffer pointers and strides.<ul> <li>Array-processing microkernels have a memory-to-memory interface.</li> <li>No vector-to-vector microkernels.<ul> <li>Store-to-load-forwarding can still happen post-linking, effectively   achieving the same.</li> <li>Microkernel ops avoid MLIR vector dialect altogether.</li> </ul> </li> </ul> </li> </ul> <p>C source code for the <code>iree_uk_mmt4d</code> microkernel entry point</p> <p>This calls an architecture-specific function to return a function pointer to the optimized inner-loop implementation to use for given data types and SIMD ISA features, and then uses that in a generic outer-loop implementation.</p> <p>So the really interesting part is the implementation of the inner-loop function that we got a function pointer to. For example, here is the one used in our example where the element type is <code>f32</code> and the target has AVX-512.</p> <p>A custom CMake function, <code>iree_bitcode_library</code>, wraps <code>clang</code> to compile these C source files with special flags to obtain freestanding bitcode.</p> <p>Likewise, a custom CMake function, <code>iree_link_bitcode</code>, wraps <code>llvm-link</code> to link bitcode files.</p> <p>These are used during the IREE compiler build (as a dependency of <code>iree-compile</code>) to build microkernels as bitcode for all supported target architectures, generating one bitcode file for each architecture in the build directory:</p> <pre><code>~/iree-build$ ls ./runtime/src/iree/builtins/ukernel/ukernel_bitcode_*.bc | grep -v generic\n./runtime/src/iree/builtins/ukernel/ukernel_bitcode_arm_32.bc\n./runtime/src/iree/builtins/ukernel/ukernel_bitcode_arm_64.bc\n./runtime/src/iree/builtins/ukernel/ukernel_bitcode_riscv_32.bc\n./runtime/src/iree/builtins/ukernel/ukernel_bitcode_riscv_64.bc\n./runtime/src/iree/builtins/ukernel/ukernel_bitcode_x86_64.bc\n</code></pre> <p>These files are then embedded as static data within <code>iree-compile</code>, so that <code>iree-compile</code> stays self-contained.</p> <p>Here are some samples of ukernel bitcode if you are curious what it looks like:</p> <p>\u27a4 Appendix: embedded microkernel bitcode: <code>iree_uk_mmt4d</code> ukernel entry point</p> <p>\u27a4 Appendix: embedded microkernel bitcode: inner-loop tile function</p>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#part-3-linking-with-microkernels-optimizing-producing-object-code","title":"\ud83d\udfe9 Part 3: Linking with microkernels, optimizing, producing object code","text":"<p>The previous two sections covered respectively the compilation of the MLIR module, and the compilation of microkernels, as two separate bitcode modules. Now we turn to how these two bitcode modules are linked together.</p> <p>After code generation, <code>iree-compile</code> loads microkernel bitcode: https://github.com/iree-org/iree/blob/c437add6a3b1e3e873cec95505d37c4938fee74f/compiler/src/iree/compiler/Dialect/HAL/Target/LLVMCPU/LLVMCPUTarget.cpp#L490</p> <p>It is worth zooming into that <code>loadUKernelBitcode</code> function as, in addition to just loading the bitcode, it does one important thing: it adds the <code>alwaysinline</code> attribute on every function. As we will see just below, always inlining microkernels is key to achieving perfect results with no downsides compared to a pure code-generation approach. https://github.com/iree-org/iree/blob/c437add6a3b1e3e873cec95505d37c4938fee74f/compiler/src/iree/compiler/Dialect/HAL/Target/LLVMCPU/Builtins/UKernel.cpp#L36-L62</p> <p>And links it into the current module: https://github.com/iree-org/iree/blob/c437add6a3b1e3e873cec95505d37c4938fee74f/compiler/src/iree/compiler/Dialect/HAL/Target/LLVMCPU/LLVMCPUTarget.cpp#L499</p> <p>The linked IR so far is not very interesting, as it is still essentially just the concatenation of the above-discussed codegen and microkernel bitcode (except now with <code>alwaysinline</code> attributes). If you are curious, it is dumped as the <code>...linked.bc</code> file.</p> <p>Where it gets interesting is that immediately after that, we run LLVM IR optimization passes, which can be thought of as a form of link-time optimization (LTO): https://github.com/iree-org/iree/blob/c437add6a3b1e3e873cec95505d37c4938fee74f/compiler/src/iree/compiler/Dialect/HAL/Target/LLVMCPU/LLVMCPUTarget.cpp#L527</p> <p>At this point, all the microkernel code gets inlined into the dispatch function, the correct AVX-512 optimized tile function is selected and inlined, and everything else is DCE'd. That's how the user pays no cost for what they don't use --- not only for the microkernel entry points that they don't call, but also for all the unused code paths within each microkernel.</p> <p>\u27a4 Appendix: Intermediate file: <code>...optimized.bc</code>, disassembled to <code>...optimized.ll</code></p> <p>This then goes to the LLVM x86 backend, which produces x86 assembly.</p> <p>\u27a4 Appendix: x86 assembly</p>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#appendix","title":"Appendix","text":"","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ir-dump-after-wrapentrypointspass","title":"IR dump after WrapEntryPointsPass","text":"<pre><code>// -----// IR Dump After mlir::iree_compiler::IREE::ABI::WrapEntryPointsPass (iree-abi-wrap-entry-points) //----- //\n[...]\n// -----// IR Dump After Inliner (inline) //----- //\n#executable_target_embedded_elf_x86_64_ = #hal.executable.target&lt;\"llvm-cpu\", \"embedded-elf-x86_64\", {cpu = \"znver4\", cpu_features = \"+mmx,+popcnt,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+avx,+avx2,+sse4a,+fma,+avx512f,+bmi,+bmi2,+aes,+pclmul,+avx512vl,+avx512bw,+avx512dq,+avx512cd,+avx512vbmi,+avx512ifma,+avx512vpopcntdq,+avx512vbmi2,+gfni,+vpclmulqdq,+avx512vnni,+avx512bitalg,+avx512bf16,+adx,+clflushopt,+clwb,+clzero,+cx16,+cx8,+crc32,+f16c,+fsgsbase,+fxsr,+invpcid,+lzcnt,+movbe,+mwaitx,+pku,+prfchw,+rdpid,+rdpru,+rdrnd,+rdseed,+sahf,+sha,+shstk,+vaes,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,+evex512\", data_layout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\", native_vector_size = 64 : index, target_triple = \"x86_64-unknown-unknown-eabi-elf\", ukernels = \"all\"}&gt;\n#device_target_llvm_cpu = #hal.device.target&lt;\"local\", {executable_targets = [#executable_target_embedded_elf_x86_64_]}&gt; : !hal.device\nmodule attributes {hal.device.targets = [#device_target_llvm_cpu]} {\n  func.func @matmul_dynamic(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -&gt; !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = \"sync func @matmul_dynamic(%input0: tensor&lt;?x?xf32&gt;, %input1: tensor&lt;?x?xf32&gt;, %input2: tensor&lt;?x?xf32&gt;) -&gt; (%output0: tensor&lt;?x?xf32&gt;)\"}} {\n    %0 = hal.buffer_view.dim&lt;%arg0 : !hal.buffer_view&gt;[0] : index\n    %1 = hal.buffer_view.dim&lt;%arg0 : !hal.buffer_view&gt;[1] : index\n    %2 = hal.tensor.import %arg0 \"input0\" : !hal.buffer_view -&gt; tensor&lt;?x?xf32&gt;{%0, %1}\n    %3 = hal.buffer_view.dim&lt;%arg1 : !hal.buffer_view&gt;[0] : index\n    %4 = hal.buffer_view.dim&lt;%arg1 : !hal.buffer_view&gt;[1] : index\n    %5 = hal.tensor.import %arg1 \"input1\" : !hal.buffer_view -&gt; tensor&lt;?x?xf32&gt;{%3, %4}\n    %6 = hal.buffer_view.dim&lt;%arg2 : !hal.buffer_view&gt;[0] : index\n    %7 = hal.buffer_view.dim&lt;%arg2 : !hal.buffer_view&gt;[1] : index\n    %8 = hal.tensor.import %arg2 \"input2\" : !hal.buffer_view -&gt; tensor&lt;?x?xf32&gt;{%6, %7}\n    %9 = linalg.matmul ins(%2, %5 : tensor&lt;?x?xf32&gt;, tensor&lt;?x?xf32&gt;) outs(%8 : tensor&lt;?x?xf32&gt;) -&gt; tensor&lt;?x?xf32&gt;\n    %10 = hal.tensor.export %9 \"output0\" : tensor&lt;?x?xf32&gt;{%6, %7} -&gt; !hal.buffer_view\n    return %10 : !hal.buffer_view\n  }\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ir-dump-after-cpumaterializehostencoding","title":"IR Dump After CPUMaterializeHostEncoding","text":"<pre><code>// -----// IR Dump After CPUMaterializeHostEncoding (iree-codegen-cpu-materialize-host-encoding) //----- //\n[...]\n// -----// IR Dump After Canonicalizer (canonicalize) //----- //\n[...]\n// -----// IR Dump After CSE (cse) //----- //\n#executable_target_embedded_elf_x86_64_ = #hal.executable.target&lt;\"llvm-cpu\", \"embedded-elf-x86_64\", {cpu = \"znver4\", cpu_features = \"+mmx,+popcnt,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+avx,+avx2,+sse4a,+fma,+avx512f,+bmi,+bmi2,+aes,+pclmul,+avx512vl,+avx512bw,+avx512dq,+avx512cd,+avx512vbmi,+avx512ifma,+avx512vpopcntdq,+avx512vbmi2,+gfni,+vpclmulqdq,+avx512vnni,+avx512bitalg,+avx512bf16,+adx,+clflushopt,+clwb,+clzero,+cx16,+cx8,+crc32,+f16c,+fsgsbase,+fxsr,+invpcid,+lzcnt,+movbe,+mwaitx,+pku,+prfchw,+rdpid,+rdpru,+rdrnd,+rdseed,+sahf,+sha,+shstk,+vaes,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves,+evex512\", data_layout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\", native_vector_size = 64 : index, target_triple = \"x86_64-unknown-unknown-eabi-elf\", ukernels = \"all\"}&gt;\n#map = affine_map&lt;()[s0] -&gt; (s0 ceildiv 16)&gt;\n#device_target_llvm_cpu = #hal.device.target&lt;\"local\", {executable_targets = [#executable_target_embedded_elf_x86_64_]}&gt; : !hal.device\nmodule attributes {hal.device.targets = [#device_target_llvm_cpu]} {\n  func.func @matmul_dynamic(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view) -&gt; !hal.buffer_view attributes {iree.abi.stub, iree.reflection = {iree.abi.declaration = \"sync func @matmul_dynamic(%input0: tensor&lt;?x?xf32&gt;, %input1: tensor&lt;?x?xf32&gt;, %input2: tensor&lt;?x?xf32&gt;) -&gt; (%output0: tensor&lt;?x?xf32&gt;)\"}} {\n    %cst = arith.constant 0.000000e+00 : f32\n    %0 = hal.buffer_view.dim&lt;%arg0 : !hal.buffer_view&gt;[0] : index\n    %1 = hal.buffer_view.dim&lt;%arg0 : !hal.buffer_view&gt;[1] : index\n    %2 = hal.tensor.import %arg0 \"input0\" : !hal.buffer_view -&gt; tensor&lt;?x?xf32&gt;{%0, %1}\n    %3 = hal.buffer_view.dim&lt;%arg1 : !hal.buffer_view&gt;[0] : index\n    %4 = hal.buffer_view.dim&lt;%arg1 : !hal.buffer_view&gt;[1] : index\n    %5 = hal.tensor.import %arg1 \"input1\" : !hal.buffer_view -&gt; tensor&lt;?x?xf32&gt;{%3, %4}\n    %6 = hal.buffer_view.dim&lt;%arg2 : !hal.buffer_view&gt;[0] : index\n    %7 = hal.buffer_view.dim&lt;%arg2 : !hal.buffer_view&gt;[1] : index\n    %8 = hal.tensor.import %arg2 \"input2\" : !hal.buffer_view -&gt; tensor&lt;?x?xf32&gt;{%6, %7}\n    %9 = affine.apply #map()[%0]\n    %10 = tensor.empty(%9, %1) : tensor&lt;?x?x16x1xf32&gt;\n    %pack = linalg.pack %2 padding_value(%cst : f32) outer_dims_perm = [0, 1] inner_dims_pos = [0, 1] inner_tiles = [16, 1] into %10 : tensor&lt;?x?xf32&gt; -&gt; tensor&lt;?x?x16x1xf32&gt;\n    %11 = affine.apply #map()[%4]\n    %12 = tensor.empty(%11, %3) : tensor&lt;?x?x16x1xf32&gt;\n    %pack_0 = linalg.pack %5 padding_value(%cst : f32) outer_dims_perm = [1, 0] inner_dims_pos = [1, 0] inner_tiles = [16, 1] into %12 : tensor&lt;?x?xf32&gt; -&gt; tensor&lt;?x?x16x1xf32&gt;\n    %13 = affine.apply #map()[%6]\n    %14 = affine.apply #map()[%7]\n    %15 = tensor.empty(%13, %14) : tensor&lt;?x?x16x16xf32&gt;\n    %pack_1 = linalg.pack %8 padding_value(%cst : f32) outer_dims_perm = [0, 1] inner_dims_pos = [0, 1] inner_tiles = [16, 16] into %15 : tensor&lt;?x?xf32&gt; -&gt; tensor&lt;?x?x16x16xf32&gt;\n    %16 = linalg.mmt4d ins(%pack, %pack_0 : tensor&lt;?x?x16x1xf32&gt;, tensor&lt;?x?x16x1xf32&gt;) outs(%pack_1 : tensor&lt;?x?x16x16xf32&gt;) -&gt; tensor&lt;?x?x16x16xf32&gt;\n    %17 = tensor.empty(%6, %7) : tensor&lt;?x?xf32&gt;\n    %unpack = linalg.unpack %16 outer_dims_perm = [0, 1] inner_dims_pos = [0, 1] inner_tiles = [16, 16] into %17 : tensor&lt;?x?x16x16xf32&gt; -&gt; tensor&lt;?x?xf32&gt;\n    %18 = hal.tensor.export %unpack \"output0\" : tensor&lt;?x?xf32&gt;{%6, %7} -&gt; !hal.buffer_view\n    return %18 : !hal.buffer_view\n  }\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ir-dump-after-cpulowertoukernels","title":"IR Dump After CPULowerToUKernels","text":"<pre><code>// -----// IR Dump After CPULowerToUKernels (iree-codegen-cpu-lower-to-ukernels) //----- //\nmodule {\n  func.func @matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32() {\n    %c1281_i32 = arith.constant 1281 : i32\n    %c1_i32 = arith.constant 1 : i32\n    %c16_i32 = arith.constant 16 : i32\n    %c1 = arith.constant 1 : index\n    %c0 = arith.constant 0 : index\n    %c32_i64 = arith.constant 32 : i64\n    %0 = hal.interface.constant.load layout(#pipeline_layout) ordinal(0) : i32\n    %1 = hal.interface.constant.load layout(#pipeline_layout) ordinal(1) : i32\n    %2 = hal.interface.constant.load layout(#pipeline_layout) ordinal(2) : i32\n    %3 = hal.interface.constant.load layout(#pipeline_layout) ordinal(3) : i32\n    %4 = hal.interface.constant.load layout(#pipeline_layout) ordinal(4) : i32\n    %5 = hal.interface.constant.load layout(#pipeline_layout) ordinal(5) : i32\n    %6 = hal.interface.constant.load layout(#pipeline_layout) ordinal(6) : i32\n    %7 = hal.interface.constant.load layout(#pipeline_layout) ordinal(7) : i32\n    %8 = hal.interface.constant.load layout(#pipeline_layout) ordinal(8) : i32\n    %9 = hal.interface.constant.load layout(#pipeline_layout) ordinal(9) : i32\n    %10 = hal.interface.constant.load layout(#pipeline_layout) ordinal(10) : i32\n    %11 = hal.interface.constant.load layout(#pipeline_layout) ordinal(11) : i32\n    %12 = hal.interface.constant.load layout(#pipeline_layout) ordinal(12) : i32\n    %13 = hal.interface.constant.load layout(#pipeline_layout) ordinal(13) : i32\n    %14 = hal.interface.constant.load layout(#pipeline_layout) ordinal(14) : i32\n    %15 = hal.interface.constant.load layout(#pipeline_layout) ordinal(15) : i32\n    %16 = arith.extui %0 : i32 to i64\n    %17 = arith.extui %1 : i32 to i64\n    %18 = arith.shli %17, %c32_i64 : i64\n    %19 = arith.ori %16, %18 : i64\n    %20 = arith.index_castui %19 : i64 to index\n    %21 = arith.extui %2 : i32 to i64\n    %22 = arith.extui %3 : i32 to i64\n    %23 = arith.shli %22, %c32_i64 : i64\n    %24 = arith.ori %21, %23 : i64\n    %25 = arith.index_castui %24 : i64 to index\n    %26 = arith.extui %4 : i32 to i64\n    %27 = arith.extui %5 : i32 to i64\n    %28 = arith.shli %27, %c32_i64 : i64\n    %29 = arith.ori %26, %28 : i64\n    %30 = arith.index_castui %29 : i64 to index\n    %31 = arith.extui %6 : i32 to i64\n    %32 = arith.extui %7 : i32 to i64\n    %33 = arith.shli %32, %c32_i64 : i64\n    %34 = arith.ori %31, %33 : i64\n    %35 = arith.index_castui %34 : i64 to index\n    %36 = arith.extui %8 : i32 to i64\n    %37 = arith.extui %9 : i32 to i64\n    %38 = arith.shli %37, %c32_i64 : i64\n    %39 = arith.ori %36, %38 : i64\n    %40 = arith.index_castui %39 : i64 to index\n    %41 = arith.extui %10 : i32 to i64\n    %42 = arith.extui %11 : i32 to i64\n    %43 = arith.shli %42, %c32_i64 : i64\n    %44 = arith.ori %41, %43 : i64\n    %45 = arith.index_castui %44 : i64 to index\n    %46 = arith.extui %12 : i32 to i64\n    %47 = arith.extui %13 : i32 to i64\n    %48 = arith.shli %47, %c32_i64 : i64\n    %49 = arith.ori %46, %48 : i64\n    %50 = arith.index_castui %49 : i64 to index\n    %51 = arith.extui %14 : i32 to i64\n    %52 = arith.extui %15 : i32 to i64\n    %53 = arith.shli %52, %c32_i64 : i64\n    %54 = arith.ori %51, %53 : i64\n    %55 = arith.index_castui %54 : i64 to index\n    %56 = hal.interface.binding.subspan layout(#layout) binding(0) alignment(64) offset(%c0) flags(ReadOnly) : !iree_tensor_ext.dispatch.tensor&lt;readonly:tensor&lt;?x?x16x1xf32&gt;&gt;{%30, %35}\n    %57 = hal.interface.binding.subspan layout(#layout) binding(0) alignment(64) offset(%20) flags(ReadOnly) : !iree_tensor_ext.dispatch.tensor&lt;readonly:tensor&lt;?x?x16x1xf32&gt;&gt;{%40, %45}\n    %58 = hal.interface.binding.subspan layout(#layout) binding(1) alignment(64) offset(%25) : !iree_tensor_ext.dispatch.tensor&lt;readwrite:tensor&lt;?x?x16x16xf32&gt;&gt;{%50, %55}\n    %workgroup_id_x = hal.interface.workgroup.id[0] : index\n    %workgroup_count_x = hal.interface.workgroup.count[0] : index\n    %workgroup_id_y = hal.interface.workgroup.id[1] : index\n    %workgroup_count_y = hal.interface.workgroup.count[1] : index\n    scf.for %arg0 = %workgroup_id_y to %30 step %workgroup_count_y {\n      scf.for %arg1 = %workgroup_id_x to %40 step %workgroup_count_x {\n        %59 = iree_tensor_ext.dispatch.tensor.load %56, offsets = [%arg0, 0, 0, 0], sizes = [1, %35, 16, 1], strides = [1, 1, 1, 1] : !iree_tensor_ext.dispatch.tensor&lt;readonly:tensor&lt;?x?x16x1xf32&gt;&gt;{%30, %35} -&gt; tensor&lt;1x?x16x1xf32&gt;\n        %60 = iree_tensor_ext.dispatch.tensor.load %57, offsets = [%arg1, 0, 0, 0], sizes = [1, %35, 16, 1], strides = [1, 1, 1, 1] : !iree_tensor_ext.dispatch.tensor&lt;readonly:tensor&lt;?x?x16x1xf32&gt;&gt;{%40, %45} -&gt; tensor&lt;1x?x16x1xf32&gt;\n        %61 = iree_tensor_ext.dispatch.tensor.load %58, offsets = [%arg0, %arg1, 0, 0], sizes = [1, 1, 16, 16], strides = [1, 1, 1, 1] : !iree_tensor_ext.dispatch.tensor&lt;readwrite:tensor&lt;?x?x16x16xf32&gt;&gt;{%50, %55} -&gt; tensor&lt;1x1x16x16xf32&gt;\n        %dim = tensor.dim %60, %c1 : tensor&lt;1x?x16x1xf32&gt;\n        %62 = iree_codegen.ukernel.generic \"iree_uk_mmt4d\" ins(%59, %60 : tensor&lt;1x?x16x1xf32&gt;, tensor&lt;1x?x16x1xf32&gt;) outs(%61 : tensor&lt;1x1x16x16xf32&gt;) (%c1, %c1, %dim, %c16_i32, %c16_i32, %c1_i32, %c1281_i32 : index, index, index, i32, i32, i32, i32) fn_def_attrs {hal.import.bitcode = true, hal.import.cconv = 1 : i32, hal.import.fields = [\"processor_data\"]} strided_outer_dims(1) -&gt; tensor&lt;1x1x16x16xf32&gt;\n        iree_tensor_ext.dispatch.tensor.store %62, %58, offsets = [%arg0, %arg1, 0, 0], sizes = [1, 1, 16, 16], strides = [1, 1, 1, 1] : tensor&lt;1x1x16x16xf32&gt; -&gt; !iree_tensor_ext.dispatch.tensor&lt;readwrite:tensor&lt;?x?x16x16xf32&gt;&gt;{%50, %55}\n      }\n    }\n    return\n  }\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ir-dump-after-ireecomprehensivebufferize","title":"IR Dump After IREEComprehensiveBufferize","text":"<pre><code>// -----// IR Dump After IREEComprehensiveBufferize (iree-codegen-iree-comprehensive-bufferize) //----- //\n[...]\n// -----// IR Dump After EmptyTensorToAllocTensor (empty-tensor-to-alloc-tensor) //----- //\n[...]\n// -----// IR Dump After ResolveShapedTypeResultDims (resolve-shaped-type-result-dims) //----- //\n[...]\n// -----// IR Dump After Canonicalizer (canonicalize) //----- //\n[...]\n// -----// IR Dump After CSE (cse) //----- //\n[...]\n// -----// IR Dump After CleanupBufferAllocView (iree-codegen-cleanup-buffer-alloc-view) //----- //\nfunc.func @matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32() {\n  %c1281_i32 = arith.constant 1281 : i32\n  %c1_i32 = arith.constant 1 : i32\n  %c16_i32 = arith.constant 16 : i32\n  %c1 = arith.constant 1 : index\n  %c0 = arith.constant 0 : index\n  %c32_i64 = arith.constant 32 : i64\n  %0 = hal.interface.constant.load layout(#pipeline_layout) ordinal(0) : i32\n  %1 = hal.interface.constant.load layout(#pipeline_layout) ordinal(1) : i32\n  %2 = hal.interface.constant.load layout(#pipeline_layout) ordinal(2) : i32\n  %3 = hal.interface.constant.load layout(#pipeline_layout) ordinal(3) : i32\n  %4 = hal.interface.constant.load layout(#pipeline_layout) ordinal(4) : i32\n  %5 = hal.interface.constant.load layout(#pipeline_layout) ordinal(5) : i32\n  %6 = hal.interface.constant.load layout(#pipeline_layout) ordinal(6) : i32\n  %7 = hal.interface.constant.load layout(#pipeline_layout) ordinal(7) : i32\n  %8 = hal.interface.constant.load layout(#pipeline_layout) ordinal(8) : i32\n  %9 = hal.interface.constant.load layout(#pipeline_layout) ordinal(9) : i32\n  %10 = hal.interface.constant.load layout(#pipeline_layout) ordinal(10) : i32\n  %11 = hal.interface.constant.load layout(#pipeline_layout) ordinal(11) : i32\n  %12 = hal.interface.constant.load layout(#pipeline_layout) ordinal(12) : i32\n  %13 = hal.interface.constant.load layout(#pipeline_layout) ordinal(13) : i32\n  %14 = hal.interface.constant.load layout(#pipeline_layout) ordinal(14) : i32\n  %15 = hal.interface.constant.load layout(#pipeline_layout) ordinal(15) : i32\n  %16 = arith.extui %0 : i32 to i64\n  %17 = arith.extui %1 : i32 to i64\n  %18 = arith.shli %17, %c32_i64 : i64\n  %19 = arith.ori %16, %18 : i64\n  %20 = arith.index_castui %19 : i64 to index\n  %21 = arith.extui %2 : i32 to i64\n  %22 = arith.extui %3 : i32 to i64\n  %23 = arith.shli %22, %c32_i64 : i64\n  %24 = arith.ori %21, %23 : i64\n  %25 = arith.index_castui %24 : i64 to index\n  %26 = arith.extui %4 : i32 to i64\n  %27 = arith.extui %5 : i32 to i64\n  %28 = arith.shli %27, %c32_i64 : i64\n  %29 = arith.ori %26, %28 : i64\n  %30 = arith.index_castui %29 : i64 to index\n  %31 = arith.extui %6 : i32 to i64\n  %32 = arith.extui %7 : i32 to i64\n  %33 = arith.shli %32, %c32_i64 : i64\n  %34 = arith.ori %31, %33 : i64\n  %35 = arith.index_castui %34 : i64 to index\n  %36 = arith.extui %8 : i32 to i64\n  %37 = arith.extui %9 : i32 to i64\n  %38 = arith.shli %37, %c32_i64 : i64\n  %39 = arith.ori %36, %38 : i64\n  %40 = arith.index_castui %39 : i64 to index\n  %41 = arith.extui %10 : i32 to i64\n  %42 = arith.extui %11 : i32 to i64\n  %43 = arith.shli %42, %c32_i64 : i64\n  %44 = arith.ori %41, %43 : i64\n  %45 = arith.index_castui %44 : i64 to index\n  %46 = arith.extui %12 : i32 to i64\n  %47 = arith.extui %13 : i32 to i64\n  %48 = arith.shli %47, %c32_i64 : i64\n  %49 = arith.ori %46, %48 : i64\n  %50 = arith.index_castui %49 : i64 to index\n  %51 = arith.extui %14 : i32 to i64\n  %52 = arith.extui %15 : i32 to i64\n  %53 = arith.shli %52, %c32_i64 : i64\n  %54 = arith.ori %51, %53 : i64\n  %55 = arith.index_castui %54 : i64 to index\n  %56 = hal.interface.binding.subspan layout(#layout) binding(0) alignment(64) offset(%c0) flags(ReadOnly) : memref&lt;?x?x16x1xf32, #hal.descriptor_type&lt;storage_buffer&gt;&gt;{%30, %35}\n  memref.assume_alignment %56, 64 : memref&lt;?x?x16x1xf32, #hal.descriptor_type&lt;storage_buffer&gt;&gt;\n  %57 = hal.interface.binding.subspan layout(#layout) binding(0) alignment(64) offset(%20) flags(ReadOnly) : memref&lt;?x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;{%40, %45}\n  memref.assume_alignment %57, 1 : memref&lt;?x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;\n  %58 = hal.interface.binding.subspan layout(#layout) binding(1) alignment(64) offset(%25) : memref&lt;?x?x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;{%50, %55}\n  memref.assume_alignment %58, 1 : memref&lt;?x?x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;\n  %workgroup_id_x = hal.interface.workgroup.id[0] : index\n  %workgroup_count_x = hal.interface.workgroup.count[0] : index\n  %workgroup_id_y = hal.interface.workgroup.id[1] : index\n  %workgroup_count_y = hal.interface.workgroup.count[1] : index\n  scf.for %arg0 = %workgroup_id_y to %30 step %workgroup_count_y {\n    %subview = memref.subview %56[%arg0, 0, 0, 0] [1, %35, 16, 1] [1, 1, 1, 1] : memref&lt;?x?x16x1xf32, #hal.descriptor_type&lt;storage_buffer&gt;&gt; to memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;\n    scf.for %arg1 = %workgroup_id_x to %40 step %workgroup_count_x {\n      %subview_0 = memref.subview %57[%arg1, 0, 0, 0] [1, %35, 16, 1] [1, 1, 1, 1] : memref&lt;?x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt; to memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;\n      %subview_1 = memref.subview %58[%arg0, %arg1, 0, 0] [1, 1, 16, 16] [1, 1, 1, 1] : memref&lt;?x?x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt; to memref&lt;1x1x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;\n      iree_codegen.ukernel.generic \"iree_uk_mmt4d\" ins(%subview, %subview_0 : memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;, memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;) outs(%subview_1 : memref&lt;1x1x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;, #hal.descriptor_type&lt;storage_buffer&gt;&gt;) (%c1, %c1, %35, %c16_i32, %c16_i32, %c1_i32, %c1281_i32 : index, index, index, i32, i32, i32, i32) fn_def_attrs {hal.import.bitcode = true, hal.import.cconv = 1 : i32, hal.import.fields = [\"processor_data\"]} strided_outer_dims(1)\n    }\n  }\n  return\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ir-dump-after-lowerukernelopstocalls","title":"IR Dump After LowerUKernelOpsToCalls","text":"<pre><code>// -----// IR Dump After LowerUKernelOpsToCalls (iree-codegen-lower-ukernel-ops-to-calls) //----- //\nmodule {\n  func.func private @iree_uk_mmt4d(memref&lt;f32&gt;, index, index, memref&lt;f32&gt;, index, index, memref&lt;f32&gt;, index, index, index, index, index, i32, i32, i32, i32) attributes {hal.import.bitcode = true, hal.import.cconv = 1 : i32, hal.import.fields = [\"processor_data\"], llvm.bareptr = true}\n  func.func @matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32() {\n    %c1281_i32 = arith.constant 1281 : i32\n    %c1_i32 = arith.constant 1 : i32\n    %c16_i32 = arith.constant 16 : i32\n    %c1 = arith.constant 1 : index\n    %c0 = arith.constant 0 : index\n    %c32_i64 = arith.constant 32 : i64\n    %0 = hal.interface.constant.load layout(#pipeline_layout) ordinal(0) : i32\n    %1 = hal.interface.constant.load layout(#pipeline_layout) ordinal(1) : i32\n    %2 = hal.interface.constant.load layout(#pipeline_layout) ordinal(2) : i32\n    %3 = hal.interface.constant.load layout(#pipeline_layout) ordinal(3) : i32\n    %4 = hal.interface.constant.load layout(#pipeline_layout) ordinal(4) : i32\n    %5 = hal.interface.constant.load layout(#pipeline_layout) ordinal(5) : i32\n    %6 = hal.interface.constant.load layout(#pipeline_layout) ordinal(6) : i32\n    %7 = hal.interface.constant.load layout(#pipeline_layout) ordinal(7) : i32\n    %8 = hal.interface.constant.load layout(#pipeline_layout) ordinal(8) : i32\n    %9 = hal.interface.constant.load layout(#pipeline_layout) ordinal(9) : i32\n    %10 = hal.interface.constant.load layout(#pipeline_layout) ordinal(10) : i32\n    %11 = hal.interface.constant.load layout(#pipeline_layout) ordinal(11) : i32\n    %12 = hal.interface.constant.load layout(#pipeline_layout) ordinal(12) : i32\n    %13 = hal.interface.constant.load layout(#pipeline_layout) ordinal(13) : i32\n    %14 = hal.interface.constant.load layout(#pipeline_layout) ordinal(14) : i32\n    %15 = hal.interface.constant.load layout(#pipeline_layout) ordinal(15) : i32\n    %16 = arith.extui %0 : i32 to i64\n    %17 = arith.extui %1 : i32 to i64\n    %18 = arith.shli %17, %c32_i64 : i64\n    %19 = arith.ori %16, %18 : i64\n    %20 = arith.index_castui %19 : i64 to index\n    %21 = arith.extui %2 : i32 to i64\n    %22 = arith.extui %3 : i32 to i64\n    %23 = arith.shli %22, %c32_i64 : i64\n    %24 = arith.ori %21, %23 : i64\n    %25 = arith.index_castui %24 : i64 to index\n    %26 = arith.extui %4 : i32 to i64\n    %27 = arith.extui %5 : i32 to i64\n    %28 = arith.shli %27, %c32_i64 : i64\n    %29 = arith.ori %26, %28 : i64\n    %30 = arith.index_castui %29 : i64 to index\n    %31 = arith.extui %6 : i32 to i64\n    %32 = arith.extui %7 : i32 to i64\n    %33 = arith.shli %32, %c32_i64 : i64\n    %34 = arith.ori %31, %33 : i64\n    %35 = arith.index_castui %34 : i64 to index\n    %36 = arith.extui %8 : i32 to i64\n    %37 = arith.extui %9 : i32 to i64\n    %38 = arith.shli %37, %c32_i64 : i64\n    %39 = arith.ori %36, %38 : i64\n    %40 = arith.index_castui %39 : i64 to index\n    %41 = arith.extui %10 : i32 to i64\n    %42 = arith.extui %11 : i32 to i64\n    %43 = arith.shli %42, %c32_i64 : i64\n    %44 = arith.ori %41, %43 : i64\n    %45 = arith.index_castui %44 : i64 to index\n    %46 = arith.extui %12 : i32 to i64\n    %47 = arith.extui %13 : i32 to i64\n    %48 = arith.shli %47, %c32_i64 : i64\n    %49 = arith.ori %46, %48 : i64\n    %50 = arith.index_castui %49 : i64 to index\n    %51 = arith.extui %14 : i32 to i64\n    %52 = arith.extui %15 : i32 to i64\n    %53 = arith.shli %52, %c32_i64 : i64\n    %54 = arith.ori %51, %53 : i64\n    %55 = arith.index_castui %54 : i64 to index\n    %56 = hal.interface.binding.subspan layout(#layout) binding(0) alignment(64) offset(%c0) flags(ReadOnly) : memref&lt;?x?x16x1xf32&gt;{%30, %35}\n    memref.assume_alignment %56, 64 : memref&lt;?x?x16x1xf32&gt;\n    %57 = hal.interface.binding.subspan layout(#layout) binding(0) alignment(64) offset(%20) flags(ReadOnly) : memref&lt;?x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;&gt;{%40, %45}\n    memref.assume_alignment %57, 1 : memref&lt;?x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;&gt;\n    %58 = hal.interface.binding.subspan layout(#layout) binding(1) alignment(64) offset(%25) : memref&lt;?x?x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;&gt;{%50, %55}\n    memref.assume_alignment %58, 1 : memref&lt;?x?x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;&gt;\n    %workgroup_id_x = hal.interface.workgroup.id[0] : index\n    %workgroup_count_x = hal.interface.workgroup.count[0] : index\n    %workgroup_id_y = hal.interface.workgroup.id[1] : index\n    %workgroup_count_y = hal.interface.workgroup.count[1] : index\n    scf.for %arg0 = %workgroup_id_y to %30 step %workgroup_count_y {\n      %subview = memref.subview %56[%arg0, 0, 0, 0] [1, %35, 16, 1] [1, 1, 1, 1] : memref&lt;?x?x16x1xf32&gt; to memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;&gt;\n      scf.for %arg1 = %workgroup_id_x to %40 step %workgroup_count_x {\n        %subview_0 = memref.subview %57[%arg1, 0, 0, 0] [1, %35, 16, 1] [1, 1, 1, 1] : memref&lt;?x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;&gt; to memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;&gt;\n        %subview_1 = memref.subview %58[%arg0, %arg1, 0, 0] [1, 1, 16, 16] [1, 1, 1, 1] : memref&lt;?x?x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;&gt; to memref&lt;1x1x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;&gt;\n        %base_buffer, %offset, %sizes:4, %strides:4 = memref.extract_strided_metadata %subview : memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;&gt; -&gt; memref&lt;f32&gt;, index, index, index, index, index, index, index, index, index\n        %base_buffer_2, %offset_3, %sizes_4:4, %strides_5:4 = memref.extract_strided_metadata %subview_0 : memref&lt;1x?x16x1xf32, strided&lt;[?, 16, 1, 1], offset: ?&gt;&gt; -&gt; memref&lt;f32&gt;, index, index, index, index, index, index, index, index, index\n        %base_buffer_6, %offset_7, %sizes_8:4, %strides_9:4 = memref.extract_strided_metadata %subview_1 : memref&lt;1x1x16x16xf32, strided&lt;[?, 256, 16, 1], offset: ?&gt;&gt; -&gt; memref&lt;f32&gt;, index, index, index, index, index, index, index, index, index\n        func.call @iree_uk_mmt4d(%base_buffer, %offset, %strides#0, %base_buffer_2, %offset_3, %strides_5#0, %base_buffer_6, %offset_7, %strides_9#0, %c1, %c1, %35, %c16_i32, %c16_i32, %c1_i32, %c1281_i32) : (memref&lt;f32&gt;, index, index, memref&lt;f32&gt;, index, index, memref&lt;f32&gt;, index, index, index, index, index, i32, i32, i32, i32) -&gt; ()\n      }\n    }\n    return\n  }\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ir-dump-after-converttollvm","title":"IR Dump After ConvertToLLVM","text":"<pre><code>// -----// IR Dump After ConvertToLLVM (iree-convert-to-llvm) //----- //\nmodule attributes {llvm.data_layout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128\", llvm.target_triple = \"x86_64-unknown-unknown-eabi-elf\"} {\n  llvm.func @iree_uk_mmt4d(!llvm.ptr) attributes {hal.import.bitcode = true, hal.import.cconv = 1 : i32, hal.import.fields = [\"processor_data\"], llvm.bareptr = true}\n  llvm.func @matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32(%arg0: !llvm.ptr {llvm.align = 16 : i64, llvm.noalias}, %arg1: !llvm.ptr {llvm.align = 16 : i64, llvm.noalias}, %arg2: !llvm.ptr {llvm.align = 16 : i64, llvm.noalias}) -&gt; i32 {\n    %0 = llvm.mlir.constant(4293970975 : i64) : i64\n    %1 = llvm.mlir.constant(8 : i64) : i64\n    %2 = llvm.mlir.constant(0 : i32) : i32\n    %3 = llvm.mlir.constant(256 : index) : i64\n    %4 = llvm.mlir.constant(-1 : index) : i64\n    %5 = llvm.mlir.constant(4 : index) : i64\n    %6 = llvm.mlir.constant(16 : index) : i64\n    %7 = llvm.mlir.constant(0 : index) : i64\n    %8 = llvm.mlir.constant(1281 : i32) : i32\n    %9 = llvm.mlir.constant(1 : i32) : i32\n    %10 = llvm.mlir.constant(16 : i32) : i32\n    %11 = llvm.mlir.constant(1 : index) : i64\n    %12 = llvm.mlir.constant(32 : i64) : i64\n    %13 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %14 = llvm.extractvalue %13[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %15 = llvm.load %14 : !llvm.ptr -&gt; i32\n    %16 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %17 = llvm.extractvalue %16[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %18 = llvm.getelementptr %17[1] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %19 = llvm.load %18 : !llvm.ptr -&gt; i32\n    %20 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %21 = llvm.extractvalue %20[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %22 = llvm.getelementptr %21[2] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %23 = llvm.load %22 : !llvm.ptr -&gt; i32\n    %24 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %25 = llvm.extractvalue %24[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %26 = llvm.getelementptr %25[3] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %27 = llvm.load %26 : !llvm.ptr -&gt; i32\n    %28 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %29 = llvm.extractvalue %28[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %30 = llvm.getelementptr %29[4] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %31 = llvm.load %30 : !llvm.ptr -&gt; i32\n    %32 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %33 = llvm.extractvalue %32[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %34 = llvm.getelementptr %33[5] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %35 = llvm.load %34 : !llvm.ptr -&gt; i32\n    %36 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %37 = llvm.extractvalue %36[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %38 = llvm.getelementptr %37[6] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %39 = llvm.load %38 : !llvm.ptr -&gt; i32\n    %40 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %41 = llvm.extractvalue %40[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %42 = llvm.getelementptr %41[7] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %43 = llvm.load %42 : !llvm.ptr -&gt; i32\n    %44 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %45 = llvm.extractvalue %44[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %46 = llvm.getelementptr %45[8] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %47 = llvm.load %46 : !llvm.ptr -&gt; i32\n    %48 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %49 = llvm.extractvalue %48[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %50 = llvm.getelementptr %49[9] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %51 = llvm.load %50 : !llvm.ptr -&gt; i32\n    %52 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %53 = llvm.extractvalue %52[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %54 = llvm.getelementptr %53[10] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %55 = llvm.load %54 : !llvm.ptr -&gt; i32\n    %56 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %57 = llvm.extractvalue %56[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %58 = llvm.getelementptr %57[11] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %59 = llvm.load %58 : !llvm.ptr -&gt; i32\n    %60 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %61 = llvm.extractvalue %60[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %62 = llvm.getelementptr %61[14] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %63 = llvm.load %62 : !llvm.ptr -&gt; i32\n    %64 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %65 = llvm.extractvalue %64[9] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %66 = llvm.getelementptr %65[15] : (!llvm.ptr) -&gt; !llvm.ptr, i32\n    %67 = llvm.load %66 : !llvm.ptr -&gt; i32\n    %68 = llvm.zext %15 : i32 to i64\n    %69 = llvm.zext %19 : i32 to i64\n    %70 = llvm.shl %69, %12  : i64\n    %71 = llvm.or %68, %70  : i64\n    %72 = llvm.zext %23 : i32 to i64\n    %73 = llvm.zext %27 : i32 to i64\n    %74 = llvm.shl %73, %12  : i64\n    %75 = llvm.or %72, %74  : i64\n    %76 = llvm.zext %31 : i32 to i64\n    %77 = llvm.zext %35 : i32 to i64\n    %78 = llvm.shl %77, %12  : i64\n    %79 = llvm.or %76, %78  : i64\n    %80 = llvm.zext %39 : i32 to i64\n    %81 = llvm.zext %43 : i32 to i64\n    %82 = llvm.shl %81, %12  : i64\n    %83 = llvm.or %80, %82  : i64\n    %84 = llvm.zext %47 : i32 to i64\n    %85 = llvm.zext %51 : i32 to i64\n    %86 = llvm.shl %85, %12  : i64\n    %87 = llvm.or %84, %86  : i64\n    %88 = llvm.zext %55 : i32 to i64\n    %89 = llvm.zext %59 : i32 to i64\n    %90 = llvm.shl %89, %12  : i64\n    %91 = llvm.or %88, %90  : i64\n    %92 = llvm.zext %63 : i32 to i64\n    %93 = llvm.zext %67 : i32 to i64\n    %94 = llvm.shl %93, %12  : i64\n    %95 = llvm.or %92, %94  : i64\n    %96 = llvm.mul %83, %6  : i64\n    %97 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %98 = llvm.extractvalue %97[10] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %99 = llvm.load %98 : !llvm.ptr -&gt; !llvm.ptr\n    %100 = llvm.mul %91, %6  : i64\n    %101 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %102 = llvm.extractvalue %101[10] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %103 = llvm.load %102 : !llvm.ptr -&gt; !llvm.ptr\n    %104 = llvm.mul %95, %3  : i64\n    %105 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %106 = llvm.extractvalue %105[10] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %107 = llvm.getelementptr %106[1] : (!llvm.ptr) -&gt; !llvm.ptr, !llvm.ptr\n    %108 = llvm.load %107 : !llvm.ptr -&gt; !llvm.ptr\n    %109 = llvm.load %arg2 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_workgroup_state_v0_t\", (i32, i32, i16, i16, i32, ptr, i32)&gt;\n    %110 = llvm.extractvalue %109[0] : !llvm.struct&lt;\"iree_hal_executable_workgroup_state_v0_t\", (i32, i32, i16, i16, i32, ptr, i32)&gt;\n    %111 = llvm.zext %110 : i32 to i64\n    %112 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %113 = llvm.extractvalue %112[4] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %114 = llvm.zext %113 : i32 to i64\n    %115 = llvm.load %arg2 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_workgroup_state_v0_t\", (i32, i32, i16, i16, i32, ptr, i32)&gt;\n    %116 = llvm.extractvalue %115[1] : !llvm.struct&lt;\"iree_hal_executable_workgroup_state_v0_t\", (i32, i32, i16, i16, i32, ptr, i32)&gt;\n    %117 = llvm.zext %116 : i32 to i64\n    %118 = llvm.load %arg1 : !llvm.ptr -&gt; !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %119 = llvm.extractvalue %118[5] : !llvm.struct&lt;\"iree_hal_executable_dispatch_state_v0_t\", (i32, i32, i16, i16, i32, i32, i16, i8, i8, ptr, ptr, ptr)&gt;\n    %120 = llvm.zext %119 : i32 to i64\n    llvm.br ^bb1(%117 : i64)\n  ^bb1(%121: i64):  // 2 preds: ^bb0, ^bb4\n    %122 = llvm.icmp \"slt\" %121, %79 : i64\n    llvm.cond_br %122, ^bb2(%111 : i64), ^bb5\n  ^bb2(%123: i64):  // 2 preds: ^bb1, ^bb3\n    %124 = llvm.icmp \"slt\" %123, %87 : i64\n    llvm.cond_br %124, ^bb3, ^bb4\n  ^bb3:  // pred: ^bb2\n    %125 = llvm.mul %83, %6  : i64\n    %126 = llvm.mul %121, %125  : i64\n    %127 = llvm.icmp \"slt\" %71, %7 : i64\n    %128 = llvm.sub %4, %71  : i64\n    %129 = llvm.select %127, %128, %71 : i1, i64\n    %130 = llvm.sdiv %129, %5  : i64\n    %131 = llvm.sub %4, %130  : i64\n    %132 = llvm.select %127, %131, %130 : i1, i64\n    %133 = llvm.mul %91, %6  : i64\n    %134 = llvm.mul %123, %133  : i64\n    %135 = llvm.add %132, %134  : i64\n    %136 = llvm.mul %123, %3  : i64\n    %137 = llvm.icmp \"slt\" %75, %7 : i64\n    %138 = llvm.sub %4, %75  : i64\n    %139 = llvm.select %137, %138, %75 : i1, i64\n    %140 = llvm.sdiv %139, %5  : i64\n    %141 = llvm.sub %4, %140  : i64\n    %142 = llvm.select %137, %141, %140 : i1, i64\n    %143 = llvm.add %136, %142  : i64\n    %144 = llvm.mul %95, %3  : i64\n    %145 = llvm.mul %121, %144  : i64\n    %146 = llvm.add %143, %145  : i64\n    %147 = llvm.getelementptr inbounds %arg0[4] : (!llvm.ptr) -&gt; !llvm.ptr, !llvm.ptr\n    %148 = llvm.alloca %1 x i64 {alignment = 8 : i64} : (i64) -&gt; !llvm.ptr\n    %149 = llvm.load %147 : !llvm.ptr -&gt; i64\n    %150 = llvm.or %149, %0  : i64\n    llvm.store %150, %148 : i64, !llvm.ptr\n    %151 = llvm.getelementptr inbounds %147[1] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    %152 = llvm.load %151 : !llvm.ptr -&gt; i64\n    %153 = llvm.getelementptr inbounds %148[1] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    llvm.store %152, %153 : i64, !llvm.ptr\n    %154 = llvm.getelementptr inbounds %147[2] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    %155 = llvm.load %154 : !llvm.ptr -&gt; i64\n    %156 = llvm.getelementptr inbounds %148[2] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    llvm.store %155, %156 : i64, !llvm.ptr\n    %157 = llvm.getelementptr inbounds %147[3] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    %158 = llvm.load %157 : !llvm.ptr -&gt; i64\n    %159 = llvm.getelementptr inbounds %148[3] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    llvm.store %158, %159 : i64, !llvm.ptr\n    %160 = llvm.getelementptr inbounds %147[4] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    %161 = llvm.load %160 : !llvm.ptr -&gt; i64\n    %162 = llvm.getelementptr inbounds %148[4] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    llvm.store %161, %162 : i64, !llvm.ptr\n    %163 = llvm.getelementptr inbounds %147[5] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    %164 = llvm.load %163 : !llvm.ptr -&gt; i64\n    %165 = llvm.getelementptr inbounds %148[5] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    llvm.store %164, %165 : i64, !llvm.ptr\n    %166 = llvm.getelementptr inbounds %147[6] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    %167 = llvm.load %166 : !llvm.ptr -&gt; i64\n    %168 = llvm.getelementptr inbounds %148[6] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    llvm.store %167, %168 : i64, !llvm.ptr\n    %169 = llvm.getelementptr inbounds %147[7] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    %170 = llvm.load %169 : !llvm.ptr -&gt; i64\n    %171 = llvm.getelementptr inbounds %148[7] : (!llvm.ptr) -&gt; !llvm.ptr, i64\n    llvm.store %170, %171 : i64, !llvm.ptr\n    %172 = llvm.alloca %11 x !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt; : (i64) -&gt; !llvm.ptr\n    %173 = llvm.mlir.undef : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %174 = llvm.insertvalue %99, %173[0] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %175 = llvm.insertvalue %126, %174[1] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %176 = llvm.insertvalue %96, %175[2] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %177 = llvm.insertvalue %103, %176[3] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %178 = llvm.insertvalue %135, %177[4] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %179 = llvm.insertvalue %100, %178[5] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %180 = llvm.insertvalue %108, %179[6] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %181 = llvm.insertvalue %146, %180[7] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %182 = llvm.insertvalue %104, %181[8] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %183 = llvm.insertvalue %11, %182[9] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %184 = llvm.insertvalue %11, %183[10] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %185 = llvm.insertvalue %83, %184[11] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %186 = llvm.insertvalue %10, %185[12] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %187 = llvm.insertvalue %10, %186[13] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %188 = llvm.insertvalue %9, %187[14] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %189 = llvm.insertvalue %8, %188[15] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    %190 = llvm.insertvalue %148, %189[16] : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;\n    llvm.store %190, %172 : !llvm.struct&lt;(ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr)&gt;, !llvm.ptr\n    llvm.call @iree_uk_mmt4d(%172) : (!llvm.ptr) -&gt; ()\n    %191 = llvm.add %123, %114  : i64\n    llvm.br ^bb2(%191 : i64)\n  ^bb4:  // pred: ^bb2\n    %192 = llvm.add %121, %120  : i64\n    llvm.br ^bb1(%192 : i64)\n  ^bb5:  // pred: ^bb1\n    llvm.return %2 : i32\n  }\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#intermediate-file-codegenbc-disassembled-to-codegenll","title":"Intermediate file: <code>...codegen.bc</code>, disassembled to <code>...codegen.ll</code>","text":"<pre><code>define internal i32 @matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32(ptr noalias nonnull align 16 %0, ptr noalias nonnull align 16 %1, ptr noalias nonnull align 16 %2) #0 !dbg !90 {\n  %4 = load %iree_hal_executable_dispatch_state_v0_t.7, ptr %1, align 8, !dbg !91\n  %5 = extractvalue %iree_hal_executable_dispatch_state_v0_t.7 %4, 9, !dbg !91\n  %6 = load i32, ptr %5, align 4, !dbg !91\n  %7 = getelementptr i32, ptr %5, i32 1, !dbg !91\n  %8 = load i32, ptr %7, align 4, !dbg !91\n  %9 = getelementptr i32, ptr %5, i32 2, !dbg !91\n  %10 = load i32, ptr %9, align 4, !dbg !91\n  %11 = getelementptr i32, ptr %5, i32 3, !dbg !91\n  %12 = load i32, ptr %11, align 4, !dbg !91\n  %13 = getelementptr i32, ptr %5, i32 4, !dbg !91\n  %14 = load i32, ptr %13, align 4, !dbg !91\n  %15 = getelementptr i32, ptr %5, i32 5, !dbg !91\n  %16 = load i32, ptr %15, align 4, !dbg !91\n  %17 = getelementptr i32, ptr %5, i32 6, !dbg !91\n  %18 = load i32, ptr %17, align 4, !dbg !91\n  %19 = getelementptr i32, ptr %5, i32 7, !dbg !91\n  %20 = load i32, ptr %19, align 4, !dbg !91\n  %21 = getelementptr i32, ptr %5, i32 8, !dbg !91\n  %22 = load i32, ptr %21, align 4, !dbg !91\n  %23 = getelementptr i32, ptr %5, i32 9, !dbg !91\n  %24 = load i32, ptr %23, align 4, !dbg !91\n  %25 = getelementptr i32, ptr %5, i32 10, !dbg !91\n  %26 = load i32, ptr %25, align 4, !dbg !91\n  %27 = getelementptr i32, ptr %5, i32 11, !dbg !91\n  %28 = load i32, ptr %27, align 4, !dbg !91\n  %29 = getelementptr i32, ptr %5, i32 14, !dbg !91\n  %30 = load i32, ptr %29, align 4, !dbg !91\n  %31 = getelementptr i32, ptr %5, i32 15, !dbg !91\n  %32 = load i32, ptr %31, align 4, !dbg !91\n  %33 = zext i32 %6 to i64, !dbg !91\n  %34 = zext i32 %8 to i64, !dbg !91\n  %35 = shl i64 %34, 32, !dbg !91\n  %36 = or i64 %33, %35, !dbg !91\n  %37 = zext i32 %10 to i64, !dbg !91\n  %38 = zext i32 %12 to i64, !dbg !91\n  %39 = shl i64 %38, 32, !dbg !91\n  %40 = or i64 %37, %39, !dbg !91\n  %41 = zext i32 %14 to i64, !dbg !91\n  %42 = zext i32 %16 to i64, !dbg !91\n  %43 = shl i64 %42, 32, !dbg !91\n  %44 = or i64 %41, %43, !dbg !91\n  %45 = zext i32 %18 to i64, !dbg !91\n  %46 = zext i32 %20 to i64, !dbg !91\n  %47 = shl i64 %46, 32, !dbg !91\n  %48 = or i64 %45, %47, !dbg !91\n  %49 = zext i32 %22 to i64, !dbg !91\n  %50 = zext i32 %24 to i64, !dbg !91\n  %51 = shl i64 %50, 32, !dbg !91\n  %52 = or i64 %49, %51, !dbg !91\n  %53 = zext i32 %26 to i64, !dbg !91\n  %54 = zext i32 %28 to i64, !dbg !91\n  %55 = shl i64 %54, 32, !dbg !91\n  %56 = or i64 %53, %55, !dbg !91\n  %57 = zext i32 %30 to i64, !dbg !91\n  %58 = zext i32 %32 to i64, !dbg !91\n  %59 = shl i64 %58, 32, !dbg !91\n  %60 = or i64 %57, %59, !dbg !91\n  %61 = mul i64 %48, 16, !dbg !91\n  %62 = extractvalue %iree_hal_executable_dispatch_state_v0_t.7 %4, 10, !dbg !91\n  %63 = load ptr, ptr %62, align 8, !dbg !91\n  %64 = mul i64 %56, 16, !dbg !91\n  %65 = mul i64 %60, 256, !dbg !91\n  %66 = getelementptr ptr, ptr %62, i32 1, !dbg !91\n  %67 = load ptr, ptr %66, align 8, !dbg !91\n  %68 = load %iree_hal_executable_workgroup_state_v0_t.8, ptr %2, align 8, !dbg !91\n  %69 = extractvalue %iree_hal_executable_workgroup_state_v0_t.8 %68, 0, !dbg !91\n  %70 = zext i32 %69 to i64, !dbg !91\n  %71 = extractvalue %iree_hal_executable_dispatch_state_v0_t.7 %4, 4, !dbg !91\n  %72 = zext i32 %71 to i64, !dbg !91\n  %73 = extractvalue %iree_hal_executable_workgroup_state_v0_t.8 %68, 1, !dbg !91\n  %74 = zext i32 %73 to i64, !dbg !91\n  %75 = extractvalue %iree_hal_executable_dispatch_state_v0_t.7 %4, 5, !dbg !91\n  %76 = zext i32 %75 to i64, !dbg !91\n  br label %77, !dbg !91\n\n77:                                               ; preds = %147, %3\n  %78 = phi i64 [ %148, %147 ], [ %74, %3 ]\n  %79 = icmp slt i64 %78, %44, !dbg !91\n  br i1 %79, label %80, label %149, !dbg !91\n\n80:                                               ; preds = %83, %77\n  %81 = phi i64 [ %146, %83 ], [ %70, %77 ]\n  %82 = icmp slt i64 %81, %52, !dbg !91\n  br i1 %82, label %83, label %147, !dbg !91\n\n83:                                               ; preds = %80\n  %84 = mul i64 %78, %61, !dbg !91\n  %85 = icmp slt i64 %36, 0, !dbg !91\n  %86 = sub i64 -1, %36, !dbg !91\n  %87 = select i1 %85, i64 %86, i64 %36, !dbg !91\n  %88 = sdiv i64 %87, 4, !dbg !91\n  %89 = sub i64 -1, %88, !dbg !91\n  %90 = select i1 %85, i64 %89, i64 %88, !dbg !91\n  %91 = mul i64 %81, %64, !dbg !91\n  %92 = add i64 %90, %91, !dbg !91\n  %93 = mul i64 %81, 256, !dbg !91\n  %94 = icmp slt i64 %40, 0, !dbg !91\n  %95 = sub i64 -1, %40, !dbg !91\n  %96 = select i1 %94, i64 %95, i64 %40, !dbg !91\n  %97 = sdiv i64 %96, 4, !dbg !91\n  %98 = sub i64 -1, %97, !dbg !91\n  %99 = select i1 %94, i64 %98, i64 %97, !dbg !91\n  %100 = add i64 %93, %99, !dbg !91\n  %101 = mul i64 %78, %65, !dbg !91\n  %102 = add i64 %100, %101, !dbg !91\n  %103 = getelementptr inbounds ptr, ptr %0, i32 4, !dbg !91\n  %104 = alloca i64, i64 8, align 8, !dbg !91\n  %105 = load i64, ptr %103, align 4, !dbg !91\n  %106 = or i64 %105, 4293970975, !dbg !91\n  store i64 %106, ptr %104, align 4, !dbg !91\n  %107 = getelementptr inbounds i64, ptr %103, i32 1, !dbg !91\n  %108 = load i64, ptr %107, align 4, !dbg !91\n  %109 = getelementptr inbounds i64, ptr %104, i32 1, !dbg !91\n  store i64 %108, ptr %109, align 4, !dbg !91\n  %110 = getelementptr inbounds i64, ptr %103, i32 2, !dbg !91\n  %111 = load i64, ptr %110, align 4, !dbg !91\n  %112 = getelementptr inbounds i64, ptr %104, i32 2, !dbg !91\n  store i64 %111, ptr %112, align 4, !dbg !91\n  %113 = getelementptr inbounds i64, ptr %103, i32 3, !dbg !91\n  %114 = load i64, ptr %113, align 4, !dbg !91\n  %115 = getelementptr inbounds i64, ptr %104, i32 3, !dbg !91\n  store i64 %114, ptr %115, align 4, !dbg !91\n  %116 = getelementptr inbounds i64, ptr %103, i32 4, !dbg !91\n  %117 = load i64, ptr %116, align 4, !dbg !91\n  %118 = getelementptr inbounds i64, ptr %104, i32 4, !dbg !91\n  store i64 %117, ptr %118, align 4, !dbg !91\n  %119 = getelementptr inbounds i64, ptr %103, i32 5, !dbg !91\n  %120 = load i64, ptr %119, align 4, !dbg !91\n  %121 = getelementptr inbounds i64, ptr %104, i32 5, !dbg !91\n  store i64 %120, ptr %121, align 4, !dbg !91\n  %122 = getelementptr inbounds i64, ptr %103, i32 6, !dbg !91\n  %123 = load i64, ptr %122, align 4, !dbg !91\n  %124 = getelementptr inbounds i64, ptr %104, i32 6, !dbg !91\n  store i64 %123, ptr %124, align 4, !dbg !91\n  %125 = getelementptr inbounds i64, ptr %103, i32 7, !dbg !91\n  %126 = load i64, ptr %125, align 4, !dbg !91\n  %127 = getelementptr inbounds i64, ptr %104, i32 7, !dbg !91\n  store i64 %126, ptr %127, align 4, !dbg !91\n  %128 = alloca { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr }, i64 1, align 8, !dbg !91\n  %129 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } undef, ptr %63, 0, !dbg !91\n  %130 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %129, i64 %84, 1, !dbg !91\n  %131 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %130, i64 %61, 2, !dbg !91\n  %132 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %131, ptr %63, 3, !dbg !91\n  %133 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %132, i64 %92, 4, !dbg !91\n  %134 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %133, i64 %64, 5, !dbg !91\n  %135 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %134, ptr %67, 6, !dbg !91\n  %136 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %135, i64 %102, 7, !dbg !91\n  %137 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %136, i64 %65, 8, !dbg !91\n  %138 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %137, i64 1, 9, !dbg !91\n  %139 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %138, i64 1, 10, !dbg !91\n  %140 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %139, i64 %48, 11, !dbg !91\n  %141 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %140, i32 16, 12, !dbg !91\n  %142 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %141, i32 16, 13, !dbg !91\n  %143 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %142, i32 1, 14, !dbg !91\n  %144 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %143, i32 1281, 15, !dbg !91\n  %145 = insertvalue { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %144, ptr %104, 16, !dbg !91\n  store { ptr, i64, i64, ptr, i64, i64, ptr, i64, i64, i64, i64, i64, i32, i32, i32, i32, ptr } %145, ptr %128, align 8, !dbg !91\n  call void @iree_uk_mmt4d(ptr %128), !dbg !91\n  %146 = add i64 %81, %72, !dbg !91\n  br label %80, !dbg !91\n\n147:                                              ; preds = %80\n  %148 = add i64 %78, %76, !dbg !91\n  br label %77, !dbg !91\n\n149:                                              ; preds = %77\n  ret i32 0, !dbg !91\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ukernel-bitcode-entry-point","title":"Ukernel bitcode: entry point","text":"<pre><code>; Function Attrs: nounwind\ndefine dso_local noundef i32 @iree_uk_mmt4d(ptr noundef %0) local_unnamed_addr #10 {\n  %2 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 9\n  %3 = load i64, ptr %2, align 8, !tbaa !1001\n  %4 = icmp eq i64 %3, 0\n  br i1 %4, label %133, label %5\n\n5:                                                ; preds = %1\n  %6 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 10\n  %7 = load i64, ptr %6, align 8, !tbaa !1002\n  %8 = icmp eq i64 %7, 0\n  br i1 %8, label %133, label %9\n\n9:                                                ; preds = %5\n  %10 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 11\n  %11 = load i64, ptr %10, align 8, !tbaa !19\n  %12 = icmp eq i64 %11, 0\n  br i1 %12, label %13, label %18\n\n13:                                               ; preds = %9\n  %14 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 15\n  %15 = load i32, ptr %14, align 4, !tbaa !9\n  %16 = and i32 %15, 256\n  %17 = icmp eq i32 %16, 0\n  br i1 %17, label %18, label %133\n\n18:                                               ; preds = %13, %9\n  %19 = tail call ptr @iree_uk_mmt4d_select_tile_func(ptr noundef nonnull %0) #14\n  %20 = load i64, ptr %2, align 8, !tbaa !1001\n  %21 = trunc i64 %20 to i32\n  %22 = load i64, ptr %6, align 8, !tbaa !1002\n  %23 = trunc i64 %22 to i32\n  %24 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 15\n  %25 = load i32, ptr %24, align 4, !tbaa !9\n  %26 = zext i32 %25 to i64\n  %27 = shl i64 %26, 56\n  %28 = add i64 %27, -72057594037927936\n  %29 = ashr exact i64 %28, 56\n  %30 = getelementptr inbounds [9 x i32], ptr @switch.table.iree_uk_mmt4d, i64 0, i64 %29\n  %31 = load i32, ptr %30, align 4\n  %32 = lshr i32 %31, 8\n  %33 = and i32 %31, 7\n  %34 = and i32 %32, 7\n  %35 = and i32 %31, 327680\n  %36 = add nsw i32 %35, -196608\n  %37 = lshr exact i32 %36, 16\n  %38 = zext nneg i32 %37 to i64\n  %39 = zext nneg i32 %33 to i64\n  %40 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 3\n  %41 = load ptr, ptr %40, align 8, !tbaa !1003\n  %42 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 4\n  %43 = load i64, ptr %42, align 8, !tbaa !1004\n  %44 = zext nneg i32 %34 to i64\n  %45 = shl i64 %43, %44\n  %46 = sdiv i64 %45, 8\n  %47 = getelementptr inbounds i8, ptr %41, i64 %46\n  %48 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 2\n  %49 = load i64, ptr %48, align 8, !tbaa !1005\n  %50 = shl i64 %49, %39\n  %51 = sdiv i64 %50, 8\n  %52 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 5\n  %53 = load i64, ptr %52, align 8, !tbaa !1006\n  %54 = shl i64 %53, %44\n  %55 = sdiv i64 %54, 8\n  %56 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 8\n  %57 = load i64, ptr %56, align 8, !tbaa !1007\n  %58 = shl i64 %57, %38\n  %59 = icmp sgt i32 %21, 0\n  br i1 %59, label %60, label %133\n\n60:                                               ; preds = %18\n  %61 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 13\n  %62 = load i32, ptr %61, align 4, !tbaa !996\n  %63 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 12\n  %64 = load i32, ptr %63, align 8, !tbaa !1000\n  %65 = shl i32 %62, 16\n  %66 = ashr exact i32 %65, 16\n  %67 = shl i32 %64, 16\n  %68 = ashr exact i32 %67, 16\n  %69 = mul nsw i32 %66, %68\n  %70 = shl i32 %69, %37\n  %71 = load ptr, ptr %0, align 8, !tbaa !1008\n  %72 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 1\n  %73 = load i64, ptr %72, align 8, !tbaa !1009\n  %74 = shl i64 %73, %39\n  %75 = sdiv i64 %74, 8\n  %76 = getelementptr inbounds i8, ptr %71, i64 %75\n  %77 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 6\n  %78 = load ptr, ptr %77, align 8, !tbaa !1010\n  %79 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %0, i64 0, i32 7\n  %80 = load i64, ptr %79, align 8, !tbaa !1011\n  %81 = shl i64 %80, %38\n  %82 = getelementptr inbounds i8, ptr %78, i64 %81\n  %83 = icmp sgt i32 %23, 0\n  %84 = sext i32 %70 to i64\n  br i1 %83, label %90, label %85\n\n85:                                               ; preds = %60\n  %86 = and i32 %21, 3\n  %87 = icmp ult i32 %21, 4\n  br i1 %87, label %121, label %88\n\n88:                                               ; preds = %85\n  %89 = and i32 %21, 2147483644\n  br label %107\n\n90:                                               ; preds = %60, %102\n  %91 = phi i32 [ %105, %102 ], [ 0, %60 ]\n  %92 = phi ptr [ %103, %102 ], [ %82, %60 ]\n  %93 = phi ptr [ %104, %102 ], [ %76, %60 ]\n  tail call void @llvm.prefetch.p0(ptr %92, i32 1, i32 1, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %93, i32 0, i32 3, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %47, i32 0, i32 3, i32 1)\n  br label %94\n\n94:                                               ; preds = %94, %90\n  %95 = phi i32 [ 0, %90 ], [ %100, %94 ]\n  %96 = phi ptr [ %47, %90 ], [ %99, %94 ]\n  %97 = phi ptr [ %92, %90 ], [ %98, %94 ]\n  tail call void %19(ptr noundef %97, ptr noundef %93, ptr noundef %96, ptr noundef nonnull %0) #14\n  %98 = getelementptr inbounds i8, ptr %97, i64 %84\n  %99 = getelementptr inbounds i8, ptr %96, i64 %55\n  %100 = add nuw nsw i32 %95, 1\n  %101 = icmp eq i32 %100, %23\n  br i1 %101, label %102, label %94, !llvm.loop !1012\n\n102:                                              ; preds = %94\n  %103 = getelementptr inbounds i8, ptr %92, i64 %58\n  %104 = getelementptr inbounds i8, ptr %93, i64 %51\n  %105 = add nuw nsw i32 %91, 1\n  %106 = icmp eq i32 %105, %21\n  br i1 %106, label %133, label %90, !llvm.loop !1013\n\n107:                                              ; preds = %107, %88\n  %108 = phi ptr [ %82, %88 ], [ %117, %107 ]\n  %109 = phi ptr [ %76, %88 ], [ %118, %107 ]\n  %110 = phi i32 [ 0, %88 ], [ %119, %107 ]\n  tail call void @llvm.prefetch.p0(ptr %108, i32 1, i32 1, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %109, i32 0, i32 3, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %47, i32 0, i32 3, i32 1)\n  %111 = getelementptr inbounds i8, ptr %108, i64 %58\n  %112 = getelementptr inbounds i8, ptr %109, i64 %51\n  tail call void @llvm.prefetch.p0(ptr %111, i32 1, i32 1, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %112, i32 0, i32 3, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %47, i32 0, i32 3, i32 1)\n  %113 = getelementptr inbounds i8, ptr %111, i64 %58\n  %114 = getelementptr inbounds i8, ptr %112, i64 %51\n  tail call void @llvm.prefetch.p0(ptr %113, i32 1, i32 1, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %114, i32 0, i32 3, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %47, i32 0, i32 3, i32 1)\n  %115 = getelementptr inbounds i8, ptr %113, i64 %58\n  %116 = getelementptr inbounds i8, ptr %114, i64 %51\n  tail call void @llvm.prefetch.p0(ptr %115, i32 1, i32 1, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %116, i32 0, i32 3, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %47, i32 0, i32 3, i32 1)\n  %117 = getelementptr inbounds i8, ptr %115, i64 %58\n  %118 = getelementptr inbounds i8, ptr %116, i64 %51\n  %119 = add i32 %110, 4\n  %120 = icmp eq i32 %119, %89\n  br i1 %120, label %121, label %107, !llvm.loop !1013\n\n121:                                              ; preds = %107, %85\n  %122 = phi ptr [ %82, %85 ], [ %117, %107 ]\n  %123 = phi ptr [ %76, %85 ], [ %118, %107 ]\n  %124 = icmp eq i32 %86, 0\n  br i1 %124, label %133, label %125\n\n125:                                              ; preds = %121, %125\n  %126 = phi ptr [ %129, %125 ], [ %122, %121 ]\n  %127 = phi ptr [ %130, %125 ], [ %123, %121 ]\n  %128 = phi i32 [ %131, %125 ], [ 0, %121 ]\n  tail call void @llvm.prefetch.p0(ptr %126, i32 1, i32 1, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %127, i32 0, i32 3, i32 1)\n  tail call void @llvm.prefetch.p0(ptr %47, i32 0, i32 3, i32 1)\n  %129 = getelementptr inbounds i8, ptr %126, i64 %58\n  %130 = getelementptr inbounds i8, ptr %127, i64 %51\n  %131 = add i32 %128, 1\n  %132 = icmp eq i32 %131, %86\n  br i1 %132, label %133, label %125, !llvm.loop !1014\n\n133:                                              ; preds = %121, %125, %102, %1, %5, %13, %18\n  ret i32 0\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#ukernel-bitcode-tile-function","title":"Ukernel bitcode: tile function","text":"<pre><code>; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: readwrite)\ndefine dso_local void @iree_uk_mmt4d_tile_f32f32f32_16x16x1_x86_64_avx512_base(ptr noalias nocapture noundef %0, ptr noalias nocapture noundef readonly %1, ptr noalias nocapture noundef readonly %2, ptr nocapture noundef readonly %3) #4 {\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !367)\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !370)\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !372)\n  tail call void @llvm.prefetch.p0(ptr %1, i32 0, i32 3, i32 1), !noalias !374\n  tail call void @llvm.prefetch.p0(ptr %2, i32 0, i32 3, i32 1), !noalias !375\n  %5 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %3, i64 0, i32 15\n  %6 = load i32, ptr %5, align 4, !tbaa !9, !noalias !376\n  %7 = and i32 %6, 256\n  %8 = icmp eq i32 %7, 0\n  br i1 %8, label %41, label %9\n\n9:                                                ; preds = %4\n  %10 = load &lt;16 x float&gt;, ptr %0, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %11 = getelementptr inbounds float, ptr %0, i64 16\n  %12 = load &lt;16 x float&gt;, ptr %11, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %13 = getelementptr inbounds float, ptr %0, i64 32\n  %14 = load &lt;16 x float&gt;, ptr %13, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %15 = getelementptr inbounds float, ptr %0, i64 48\n  %16 = load &lt;16 x float&gt;, ptr %15, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %17 = getelementptr inbounds float, ptr %0, i64 64\n  %18 = load &lt;16 x float&gt;, ptr %17, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %19 = getelementptr inbounds float, ptr %0, i64 80\n  %20 = load &lt;16 x float&gt;, ptr %19, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %21 = getelementptr inbounds float, ptr %0, i64 96\n  %22 = load &lt;16 x float&gt;, ptr %21, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %23 = getelementptr inbounds float, ptr %0, i64 112\n  %24 = load &lt;16 x float&gt;, ptr %23, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %25 = getelementptr inbounds float, ptr %0, i64 128\n  %26 = load &lt;16 x float&gt;, ptr %25, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %27 = getelementptr inbounds float, ptr %0, i64 144\n  %28 = load &lt;16 x float&gt;, ptr %27, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %29 = getelementptr inbounds float, ptr %0, i64 160\n  %30 = load &lt;16 x float&gt;, ptr %29, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %31 = getelementptr inbounds float, ptr %0, i64 176\n  %32 = load &lt;16 x float&gt;, ptr %31, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %33 = getelementptr inbounds float, ptr %0, i64 192\n  %34 = load &lt;16 x float&gt;, ptr %33, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %35 = getelementptr inbounds float, ptr %0, i64 208\n  %36 = load &lt;16 x float&gt;, ptr %35, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %37 = getelementptr inbounds float, ptr %0, i64 224\n  %38 = load &lt;16 x float&gt;, ptr %37, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %39 = getelementptr inbounds float, ptr %0, i64 240\n  %40 = load &lt;16 x float&gt;, ptr %39, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  br label %41\n\n41:                                               ; preds = %4, %9\n  %42 = phi &lt;16 x float&gt; [ %40, %9 ], [ zeroinitializer, %4 ]\n  %43 = phi &lt;16 x float&gt; [ %38, %9 ], [ zeroinitializer, %4 ]\n  %44 = phi &lt;16 x float&gt; [ %36, %9 ], [ zeroinitializer, %4 ]\n  %45 = phi &lt;16 x float&gt; [ %34, %9 ], [ zeroinitializer, %4 ]\n  %46 = phi &lt;16 x float&gt; [ %32, %9 ], [ zeroinitializer, %4 ]\n  %47 = phi &lt;16 x float&gt; [ %30, %9 ], [ zeroinitializer, %4 ]\n  %48 = phi &lt;16 x float&gt; [ %28, %9 ], [ zeroinitializer, %4 ]\n  %49 = phi &lt;16 x float&gt; [ %26, %9 ], [ zeroinitializer, %4 ]\n  %50 = phi &lt;16 x float&gt; [ %24, %9 ], [ zeroinitializer, %4 ]\n  %51 = phi &lt;16 x float&gt; [ %22, %9 ], [ zeroinitializer, %4 ]\n  %52 = phi &lt;16 x float&gt; [ %20, %9 ], [ zeroinitializer, %4 ]\n  %53 = phi &lt;16 x float&gt; [ %18, %9 ], [ zeroinitializer, %4 ]\n  %54 = phi &lt;16 x float&gt; [ %16, %9 ], [ zeroinitializer, %4 ]\n  %55 = phi &lt;16 x float&gt; [ %14, %9 ], [ zeroinitializer, %4 ]\n  %56 = phi &lt;16 x float&gt; [ %12, %9 ], [ zeroinitializer, %4 ]\n  %57 = phi &lt;16 x float&gt; [ %10, %9 ], [ zeroinitializer, %4 ]\n  %58 = getelementptr inbounds %struct.iree_uk_mmt4d_params_t, ptr %3, i64 0, i32 11\n  %59 = load i64, ptr %58, align 8, !tbaa !19, !noalias !376\n  %60 = icmp sgt i64 %59, 0\n  br i1 %60, label %61, label %167\n\n61:                                               ; preds = %41, %61\n  %62 = phi &lt;16 x float&gt; [ %161, %61 ], [ %42, %41 ]\n  %63 = phi &lt;16 x float&gt; [ %156, %61 ], [ %43, %41 ]\n  %64 = phi &lt;16 x float&gt; [ %151, %61 ], [ %44, %41 ]\n  %65 = phi &lt;16 x float&gt; [ %146, %61 ], [ %45, %41 ]\n  %66 = phi &lt;16 x float&gt; [ %141, %61 ], [ %46, %41 ]\n  %67 = phi &lt;16 x float&gt; [ %136, %61 ], [ %47, %41 ]\n  %68 = phi &lt;16 x float&gt; [ %131, %61 ], [ %48, %41 ]\n  %69 = phi &lt;16 x float&gt; [ %126, %61 ], [ %49, %41 ]\n  %70 = phi &lt;16 x float&gt; [ %121, %61 ], [ %50, %41 ]\n  %71 = phi &lt;16 x float&gt; [ %116, %61 ], [ %51, %41 ]\n  %72 = phi &lt;16 x float&gt; [ %111, %61 ], [ %52, %41 ]\n  %73 = phi &lt;16 x float&gt; [ %106, %61 ], [ %53, %41 ]\n  %74 = phi &lt;16 x float&gt; [ %101, %61 ], [ %54, %41 ]\n  %75 = phi &lt;16 x float&gt; [ %96, %61 ], [ %55, %41 ]\n  %76 = phi &lt;16 x float&gt; [ %91, %61 ], [ %56, %41 ]\n  %77 = phi &lt;16 x float&gt; [ %86, %61 ], [ %57, %41 ]\n  %78 = phi i64 [ %165, %61 ], [ 0, %41 ]\n  %79 = phi ptr [ %164, %61 ], [ %1, %41 ]\n  %80 = phi ptr [ %162, %61 ], [ %2, %41 ]\n  %81 = load &lt;16 x float&gt;, ptr %80, align 1, !tbaa !17, !alias.scope !372, !noalias !375\n  %82 = getelementptr inbounds float, ptr %80, i64 128\n  tail call void @llvm.prefetch.p0(ptr nonnull %82, i32 0, i32 3, i32 1), !noalias !375\n  %83 = load float, ptr %79, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %84 = insertelement &lt;16 x float&gt; poison, float %83, i64 0\n  %85 = shufflevector &lt;16 x float&gt; %84, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %86 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %85, &lt;16 x float&gt; %81, &lt;16 x float&gt; %77)\n  %87 = getelementptr inbounds float, ptr %79, i64 1\n  %88 = load float, ptr %87, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %89 = insertelement &lt;16 x float&gt; poison, float %88, i64 0\n  %90 = shufflevector &lt;16 x float&gt; %89, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %91 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %90, &lt;16 x float&gt; %81, &lt;16 x float&gt; %76)\n  %92 = getelementptr inbounds float, ptr %79, i64 2\n  %93 = load float, ptr %92, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %94 = insertelement &lt;16 x float&gt; poison, float %93, i64 0\n  %95 = shufflevector &lt;16 x float&gt; %94, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %96 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %95, &lt;16 x float&gt; %81, &lt;16 x float&gt; %75)\n  %97 = getelementptr inbounds float, ptr %79, i64 3\n  %98 = load float, ptr %97, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %99 = insertelement &lt;16 x float&gt; poison, float %98, i64 0\n  %100 = shufflevector &lt;16 x float&gt; %99, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %101 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %100, &lt;16 x float&gt; %81, &lt;16 x float&gt; %74)\n  %102 = getelementptr inbounds float, ptr %79, i64 4\n  %103 = load float, ptr %102, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %104 = insertelement &lt;16 x float&gt; poison, float %103, i64 0\n  %105 = shufflevector &lt;16 x float&gt; %104, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %106 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %105, &lt;16 x float&gt; %81, &lt;16 x float&gt; %73)\n  %107 = getelementptr inbounds float, ptr %79, i64 5\n  %108 = load float, ptr %107, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %109 = insertelement &lt;16 x float&gt; poison, float %108, i64 0\n  %110 = shufflevector &lt;16 x float&gt; %109, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %111 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %110, &lt;16 x float&gt; %81, &lt;16 x float&gt; %72)\n  %112 = getelementptr inbounds float, ptr %79, i64 6\n  %113 = load float, ptr %112, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %114 = insertelement &lt;16 x float&gt; poison, float %113, i64 0\n  %115 = shufflevector &lt;16 x float&gt; %114, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %116 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %115, &lt;16 x float&gt; %81, &lt;16 x float&gt; %71)\n  %117 = getelementptr inbounds float, ptr %79, i64 7\n  %118 = load float, ptr %117, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %119 = insertelement &lt;16 x float&gt; poison, float %118, i64 0\n  %120 = shufflevector &lt;16 x float&gt; %119, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %121 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %120, &lt;16 x float&gt; %81, &lt;16 x float&gt; %70)\n  %122 = getelementptr inbounds float, ptr %79, i64 8\n  %123 = load float, ptr %122, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %124 = insertelement &lt;16 x float&gt; poison, float %123, i64 0\n  %125 = shufflevector &lt;16 x float&gt; %124, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %126 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %125, &lt;16 x float&gt; %81, &lt;16 x float&gt; %69)\n  %127 = getelementptr inbounds float, ptr %79, i64 9\n  %128 = load float, ptr %127, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %129 = insertelement &lt;16 x float&gt; poison, float %128, i64 0\n  %130 = shufflevector &lt;16 x float&gt; %129, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %131 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %130, &lt;16 x float&gt; %81, &lt;16 x float&gt; %68)\n  %132 = getelementptr inbounds float, ptr %79, i64 10\n  %133 = load float, ptr %132, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %134 = insertelement &lt;16 x float&gt; poison, float %133, i64 0\n  %135 = shufflevector &lt;16 x float&gt; %134, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %136 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %135, &lt;16 x float&gt; %81, &lt;16 x float&gt; %67)\n  %137 = getelementptr inbounds float, ptr %79, i64 11\n  %138 = load float, ptr %137, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %139 = insertelement &lt;16 x float&gt; poison, float %138, i64 0\n  %140 = shufflevector &lt;16 x float&gt; %139, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %141 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %140, &lt;16 x float&gt; %81, &lt;16 x float&gt; %66)\n  %142 = getelementptr inbounds float, ptr %79, i64 12\n  %143 = load float, ptr %142, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %144 = insertelement &lt;16 x float&gt; poison, float %143, i64 0\n  %145 = shufflevector &lt;16 x float&gt; %144, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %146 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %145, &lt;16 x float&gt; %81, &lt;16 x float&gt; %65)\n  %147 = getelementptr inbounds float, ptr %79, i64 13\n  %148 = load float, ptr %147, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %149 = insertelement &lt;16 x float&gt; poison, float %148, i64 0\n  %150 = shufflevector &lt;16 x float&gt; %149, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %151 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %150, &lt;16 x float&gt; %81, &lt;16 x float&gt; %64)\n  %152 = getelementptr inbounds float, ptr %79, i64 14\n  %153 = load float, ptr %152, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %154 = insertelement &lt;16 x float&gt; poison, float %153, i64 0\n  %155 = shufflevector &lt;16 x float&gt; %154, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %156 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %155, &lt;16 x float&gt; %81, &lt;16 x float&gt; %63)\n  %157 = getelementptr inbounds float, ptr %79, i64 15\n  %158 = load float, ptr %157, align 4, !tbaa !331, !alias.scope !370, !noalias !374\n  %159 = insertelement &lt;16 x float&gt; poison, float %158, i64 0\n  %160 = shufflevector &lt;16 x float&gt; %159, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer\n  %161 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %160, &lt;16 x float&gt; %81, &lt;16 x float&gt; %62)\n  %162 = getelementptr inbounds float, ptr %80, i64 16\n  %163 = getelementptr inbounds float, ptr %79, i64 128\n  tail call void @llvm.prefetch.p0(ptr nonnull %163, i32 0, i32 3, i32 1), !noalias !374\n  %164 = getelementptr inbounds float, ptr %79, i64 16\n  %165 = add nuw nsw i64 %78, 1\n  %166 = icmp eq i64 %165, %59\n  br i1 %166, label %167, label %61, !llvm.loop !333\n\n167:                                              ; preds = %61, %41\n  %168 = phi &lt;16 x float&gt; [ %42, %41 ], [ %161, %61 ]\n  %169 = phi &lt;16 x float&gt; [ %43, %41 ], [ %156, %61 ]\n  %170 = phi &lt;16 x float&gt; [ %44, %41 ], [ %151, %61 ]\n  %171 = phi &lt;16 x float&gt; [ %45, %41 ], [ %146, %61 ]\n  %172 = phi &lt;16 x float&gt; [ %46, %41 ], [ %141, %61 ]\n  %173 = phi &lt;16 x float&gt; [ %47, %41 ], [ %136, %61 ]\n  %174 = phi &lt;16 x float&gt; [ %48, %41 ], [ %131, %61 ]\n  %175 = phi &lt;16 x float&gt; [ %49, %41 ], [ %126, %61 ]\n  %176 = phi &lt;16 x float&gt; [ %50, %41 ], [ %121, %61 ]\n  %177 = phi &lt;16 x float&gt; [ %51, %41 ], [ %116, %61 ]\n  %178 = phi &lt;16 x float&gt; [ %52, %41 ], [ %111, %61 ]\n  %179 = phi &lt;16 x float&gt; [ %53, %41 ], [ %106, %61 ]\n  %180 = phi &lt;16 x float&gt; [ %54, %41 ], [ %101, %61 ]\n  %181 = phi &lt;16 x float&gt; [ %55, %41 ], [ %96, %61 ]\n  %182 = phi &lt;16 x float&gt; [ %56, %41 ], [ %91, %61 ]\n  %183 = phi &lt;16 x float&gt; [ %57, %41 ], [ %86, %61 ]\n  store &lt;16 x float&gt; %183, ptr %0, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %184 = getelementptr inbounds float, ptr %0, i64 16\n  store &lt;16 x float&gt; %182, ptr %184, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %185 = getelementptr inbounds float, ptr %0, i64 32\n  store &lt;16 x float&gt; %181, ptr %185, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %186 = getelementptr inbounds float, ptr %0, i64 48\n  store &lt;16 x float&gt; %180, ptr %186, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %187 = getelementptr inbounds float, ptr %0, i64 64\n  store &lt;16 x float&gt; %179, ptr %187, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %188 = getelementptr inbounds float, ptr %0, i64 80\n  store &lt;16 x float&gt; %178, ptr %188, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %189 = getelementptr inbounds float, ptr %0, i64 96\n  store &lt;16 x float&gt; %177, ptr %189, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %190 = getelementptr inbounds float, ptr %0, i64 112\n  store &lt;16 x float&gt; %176, ptr %190, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %191 = getelementptr inbounds float, ptr %0, i64 128\n  store &lt;16 x float&gt; %175, ptr %191, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %192 = getelementptr inbounds float, ptr %0, i64 144\n  store &lt;16 x float&gt; %174, ptr %192, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %193 = getelementptr inbounds float, ptr %0, i64 160\n  store &lt;16 x float&gt; %173, ptr %193, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %194 = getelementptr inbounds float, ptr %0, i64 176\n  store &lt;16 x float&gt; %172, ptr %194, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %195 = getelementptr inbounds float, ptr %0, i64 192\n  store &lt;16 x float&gt; %171, ptr %195, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %196 = getelementptr inbounds float, ptr %0, i64 208\n  store &lt;16 x float&gt; %170, ptr %196, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %197 = getelementptr inbounds float, ptr %0, i64 224\n  store &lt;16 x float&gt; %169, ptr %197, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  %198 = getelementptr inbounds float, ptr %0, i64 240\n  store &lt;16 x float&gt; %168, ptr %198, align 1, !tbaa !17, !alias.scope !367, !noalias !377\n  ret void\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#intermediate-file-optimizedbc-disassembled-to-optimizedll","title":"Intermediate file: <code>...optimized.bc</code>, disassembled to <code>...optimized.ll</code>","text":"<pre><code>; Function Attrs: nofree norecurse nosync nounwind\ndefine internal noundef i32 @matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32(ptr noalias nocapture nonnull readonly align 16 %0, ptr noalias nocapture nonnull readonly align 16 %1, ptr noalias nocapture nonnull readonly align 16 %2) #1 !dbg !90 {\n  %.elt7 = getelementptr inbounds %iree_hal_executable_dispatch_state_v0_t.19, ptr %1, i64 0, i32 4, !dbg !91\n  %.unpack8 = load i32, ptr %.elt7, align 4, !dbg !91\n  %.elt9 = getelementptr inbounds %iree_hal_executable_dispatch_state_v0_t.19, ptr %1, i64 0, i32 5, !dbg !91\n  %.unpack10 = load i32, ptr %.elt9, align 16, !dbg !91\n  %.elt17 = getelementptr inbounds %iree_hal_executable_dispatch_state_v0_t.19, ptr %1, i64 0, i32 9, !dbg !91\n  %.unpack18 = load ptr, ptr %.elt17, align 8, !dbg !91\n  %.elt19 = getelementptr inbounds %iree_hal_executable_dispatch_state_v0_t.19, ptr %1, i64 0, i32 10, !dbg !91\n  %.unpack20 = load ptr, ptr %.elt19, align 16, !dbg !91\n  %4 = getelementptr i32, ptr %.unpack18, i64 4, !dbg !91\n  %5 = load i64, ptr %4, align 4, !dbg !91\n  %6 = getelementptr i32, ptr %.unpack18, i64 6, !dbg !91\n  %7 = load i32, ptr %6, align 4, !dbg !91\n  %8 = getelementptr i32, ptr %.unpack18, i64 7, !dbg !91\n  %9 = load i32, ptr %8, align 4, !dbg !91\n  %10 = getelementptr i32, ptr %.unpack18, i64 8, !dbg !91\n  %11 = load i64, ptr %10, align 4, !dbg !91\n  %12 = getelementptr i32, ptr %.unpack18, i64 10, !dbg !91\n  %13 = load i64, ptr %12, align 4, !dbg !91\n  %14 = shl i64 %13, 4, !dbg !91\n  %15 = getelementptr i32, ptr %.unpack18, i64 14, !dbg !91\n  %16 = load i64, ptr %15, align 4, !dbg !91\n  %17 = shl i64 %16, 8, !dbg !91\n  %18 = zext i32 %7 to i64, !dbg !91\n  %19 = zext i32 %9 to i64, !dbg !91\n  %20 = shl nuw i64 %19, 32, !dbg !91\n  %21 = or disjoint i64 %20, %18, !dbg !91\n  %22 = load ptr, ptr %.unpack20, align 8, !dbg !91\n  %23 = getelementptr ptr, ptr %.unpack20, i64 1, !dbg !91\n  %24 = load ptr, ptr %23, align 8, !dbg !91\n  %25 = load %iree_hal_executable_workgroup_state_v0_t.20, ptr %2, align 16, !dbg !91\n  %26 = extractvalue %iree_hal_executable_workgroup_state_v0_t.20 %25, 0, !dbg !91\n  %27 = zext i32 %26 to i64, !dbg !91\n  %28 = zext i32 %.unpack8 to i64, !dbg !91\n  %29 = extractvalue %iree_hal_executable_workgroup_state_v0_t.20 %25, 1, !dbg !91\n  %30 = zext i32 %29 to i64, !dbg !91\n  %31 = zext i32 %.unpack10 to i64, !dbg !91\n  %32 = icmp sgt i64 %5, %30, !dbg !91\n  br i1 %32, label %.preheader.lr.ph, label %._crit_edge58, !dbg !91\n\n.preheader.lr.ph:                                 ; preds = %3\n  %33 = getelementptr i32, ptr %.unpack18, i64 3, !dbg !91\n  %34 = load i32, ptr %33, align 4, !dbg !91\n  %35 = zext i32 %34 to i64, !dbg !91\n  %36 = shl nuw i64 %35, 32, !dbg !91\n  %37 = getelementptr i32, ptr %.unpack18, i64 2, !dbg !91\n  %38 = load i32, ptr %37, align 4, !dbg !91\n  %39 = zext i32 %38 to i64, !dbg !91\n  %40 = or disjoint i64 %36, %39, !dbg !91\n  %41 = getelementptr i32, ptr %.unpack18, i64 1, !dbg !91\n  %42 = load i32, ptr %41, align 4, !dbg !91\n  %43 = zext i32 %42 to i64, !dbg !91\n  %44 = shl nuw i64 %43, 32, !dbg !91\n  %45 = load i32, ptr %.unpack18, align 4, !dbg !91\n  %46 = zext i32 %45 to i64, !dbg !91\n  %47 = or disjoint i64 %44, %46, !dbg !91\n  %48 = icmp sgt i64 %11, %27\n  %.lobit = ashr i64 %44, 63\n  %49 = xor i64 %47, %.lobit\n  %50 = sdiv i64 %49, 4\n  %51 = xor i64 %50, %.lobit\n  %.lobit24 = ashr i64 %36, 63\n  %52 = xor i64 %40, %.lobit24\n  %53 = sdiv i64 %52, 4\n  %54 = xor i64 %53, %.lobit24\n  %55 = icmp eq i64 %21, 0\n  %56 = shl i64 %21, 9\n  %57 = icmp sgt i64 %21, 0\n  br label %.preheader, !dbg !91\n\n.preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph\n  %58 = phi i64 [ %30, %.preheader.lr.ph ], [ %228, %._crit_edge ]\n  br i1 %48, label %.lr.ph, label %._crit_edge, !dbg !91\n\n.lr.ph:                                           ; preds = %.preheader\n  %59 = mul i64 %17, %58\n  %60 = add i64 %59, %54\n  %61 = mul i64 %56, %58\n  %62 = ashr exact i64 %61, 3\n  %63 = getelementptr inbounds i8, ptr %22, i64 %62\n  %64 = shl i64 %60, 2\n  %invariant.gep = getelementptr i8, ptr %24, i64 %64, !dbg !91\n  br label %65, !dbg !91\n\n65:                                               ; preds = %iree_uk_mmt4d.exit, %.lr.ph\n  %66 = phi i64 [ %27, %.lr.ph ], [ %226, %iree_uk_mmt4d.exit ]\n  br i1 %55, label %iree_uk_mmt4d.exit, label %67, !dbg !91\n\n67:                                               ; preds = %65\n  %68 = mul i64 %14, %66, !dbg !91\n  %69 = add i64 %68, %51, !dbg !91\n  %70 = shl i64 %69, 5, !dbg !91\n  %71 = ashr exact i64 %70, 3, !dbg !91\n  %72 = getelementptr inbounds i8, ptr %22, i64 %71, !dbg !91\n  %73 = shl i64 %66, 10, !dbg !91\n  %gep = getelementptr i8, ptr %invariant.gep, i64 %73, !dbg !91\n  tail call void @llvm.prefetch.p0(ptr %gep, i32 1, i32 1, i32 1), !dbg !91\n  tail call void @llvm.prefetch.p0(ptr %63, i32 0, i32 3, i32 1), !dbg !91\n  tail call void @llvm.prefetch.p0(ptr %72, i32 0, i32 3, i32 1), !dbg !91\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !92), !dbg !91\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !95), !dbg !91\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !97), !dbg !91\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !99), !dbg !91\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !102), !dbg !91\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !104), !dbg !91\n  tail call void @llvm.prefetch.p0(ptr %63, i32 0, i32 3, i32 1), !dbg !91, !noalias !106\n  tail call void @llvm.prefetch.p0(ptr %72, i32 0, i32 3, i32 1), !dbg !91, !noalias !107\n  %74 = load &lt;16 x float&gt;, ptr %gep, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %75 = getelementptr inbounds float, ptr %gep, i64 16, !dbg !91\n  %76 = load &lt;16 x float&gt;, ptr %75, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %77 = getelementptr inbounds float, ptr %gep, i64 32, !dbg !91\n  %78 = load &lt;16 x float&gt;, ptr %77, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %79 = getelementptr inbounds float, ptr %gep, i64 48, !dbg !91\n  %80 = load &lt;16 x float&gt;, ptr %79, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %81 = getelementptr inbounds float, ptr %gep, i64 64, !dbg !91\n  %82 = load &lt;16 x float&gt;, ptr %81, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %83 = getelementptr inbounds float, ptr %gep, i64 80, !dbg !91\n  %84 = load &lt;16 x float&gt;, ptr %83, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %85 = getelementptr inbounds float, ptr %gep, i64 96, !dbg !91\n  %86 = load &lt;16 x float&gt;, ptr %85, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %87 = getelementptr inbounds float, ptr %gep, i64 112, !dbg !91\n  %88 = load &lt;16 x float&gt;, ptr %87, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %89 = getelementptr inbounds float, ptr %gep, i64 128, !dbg !91\n  %90 = load &lt;16 x float&gt;, ptr %89, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %91 = getelementptr inbounds float, ptr %gep, i64 144, !dbg !91\n  %92 = load &lt;16 x float&gt;, ptr %91, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %93 = getelementptr inbounds float, ptr %gep, i64 160, !dbg !91\n  %94 = load &lt;16 x float&gt;, ptr %93, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %95 = getelementptr inbounds float, ptr %gep, i64 176, !dbg !91\n  %96 = load &lt;16 x float&gt;, ptr %95, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %97 = getelementptr inbounds float, ptr %gep, i64 192, !dbg !91\n  %98 = load &lt;16 x float&gt;, ptr %97, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %99 = getelementptr inbounds float, ptr %gep, i64 208, !dbg !91\n  %100 = load &lt;16 x float&gt;, ptr %99, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %101 = getelementptr inbounds float, ptr %gep, i64 224, !dbg !91\n  %102 = load &lt;16 x float&gt;, ptr %101, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  %103 = getelementptr inbounds float, ptr %gep, i64 240, !dbg !91\n  %104 = load &lt;16 x float&gt;, ptr %103, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  br i1 %57, label %.preheader.i, label %iree_uk_mmt4d_tile_f32f32f32_16x16x1_x86_64_avx512_base.exit, !dbg !91\n\n.preheader.i:                                     ; preds = %.preheader.i, %67\n  %105 = phi &lt;16 x float&gt; [ %204, %.preheader.i ], [ %104, %67 ], !dbg !91\n  %106 = phi &lt;16 x float&gt; [ %199, %.preheader.i ], [ %102, %67 ], !dbg !91\n  %107 = phi &lt;16 x float&gt; [ %194, %.preheader.i ], [ %100, %67 ], !dbg !91\n  %108 = phi &lt;16 x float&gt; [ %189, %.preheader.i ], [ %98, %67 ], !dbg !91\n  %109 = phi &lt;16 x float&gt; [ %184, %.preheader.i ], [ %96, %67 ], !dbg !91\n  %110 = phi &lt;16 x float&gt; [ %179, %.preheader.i ], [ %94, %67 ], !dbg !91\n  %111 = phi &lt;16 x float&gt; [ %174, %.preheader.i ], [ %92, %67 ], !dbg !91\n  %112 = phi &lt;16 x float&gt; [ %169, %.preheader.i ], [ %90, %67 ], !dbg !91\n  %113 = phi &lt;16 x float&gt; [ %164, %.preheader.i ], [ %88, %67 ], !dbg !91\n  %114 = phi &lt;16 x float&gt; [ %159, %.preheader.i ], [ %86, %67 ], !dbg !91\n  %115 = phi &lt;16 x float&gt; [ %154, %.preheader.i ], [ %84, %67 ], !dbg !91\n  %116 = phi &lt;16 x float&gt; [ %149, %.preheader.i ], [ %82, %67 ], !dbg !91\n  %117 = phi &lt;16 x float&gt; [ %144, %.preheader.i ], [ %80, %67 ], !dbg !91\n  %118 = phi &lt;16 x float&gt; [ %139, %.preheader.i ], [ %78, %67 ], !dbg !91\n  %119 = phi &lt;16 x float&gt; [ %134, %.preheader.i ], [ %76, %67 ], !dbg !91\n  %120 = phi &lt;16 x float&gt; [ %129, %.preheader.i ], [ %74, %67 ], !dbg !91\n  %121 = phi i64 [ %208, %.preheader.i ], [ 0, %67 ], !dbg !91\n  %122 = phi ptr [ %207, %.preheader.i ], [ %63, %67 ], !dbg !91\n  %123 = phi ptr [ %205, %.preheader.i ], [ %72, %67 ], !dbg !91\n  %124 = load &lt;16 x float&gt;, ptr %123, align 1, !dbg !91, !tbaa !108, !alias.scope !113, !noalias !107\n  %125 = getelementptr inbounds float, ptr %123, i64 128, !dbg !91\n  tail call void @llvm.prefetch.p0(ptr nonnull %125, i32 0, i32 3, i32 1), !dbg !91, !noalias !107\n  %126 = load float, ptr %122, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %127 = insertelement &lt;16 x float&gt; poison, float %126, i64 0, !dbg !91\n  %128 = shufflevector &lt;16 x float&gt; %127, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %129 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %128, &lt;16 x float&gt; %124, &lt;16 x float&gt; %120), !dbg !91\n  %130 = getelementptr inbounds float, ptr %122, i64 1, !dbg !91\n  %131 = load float, ptr %130, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %132 = insertelement &lt;16 x float&gt; poison, float %131, i64 0, !dbg !91\n  %133 = shufflevector &lt;16 x float&gt; %132, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %134 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %133, &lt;16 x float&gt; %124, &lt;16 x float&gt; %119), !dbg !91\n  %135 = getelementptr inbounds float, ptr %122, i64 2, !dbg !91\n  %136 = load float, ptr %135, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %137 = insertelement &lt;16 x float&gt; poison, float %136, i64 0, !dbg !91\n  %138 = shufflevector &lt;16 x float&gt; %137, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %139 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %138, &lt;16 x float&gt; %124, &lt;16 x float&gt; %118), !dbg !91\n  %140 = getelementptr inbounds float, ptr %122, i64 3, !dbg !91\n  %141 = load float, ptr %140, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %142 = insertelement &lt;16 x float&gt; poison, float %141, i64 0, !dbg !91\n  %143 = shufflevector &lt;16 x float&gt; %142, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %144 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %143, &lt;16 x float&gt; %124, &lt;16 x float&gt; %117), !dbg !91\n  %145 = getelementptr inbounds float, ptr %122, i64 4, !dbg !91\n  %146 = load float, ptr %145, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %147 = insertelement &lt;16 x float&gt; poison, float %146, i64 0, !dbg !91\n  %148 = shufflevector &lt;16 x float&gt; %147, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %149 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %148, &lt;16 x float&gt; %124, &lt;16 x float&gt; %116), !dbg !91\n  %150 = getelementptr inbounds float, ptr %122, i64 5, !dbg !91\n  %151 = load float, ptr %150, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %152 = insertelement &lt;16 x float&gt; poison, float %151, i64 0, !dbg !91\n  %153 = shufflevector &lt;16 x float&gt; %152, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %154 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %153, &lt;16 x float&gt; %124, &lt;16 x float&gt; %115), !dbg !91\n  %155 = getelementptr inbounds float, ptr %122, i64 6, !dbg !91\n  %156 = load float, ptr %155, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %157 = insertelement &lt;16 x float&gt; poison, float %156, i64 0, !dbg !91\n  %158 = shufflevector &lt;16 x float&gt; %157, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %159 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %158, &lt;16 x float&gt; %124, &lt;16 x float&gt; %114), !dbg !91\n  %160 = getelementptr inbounds float, ptr %122, i64 7, !dbg !91\n  %161 = load float, ptr %160, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %162 = insertelement &lt;16 x float&gt; poison, float %161, i64 0, !dbg !91\n  %163 = shufflevector &lt;16 x float&gt; %162, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %164 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %163, &lt;16 x float&gt; %124, &lt;16 x float&gt; %113), !dbg !91\n  %165 = getelementptr inbounds float, ptr %122, i64 8, !dbg !91\n  %166 = load float, ptr %165, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %167 = insertelement &lt;16 x float&gt; poison, float %166, i64 0, !dbg !91\n  %168 = shufflevector &lt;16 x float&gt; %167, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %169 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %168, &lt;16 x float&gt; %124, &lt;16 x float&gt; %112), !dbg !91\n  %170 = getelementptr inbounds float, ptr %122, i64 9, !dbg !91\n  %171 = load float, ptr %170, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %172 = insertelement &lt;16 x float&gt; poison, float %171, i64 0, !dbg !91\n  %173 = shufflevector &lt;16 x float&gt; %172, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %174 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %173, &lt;16 x float&gt; %124, &lt;16 x float&gt; %111), !dbg !91\n  %175 = getelementptr inbounds float, ptr %122, i64 10, !dbg !91\n  %176 = load float, ptr %175, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %177 = insertelement &lt;16 x float&gt; poison, float %176, i64 0, !dbg !91\n  %178 = shufflevector &lt;16 x float&gt; %177, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %179 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %178, &lt;16 x float&gt; %124, &lt;16 x float&gt; %110), !dbg !91\n  %180 = getelementptr inbounds float, ptr %122, i64 11, !dbg !91\n  %181 = load float, ptr %180, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %182 = insertelement &lt;16 x float&gt; poison, float %181, i64 0, !dbg !91\n  %183 = shufflevector &lt;16 x float&gt; %182, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %184 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %183, &lt;16 x float&gt; %124, &lt;16 x float&gt; %109), !dbg !91\n  %185 = getelementptr inbounds float, ptr %122, i64 12, !dbg !91\n  %186 = load float, ptr %185, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %187 = insertelement &lt;16 x float&gt; poison, float %186, i64 0, !dbg !91\n  %188 = shufflevector &lt;16 x float&gt; %187, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %189 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %188, &lt;16 x float&gt; %124, &lt;16 x float&gt; %108), !dbg !91\n  %190 = getelementptr inbounds float, ptr %122, i64 13, !dbg !91\n  %191 = load float, ptr %190, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %192 = insertelement &lt;16 x float&gt; poison, float %191, i64 0, !dbg !91\n  %193 = shufflevector &lt;16 x float&gt; %192, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %194 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %193, &lt;16 x float&gt; %124, &lt;16 x float&gt; %107), !dbg !91\n  %195 = getelementptr inbounds float, ptr %122, i64 14, !dbg !91\n  %196 = load float, ptr %195, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %197 = insertelement &lt;16 x float&gt; poison, float %196, i64 0, !dbg !91\n  %198 = shufflevector &lt;16 x float&gt; %197, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %199 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %198, &lt;16 x float&gt; %124, &lt;16 x float&gt; %106), !dbg !91\n  %200 = getelementptr inbounds float, ptr %122, i64 15, !dbg !91\n  %201 = load float, ptr %200, align 4, !dbg !91, !tbaa !114, !alias.scope !116, !noalias !106\n  %202 = insertelement &lt;16 x float&gt; poison, float %201, i64 0, !dbg !91\n  %203 = shufflevector &lt;16 x float&gt; %202, &lt;16 x float&gt; poison, &lt;16 x i32&gt; zeroinitializer, !dbg !91\n  %204 = tail call &lt;16 x float&gt; @llvm.fma.v16f32(&lt;16 x float&gt; %203, &lt;16 x float&gt; %124, &lt;16 x float&gt; %105), !dbg !91\n  %205 = getelementptr inbounds float, ptr %123, i64 16, !dbg !91\n  %206 = getelementptr inbounds float, ptr %122, i64 128, !dbg !91\n  tail call void @llvm.prefetch.p0(ptr nonnull %206, i32 0, i32 3, i32 1), !dbg !91, !noalias !106\n  %207 = getelementptr inbounds float, ptr %122, i64 16, !dbg !91\n  %208 = add nuw nsw i64 %121, 1, !dbg !91\n  %209 = icmp eq i64 %208, %21, !dbg !91\n  br i1 %209, label %iree_uk_mmt4d_tile_f32f32f32_16x16x1_x86_64_avx512_base.exit, label %.preheader.i, !dbg !91, !llvm.loop !117\n\niree_uk_mmt4d_tile_f32f32f32_16x16x1_x86_64_avx512_base.exit: ; preds = %.preheader.i, %67\n  %210 = phi &lt;16 x float&gt; [ %104, %67 ], [ %204, %.preheader.i ], !dbg !91\n  %211 = phi &lt;16 x float&gt; [ %102, %67 ], [ %199, %.preheader.i ], !dbg !91\n  %212 = phi &lt;16 x float&gt; [ %100, %67 ], [ %194, %.preheader.i ], !dbg !91\n  %213 = phi &lt;16 x float&gt; [ %98, %67 ], [ %189, %.preheader.i ], !dbg !91\n  %214 = phi &lt;16 x float&gt; [ %96, %67 ], [ %184, %.preheader.i ], !dbg !91\n  %215 = phi &lt;16 x float&gt; [ %94, %67 ], [ %179, %.preheader.i ], !dbg !91\n  %216 = phi &lt;16 x float&gt; [ %92, %67 ], [ %174, %.preheader.i ], !dbg !91\n  %217 = phi &lt;16 x float&gt; [ %90, %67 ], [ %169, %.preheader.i ], !dbg !91\n  %218 = phi &lt;16 x float&gt; [ %88, %67 ], [ %164, %.preheader.i ], !dbg !91\n  %219 = phi &lt;16 x float&gt; [ %86, %67 ], [ %159, %.preheader.i ], !dbg !91\n  %220 = phi &lt;16 x float&gt; [ %84, %67 ], [ %154, %.preheader.i ], !dbg !91\n  %221 = phi &lt;16 x float&gt; [ %82, %67 ], [ %149, %.preheader.i ], !dbg !91\n  %222 = phi &lt;16 x float&gt; [ %80, %67 ], [ %144, %.preheader.i ], !dbg !91\n  %223 = phi &lt;16 x float&gt; [ %78, %67 ], [ %139, %.preheader.i ], !dbg !91\n  %224 = phi &lt;16 x float&gt; [ %76, %67 ], [ %134, %.preheader.i ], !dbg !91\n  %225 = phi &lt;16 x float&gt; [ %74, %67 ], [ %129, %.preheader.i ], !dbg !91\n  store &lt;16 x float&gt; %225, ptr %gep, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %224, ptr %75, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %223, ptr %77, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %222, ptr %79, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %221, ptr %81, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %220, ptr %83, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %219, ptr %85, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %218, ptr %87, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %217, ptr %89, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %216, ptr %91, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %215, ptr %93, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %214, ptr %95, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %213, ptr %97, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %212, ptr %99, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %211, ptr %101, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  store &lt;16 x float&gt; %210, ptr %103, align 1, !dbg !91, !tbaa !108, !alias.scope !111, !noalias !112\n  br label %iree_uk_mmt4d.exit, !dbg !91\n\niree_uk_mmt4d.exit:                               ; preds = %iree_uk_mmt4d_tile_f32f32f32_16x16x1_x86_64_avx512_base.exit, %65\n  %226 = add i64 %66, %28, !dbg !91\n  %227 = icmp slt i64 %226, %11, !dbg !91\n  br i1 %227, label %65, label %._crit_edge, !dbg !91\n\n._crit_edge:                                      ; preds = %iree_uk_mmt4d.exit, %.preheader\n  %228 = add i64 %58, %31, !dbg !91\n  %229 = icmp slt i64 %228, %5, !dbg !91\n  br i1 %229, label %.preheader, label %._crit_edge58, !dbg !91\n\n._crit_edge58:                                    ; preds = %._crit_edge, %3\n  ret i32 0, !dbg !91\n}\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2024-01-22-exploring-cpu-microkernels-on-a-matmul-example/#x86-assembly","title":"x86 assembly","text":"<pre><code>  .section  .text.matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32,\"ax\",@progbits\n  .p2align  4, 0x90\n  .type  matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32,@function\nmatmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32:\n.Lfunc_begin3:\n  .loc  1 1 0 is_stmt 1\n  .cfi_startproc\n  push  rbp\n  .cfi_def_cfa_offset 16\n  .cfi_offset rbp, -16\n  mov  rbp, rsp\n  .cfi_def_cfa_register rbp\n.Ltmp6:\n  push  r15\n  push  r14\n  push  r13\n  push  r12\n  push  rbx\n  .cfi_offset rbx, -56\n  .cfi_offset r12, -48\n  .cfi_offset r13, -40\n  .cfi_offset r14, -32\n  .cfi_offset r15, -24\n  .loc  1 1 1 prologue_end\n  mov  rcx, qword ptr [rsi + 24]\n  mov  edi, dword ptr [rdx + 4]\n  mov  rax, qword ptr [rcx + 16]\n  mov  qword ptr [rbp - 48], rdi\n  mov  qword ptr [rbp - 112], rax\n  cmp  rax, rdi\n  jle  .LBB3_11\n  mov  eax, dword ptr [rsi + 16]\n  mov  edi, dword ptr [rsi + 12]\n  mov  r12, qword ptr [rsi + 32]\n  mov  rsi, qword ptr [rcx + 40]\n  mov  r9, qword ptr [rcx + 56]\n  mov  ebx, dword ptr [rcx + 4]\n  mov  r10d, dword ptr [rcx]\n  mov  r11, qword ptr [rcx + 24]\n  mov  r14, qword ptr [rcx + 32]\n  mov  r8, rsi\n  shl  r8, 4\n  mov  qword ptr [rbp - 104], rax\n  shl  r9, 8\n  mov  rax, qword ptr [r12 + 8]\n  shl  rbx, 32\n  mov  qword ptr [rbp - 128], r8\n  mov  r8d, dword ptr [rcx + 12]\n  mov  qword ptr [rbp - 96], r9\n  mov  r9d, dword ptr [rcx + 8]\n  or  r10, rbx\n  sar  rbx, 63\n  xor  r10, rbx\n  lea  r15, [r10 + 3]\n  mov  qword ptr [rbp - 80], rax\n  mov  eax, dword ptr [rdx]\n  shl  r8, 32\n  or  r9, r8\n  test  r10, r10\n  cmovns  r15, r10\n  sar  r8, 63\n  sar  r15, 2\n  xor  r9, r8\n  xor  r15, rbx\n  lea  rcx, [r9 + 3]\n  test  r9, r9\n  mov  qword ptr [rbp - 56], rax\n  cmovns  rcx, r9\n  imul  rax, rsi\n  mov  r9, qword ptr [r12]\n  imul  rsi, rdi\n  mov  qword ptr [rbp - 120], r15\n  sar  rcx, 2\n  xor  rcx, r8\n  shl  rax, 6\n  mov  qword ptr [rbp - 88], rcx\n  mov  rcx, r11\n  shl  rcx, 9\n  shl  rsi, 6\n  lea  rax, [rax + 4*r15]\n  mov  qword ptr [rbp - 72], rcx\n  mov  qword ptr [rbp - 64], rax\n  jmp  .LBB3_2\n  .p2align  4, 0x90\n.LBB3_10:\n  .loc  1 0 1 is_stmt 0\n  mov  rax, qword ptr [rbp - 48]\n  .loc  1 1 1\n  add  rax, qword ptr [rbp - 104]\n  mov  qword ptr [rbp - 48], rax\n  cmp  rax, qword ptr [rbp - 112]\n  jge  .LBB3_11\n.LBB3_2:\n  .loc  1 0 1\n  cmp  r14, qword ptr [rbp - 56]\n  .loc  1 1 1\n  jle  .LBB3_10\n  .loc  1 0 1\n  mov  rax, qword ptr [rbp - 96]\n  mov  rcx, qword ptr [rbp - 48]\n  mov  r10, qword ptr [rbp - 72]\n  mov  rdx, qword ptr [rbp - 80]\n  mov  r8, qword ptr [rbp - 64]\n  imul  rax, rcx\n  add  rax, qword ptr [rbp - 88]\n  imul  r10, rcx\n  sar  r10, 3\n  lea  r13, [r9 + r10]\n  .loc  1 1 1\n  lea  r15, [rdx + 4*rax]\n  mov  rax, qword ptr [rbp - 56]\n  jmp  .LBB3_4\n  .p2align  4, 0x90\n.LBB3_8:\n  add  rdx, r15\n  vmovups  zmmword ptr [rdx], zmm15\n  vmovups  zmmword ptr [rdx + 64], zmm14\n  vmovups  zmmword ptr [rdx + 128], zmm13\n  vmovups  zmmword ptr [rdx + 192], zmm12\n  vmovups  zmmword ptr [rdx + 256], zmm11\n  vmovups  zmmword ptr [rdx + 320], zmm10\n  vmovups  zmmword ptr [rdx + 384], zmm9\n  vmovups  zmmword ptr [rdx + 448], zmm8\n  vmovups  zmmword ptr [rdx + 512], zmm7\n  vmovups  zmmword ptr [rdx + 576], zmm6\n  vmovups  zmmword ptr [rdx + 640], zmm5\n  vmovups  zmmword ptr [rdx + 704], zmm4\n  vmovups  zmmword ptr [rdx + 768], zmm3\n  vmovups  zmmword ptr [rdx + 832], zmm2\n  vmovups  zmmword ptr [rdx + 896], zmm1\n  vmovups  zmmword ptr [rdx + 960], zmm0\n.LBB3_9:\n  add  rax, rdi\n  add  r8, rsi\n  cmp  rax, r14\n  jge  .LBB3_10\n.LBB3_4:\n  .loc  1 0 1\n  test  r11, r11\n  .loc  1 1 1\n  je  .LBB3_9\n  .loc  1 0 1\n  mov  rcx, qword ptr [rbp - 128]\n  .loc  1 1 1\n  mov  rdx, rax\n  shl  rdx, 10\n  prefetchw  byte ptr [r15 + rdx]\n  prefetcht0  byte ptr [r13]\n  imul  rcx, rax\n  add  rcx, qword ptr [rbp - 120]\n  shl  rcx, 5\n  sar  rcx, 3\n  prefetcht0  byte ptr [r9 + rcx]\n  prefetcht0  byte ptr [r13]\n  prefetcht0  byte ptr [r9 + rcx]\n  vmovups  zmm15, zmmword ptr [r15 + rdx]\n  vmovups  zmm14, zmmword ptr [r15 + rdx + 64]\n  vmovups  zmm13, zmmword ptr [r15 + rdx + 128]\n  vmovups  zmm12, zmmword ptr [r15 + rdx + 192]\n  vmovups  zmm11, zmmword ptr [r15 + rdx + 256]\n  vmovups  zmm10, zmmword ptr [r15 + rdx + 320]\n  vmovups  zmm9, zmmword ptr [r15 + rdx + 384]\n  vmovups  zmm8, zmmword ptr [r15 + rdx + 448]\n  vmovups  zmm7, zmmword ptr [r15 + rdx + 512]\n  vmovups  zmm6, zmmword ptr [r15 + rdx + 576]\n  vmovups  zmm5, zmmword ptr [r15 + rdx + 640]\n  vmovups  zmm4, zmmword ptr [r15 + rdx + 704]\n  vmovups  zmm3, zmmword ptr [r15 + rdx + 768]\n  vmovups  zmm2, zmmword ptr [r15 + rdx + 832]\n  vmovups  zmm1, zmmword ptr [r15 + rdx + 896]\n  vmovups  zmm0, zmmword ptr [r15 + rdx + 960]\n  test  r11, r11\n  jle  .LBB3_8\n  .loc  1 0 1\n  lea  rcx, [8*r8]\n  mov  r12, r9\n  mov  rbx, r11\n  sar  rcx, 3\n  add  rcx, 512\n  .p2align  4, 0x90\n.LBB3_7:\n  .loc  1 1 1\n  vmovups  zmm16, zmmword ptr [r12 + rcx - 512]\n  prefetcht0  byte ptr [r12 + rcx]\n  vfmadd231ps  zmm15, zmm16, dword ptr [r12 + r10]{1to16}\n  vfmadd231ps  zmm14, zmm16, dword ptr [r12 + r10 + 4]{1to16}\n  vfmadd231ps  zmm13, zmm16, dword ptr [r12 + r10 + 8]{1to16}\n  vfmadd231ps  zmm12, zmm16, dword ptr [r12 + r10 + 12]{1to16}\n  vfmadd231ps  zmm11, zmm16, dword ptr [r12 + r10 + 16]{1to16}\n  vfmadd231ps  zmm10, zmm16, dword ptr [r12 + r10 + 20]{1to16}\n  vfmadd231ps  zmm9, zmm16, dword ptr [r12 + r10 + 24]{1to16}\n  vfmadd231ps  zmm8, zmm16, dword ptr [r12 + r10 + 28]{1to16}\n  vfmadd231ps  zmm7, zmm16, dword ptr [r12 + r10 + 32]{1to16}\n  vfmadd231ps  zmm6, zmm16, dword ptr [r12 + r10 + 36]{1to16}\n  vfmadd231ps  zmm5, zmm16, dword ptr [r12 + r10 + 40]{1to16}\n  vfmadd231ps  zmm4, zmm16, dword ptr [r12 + r10 + 44]{1to16}\n  vfmadd231ps  zmm3, zmm16, dword ptr [r12 + r10 + 48]{1to16}\n  vfmadd231ps  zmm2, zmm16, dword ptr [r12 + r10 + 52]{1to16}\n  vfmadd231ps  zmm1, zmm16, dword ptr [r12 + r10 + 56]{1to16}\n  vfmadd231ps  zmm0, zmm16, dword ptr [r12 + r10 + 60]{1to16}\n  prefetcht0  byte ptr [r12 + r10 + 512]\n  add  r12, 64\n  dec  rbx\n  jne  .LBB3_7\n  jmp  .LBB3_8\n.LBB3_11:\n  xor  eax, eax\n  .loc  1 1 1 epilogue_begin\n  pop  rbx\n  pop  r12\n  pop  r13\n  pop  r14\n  pop  r15\n  pop  rbp\n  .cfi_def_cfa rsp, 8\n  vzeroupper\n  ret\n.Ltmp7:\n.Lfunc_end3:\n  .size  matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32, .Lfunc_end3-matmul_dynamic_dispatch_3_mmt4d_DxDxDx16x16x1_f32\n  .cfi_endproc\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2021-10-13-matrix-multiplication-with-mmt4d/","title":"Matrix Multiplication with MMT4D","text":"","tags":["CPU"]},{"location":"community/blog/2021-10-13-matrix-multiplication-with-mmt4d/#introduction","title":"Introduction","text":"<p>Matrix multiplication (matmul) is an important operation in ML workloads that poses specific challenges to code generation. For example, matmul makes repeated accesses to the same data, which makes locality of reference a top concern.</p> <p>Moreover, modern CPUs instruction set architectures (ISAs) offer specialized SIMD instructions that the matmul implementation needs to use to achieve optimal performance, and these instructions expect data to be in a particular layout.</p> <p>This article is about an in-development MLIR operation, <code>linalg.mmt4d</code>, offering a compilation path for <code>linalg.matmul</code> that is designed from the ground up for these efficiency considerations.</p> <p>We are still in the early implementation phase of this <code>linalg.mmt4d</code> plan, but we feel confident that we know where we are going because what we are really doing here is importing into the compiler what we have learned working on optimized matrix multiplication libraries, particularly Ruy. We know what loop schedule and kernel we want the compiler to generate \u2014 essentially the same as we wrote in Ruy, give or take additional optimizations such as fusions and constant folding that become possible now that we are doing this within a compiler. This allows us to focus on how we get the compiler to generate that schedule and kernel with purely algebraic transformations that compose and enable further compiler optimizations.</p> <p>At the basis of this work is the extensible op system of the Linalg dialect in the MLIR compiler toolkit. In this case, a general purpose, mixed precision mmt4d op is defined via a high level description directly in the compiler and is then available to both users of the compiler (as a <code>linalg.mmt4d</code> op) or for direct emission via Python based IR construction (i.e. for direct integration into high level frameworks without rebuilding the compiler). The ability to define such new special forms cheaply, and without any systemic framework level cost, is part of the extensibility and composition story that we expect will become increasingly important in development and deployment scenarios in the future, and in this case, it let us spring board off of high quality code generation which was already well integrated and composed well with other features of the compiler.</p>","tags":["CPU"]},{"location":"community/blog/2021-10-13-matrix-multiplication-with-mmt4d/#existing-matrix-multiplication-code-generation","title":"Existing Matrix Multiplication Code Generation","text":"<p>Let us start by discussing IREE\u2019s existing matmul code generation and highlight the issues that <code>mmt4d</code> aims to overcome.</p> <p>The existing approach operates in-place on the source matrices. When we discuss \"tiling\" in this paragraph, we refer exclusively to the traversal \u2014 how these source matrices are traversed by the matmul loop. There is no \"tiled layout\" here, which will be the key difference with <code>mmt4d</code> below.</p> <p>The destination matrix is tiled into workgroups (CPU threads) tiles, then each workgroup tile is tiled to fit some level of CPU cache, and finally each tile is further tiled to fit target architecture registers (e.g. 8x8).</p> <p>That multi-level tiling means that the code works like the following loop nest:</p> <pre><code>def tiled_matmul(A, B, C, tile_m, tile_n, tile_k, tile_m_v, tile_n_v, tile_k_v):\n m = A.shape[0]\n k = A.shape[1]\n n = B.shape[1]\n for m1 in range(0, m, tile_m):\n   for n1 in range(0, n, tile_n):\n     for k1 in range(0, k, tile_k):\n       # First level of tiling views...\n       lhs_tile = A[m1:m1+tile_m, k1:k1+tile_k]\n       rhs_tile = B[k1:k1+tile_k, n1:n1+tile_n]\n       dst_tile = C[m1:m1+tile_m, n1:n1+tile_n]\n       for mv in range(0, tile_m, tile_m_v):\n         for nv in range(0, tile_n, tile_n_v):\n           for kv in range(0, tile_k, tile_k_v):\n             # Register tiling views...\n             lhs_tile_v = lhs_tile[mv:mv+tile_m_v, kv:kv+tile_k_v]\n             rhs_tile_v = rhs_tile[kv:kv+tile_k_v, nv:nv+tile_n_v]\n             # kernel.\n             dst_tile[mv:mv+tile_m_v, nv:nv+tile_n_v] += np.matmul(lhs_tile_v, rhs_tile_v)\n return C\n</code></pre> <p>The two main problems with this approach are:</p> <ul> <li> <p>Overhead to meet SIMD ISA layout requirements: In practice, the kernel     needs to use specific SIMD     instructions to perform the arithmetic. They expect small tiles of the     matrices to be loaded in registers, in a specific layout. If the matrix data     wasn't already stored in memory in such a tiled layout, then the kernel has     to perform such a data rearrangement on the fly, incurring substantial     overhead. For NxN matrix multiplication, the kernel performs     O(N<sup>3</sup>) work on O(N<sup>2</sup>) data, so doing that rearrangement     there means O(N<sup>3</sup>) overhead where O(N<sup>2</sup>) should have     sufficed, as this could have been done as a pre-processing step on     O(N<sup>2</sup>) data.</p> </li> <li> <p>Inefficent memory traversal: For efficiency reasons, we always need     <code>tile_m_v&gt;1</code> and <code>tile_n_v&gt;1</code>. That is because the higher these values, the     fewer memory-load instructions are needed overall; and this is also dictated     by the SIMD instructions that we want to use. But that means that the kernel     is accessing simultaneously multiple rows or columns of the left-hand and     right-hand side matrices. And in this existing approach, they are stored in     linear layout, not in a tiled layout, so these accesses are not contiguous     in memory. This is detrimental to memory access performance, meaning the     CPU caches, in multiple ways. One     is that these multiple non-contiguous accesses may alias each other in the     L1 cache because of low     associativity.</p> </li> </ul>","tags":["CPU"]},{"location":"community/blog/2021-10-13-matrix-multiplication-with-mmt4d/#matrix-multiplication-operation-with-4d-tiled-operands","title":"Matrix Multiplication Operation With 4D Tiled Operands","text":"<p>For the reasons above, an efficient matmul implementation must reorder data into a tiled layout matching the target SIMD ISA and making the memory access patterns as contiguous as possible.</p> <p>IREE/MLIR defaults to bufferizing all tensors into a \"row-major\" order, meaning that the last-enumerated dimension is the one that is contiguous in memory. As we prefer not to write custom bufferization code, we can't specify an alternative layout for a tensor. Fortunately, it is possible to represent a 2D tiled layout as a 4D layout. For example, <code>tensor&lt;2x2x2x2xf32&gt;</code> can represent a 4x4 matrix made of 2x2 tiles, each of which is 2x2. The row-major layout on <code>tensor&lt;2x2x2x2xf32&gt;</code> makes each 2x2 tile contiguous and row-major, and arranges the 2x2 tiles themselves into a row-major 2x2 layout in the overall 4x4 matrix.</p> <p>Such a row-major-tiled layout is exactly what we need for the left-hand side of a matrix multiplication, because matrix multiplication traverses the left-hand side matrix row by row. But for the right-hand side matrix, we want a column-major-tiled layout. To solve this problem, we decide to implement not matrix multiplication, but matrix-multiplication-by-transposed-right-hand-side which is where the <code>t</code> in the <code>linalg.mmt4d</code> came from. Now such an op is happy with both the left and right-hand sides being row-major-tiled.</p> <p>The following example illustrates that. In these diagrams, each matrix element is rendered its memory offset.</p> <p></p> <p>To compute the 2x2 block in the destination matrix, we will have to load two yellow blocks from LHS, RHS matrices respectively compute their matmul results (i.e. call the kernel), then the two blue blocks, and so on. As we can see, each tile loads data that is not contiguous. It would be better if we rearranged the elements in the following layout:</p> <p></p> <p>Now tiles are stored contiguously in memory and the kernel can simply load them from memory into the registers that will be directly consumed by the SIMD instructions performing the multiplications. Moreover, the kernel is now loading from just two contiguous data streams, a simple memory access pattern which is sure to be efficient (regarding caches, etc) on any reasonable target hardware.</p> <p>We introduce a <code>linalg.mmt4d</code> operation that performs such a matrix multiplication on matrices in a tiled layout represented as 4D tensors. That leaves the question of how to represent, within the linalg dialect, the conversions between ordinary matrices represented as 2D tensors, and these tiled matrices represented as 4D tensors. Moreover, these conversions should be tileable and decompose well. Thankfully, the transformation from 2D to 4D can be written as a reshape followed by a transpose as in the following digram:</p> <p></p> <p>So we can think of the outermost two dimensions of the 4D representations as the tile position in the overall matrix, and the innermost two as the element position within one tile. Hopefully the following Python pseudocode makes it more concrete:</p> <pre><code>def pack_2d_4d(operand, parallel_size, reduction_size):\n i1 = operand.shape[0] // parallel_size # M1\n i2 = parallel_size    # M0\n j1 = operand.shape[1] // reduction_size # K1\n j2 = reduction_size   # K0\n operand_4d = np.reshape(operand, [i1, i2, j1, j2])\n return np.transpose(operand_4d, [0, 2, 1, 3]) # [M1, K1, M0, K0]\n</code></pre> <p>Now the mmt4d operation will follow a structure as the multi level tiling, for simplicity we considered the case here where no L1 tiling is required only first level of distribution to workgroups:</p> <pre><code>def mmt4d(A, B, C, M0, N0, K0):\n M = A.shape[0]\n N = B.shape[1]\n Bt = np.transpose(B, [1, 0])\n A4d = pack_2d_4d(A, M0, K0)\n Bt4d = pack_2d_4d(Bt, N0, K0)\n M1 = A4d.shape[0]\n N1 = Bt4d.shape[0]\n K1 = A4d.shape[1]\n for m1 in range(0, M1):\n   for n1 in range(0, N1):\n     for k1 in range(0, K1):\n       # Tile views that are contiguous in memory.\n       lhs_tile = np.reshape(A4d[m1, k1, :, :], [M0, K0])\n       rhs_tile = np.reshape(Bt4d[n1, k1, :, :], [N0, K0])\n       # Inner kernel.\n       C[m1, n1, :, :] += np.matmul(lhs_tile, np.transpose(rhs_tile, [1, 0]))\n # 4d -&gt; 2D\n C2d = unpack_4d_2d(C)\n return C2d\n</code></pre> <p>The resulting 4D tiled matrix still needs be rearranged back to the original layout as 2D tensor:</p> <pre><code>def unpack_4d_2d(operand):\n i1 = operand.shape[0] # M1\n j1 = operand.shape[1] # N1\n i2 = operand.shape[2] # M0\n j2 = operand.shape[3] # N0\n operand_transposed = operand.transpose([0, 2, 1, 3]) # [M1, M0, N1, N0]\n return operand_transposed.reshape([i1 * i2, j1 * j2]) # [M, N]\n</code></pre>","tags":["CPU"]},{"location":"community/blog/2021-10-13-matrix-multiplication-with-mmt4d/#performance-results","title":"Performance Results","text":"<p>We benchmarked various float32 matmul problems of different sizes and the result showed that mmt4d is faster than the existing matmul implementation for bigger matrices as we can see the in the following chart:</p> <p></p> <p>The SIMD instruction being used here is the simplest kind, a <code>vector*scalar</code> multiplication, and the storage orders of the matrices allow the existing implementation to directly load the vectors from the source matrices without any rearrangement overhead. So this case is particularly friendly to the existing code, which is why the mmt4d code is only faster for bigger matrices. To understand why mmt4d is faster in that case, we collected statistics of L1 cache misses:</p> <p></p> <p>This shows that in this case, the better cache-friendliness of mmt4d, thanks to its simple contiguous memory access pattern, accounts for its higher performance.</p> <p>As we proceed with increasingly sophisticated SIMD targets, starting with the dot-product instructions found in current mobile devices for the int8 case and going to become generalized to all data types all the way to float32 over the next few years with upcoming ARM SIMD instructions, the advantage of mmt4d will widen for all sizes, not just the larger ones.</p> <p>Part of why we feel confident about the eventual performance that our approach will achieve is that, as mentioned in the introduction, we are rebuilding within the compiler an existing library's schedule and kernel, and we have benchmark results about it.</p>","tags":["CPU"]},{"location":"community/blog/2021-10-13-matrix-multiplication-with-mmt4d/#conclusion","title":"Conclusion","text":"<p>We introduced a 4d tiled representation for 2d matrix-matrix multiplication with a decomposable algebric transformations that requires only reshape and transpose of input operands, we discussed and empirically showed how that solves major drawbacks in row-major linear matmul by providing a flexible way to match different ISA layout along with better cache locality achieving near peak performance.</p> <p>As was mentioned in the introduction, this work in under active development and the next immediate steps are to prove the rest of the hypothesis by:</p> <ul> <li> <p>Handling dynamic sizes and padding to the next multiple of the target tile   size.</p> </li> <li> <p>Implementing the integer case (<code>int32 += int8 * int8</code>).</p> </li> <li> <p>Implementing the dispatch to different SIMD ISA variants at runtime.</p> </li> <li> <p>Implementing cache-friendly traversal for larger matmuls and multi-threading   by interfacing with IREE's runtime dispatch.</p> </li> <li> <p>Improving the generated code by fusing the 4d tiled layout with the   producers and consumers of the <code>linalg.mmt4d</code>.</p> </li> </ul>","tags":["CPU"]},{"location":"community/blog/2021-07-19-tflite-support-via-tosa/","title":"TFLite support via TOSA","text":"<p>IREE can now execute TensorFlow Lite (TFLite) models through the use of TOSA, an open standard of common tensor operations, and a part of MLIR core. TOSA\u2019s high-level representation of tensor operations provides a common front-end for ingesting models from different frameworks. In this case we ingest a TFLite FlatBuffer and compile it to TOSA IR, which IREE takes as an input format to compile to its various backends.</p> <p></p> <p>Using TFLite as a frontend for IREE provides an alternative ingestion method for already existing models that could benefit from IREE\u2019s design. This enables models already designed for on-device inference to have an alternative path for execution without requiring any additional porting, while benefiting from IREE\u2019s improvements in buffer management, work dispatch system, and compact binary format. With continued improvements to IREE/MLIR\u2019s compilation performance, more optimized versions can be compiled and distributed to target devices without an update to the clientside environment.</p> <p>Today, we have validated floating point support for a variety of models, including mobilenet (v1, v2, and v3) and mobilebert. More work is in progress to support fully quantized models, and TFLite\u2019s hybrid quantization, along with dynamic shape support.</p>","tags":["TensorFlow"]},{"location":"community/blog/2021-07-19-tflite-support-via-tosa/#examples","title":"Examples","text":"<p>TFLite with IREE is available in Python and Java.  We have a colab notebook that shows how to use IREE\u2019s python bindings and TFLite compiler tools to compile a pre-trained TFLite model from a FlatBuffer and run using IREE.  We also have an Android Java app that was forked from an existing TFLite demo app, swapping out the TFLite library for our own AAR.  More information on IREE\u2019s TFLite frontend is available here.</p>","tags":["TensorFlow"]},{"location":"developers/","title":"Developers","text":"<p>These pages cover topics useful for project maintainers and contributors.</p> <p>Caution</p> <p>Some of these pages may be stale. Contributions are always welcome!</p>"},{"location":"developers/usage-best-practices/","title":"Usage best practices","text":"<p>This page contains a list of best practices for getting the most out of IREE, spanning model authoring, ahead-of-time compilation, and runtime use. Treat these as a collection of ideas to consider or areas to start benchmarking when working on your own applications.</p>"},{"location":"developers/usage-best-practices/#introduction","title":"Introduction","text":"<p>Common themes include:</p> <ul> <li>Give the compiler as much information as possible</li> <li>Give the compiler opportunities to batch work together or defer computation</li> <li>Keep compute devices saturated with work through pipelining</li> <li>Use dense math where possible, particularly for inner loop bodies</li> <li>Limit synchronization points between devices like CPUs and GPUs</li> <li>Profile early and often, using the right tools for each level of granularity</li> </ul>"},{"location":"developers/usage-best-practices/#practices-for-model-authoring","title":"Practices for model authoring","text":""},{"location":"developers/usage-best-practices/#track-state-within-your-model-when-possible","title":"Track state within your model when possible","text":"<p>If your model is stateful prefer to store that state directly within your program rather than externalizing it through arguments and return values. By keeping state inside your program the compiler is better able to reason about it and function calls will have lower overhead.</p> <p>If you do externalize state, try to pack that state into a limited number of arguments.</p> <p>See the variables and state sample for further guidance on tracking and using state.</p>"},{"location":"developers/usage-best-practices/#limit-uses-of-dynamic-shapes","title":"Limit uses of dynamic shapes","text":"<p>While IREE aims to support general dynamic shapes use, it is better able to optimize parts of programs where shapes are static. Slow varying dimensions like batch index or timestamp are safer uses of dynamic shapes than faster varying dimensions like the x/y/channel dimensions of images.</p> <p>See the dynamic shapes sample for further guidance on using dynamic shapes.</p>"},{"location":"developers/usage-best-practices/#practices-for-compilation-settings","title":"Practices for compilation settings","text":"<p>TODO: which compiler targets to use (try both CUDA and Vulkan?)</p> <p>TODO: use the most specific LLVM target triple you can?</p>"},{"location":"developers/usage-best-practices/#practices-for-runtime-use","title":"Practices for runtime use","text":"<p>TODO: sample code, profile numbers</p>"},{"location":"developers/usage-best-practices/#tuning-runtime-settings","title":"Tuning runtime settings","text":"<p>When running on the CPU, the task system flags specified in iree/task/api.c give control over how worker threads will be created. For example, the <code>--task_topology_group_count=3</code> flag can be set to explicitly run on three workers rather than rely on heuristic selection that defaults to one worker per detected physical core.</p> <p>If running on a single thread or system with no threading support the <code>local-sync</code> HAL driver can be used instead of the multithreaded <code>local-task</code> HAL driver to reduce dependencies and code size. When running with the <code>local-sync</code> driver all execution happens inline on the thread invoking the IREE runtime and will block until it has completed.</p>"},{"location":"developers/usage-best-practices/#do-the-minimum-amount-of-work-cache-queries-and-reuse-buffers","title":"Do the minimum amount of work: cache queries and reuse buffers","text":"<p>When using IREE's runtime libraries, try to front-load queries, particularly queries using strings that look up into maps like <code>iree_runtime_session_call_by_name</code>, so that hot sections of code are doing the minimum amount of work: routing inputs through buffers, scheduling runtime calls, and routing outputs through other buffers.</p>"},{"location":"developers/vulkan-environment-setup/","title":"Vulkan environment setup","text":"<p>Vulkan is a new generation graphics and compute API that provides high-efficiency, cross-platform access to modern GPUs used in a wide variety of devices from PCs and consoles to mobile phones and embedded platforms.</p> <p>This page lists steps and tips for setting up and troubleshooting a Vulkan development environment. The information here is meant to be generic.</p>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#vulkan-architecture","title":"Vulkan architecture","text":"<p>Vulkan adopts a layered architecture, which aims to better support extensiblity. There are four components involved in this architecture:</p> <ul> <li>The Vulkan Application</li> <li>The Vulkan Loader</li> <li>Vulkan Layers</li> <li>Installable Client Drivers (ICDs)</li> </ul> <p></p> <p>The Vulkan loader sits between the Vulkan application, which calls Vulkan APIs, and the ICDs, which implements these Vulkan APIs. Vulkan layers agument the Vulkan system to provide optional features like validation and debugging. The Vulkan loader composes a chain of requested layers, which processes the Vulkan application's API calls one by one, and finally redirects the API calls made by the Vulkan application to one or more ICDs.</p> <p>It's highly recommned to read the Architecture of the Vulkan Loader Interfaces Overview to get a general understanding of what these components are and how they interact with one another.</p>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#vulkan-environment-setup_1","title":"Vulkan environment setup","text":"","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#windows","title":"Windows","text":"<p>You need to install the Vulkan SDK from LunarG to get the Vulkan loader.</p> <p>Typically the Vulkan SDK will be installed at <code>C:\\VulkanSDK\\&lt;version&gt;\\</code> and there will be an environment variable <code>VULKAN_SDK</code> pointing to it. You can run the <code>vulkancube</code> executable under the <code>Bin\\</code> subdirectory of the Vulkan SDK to make sure everything works properly. If not, you probably need to check whether the graphics card is Vulkan capable or update the driver.</p>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#debianubuntu","title":"Debian/Ubuntu","text":"<p>For Ubuntu 20.04/22.04, it's recommended to directly install the full Vulkan SDK from LunarG's APT sources for the loader and various developer tools.</p> <p>If you want to have a minimal environment, the following packages should be installed for a proper Vulkan runtime:</p> <ul> <li><code>libvulkan1</code> for the Vulkan loader <code>libvulkan.so</code>.</li> <li>For AMD GPUs, you can install<ul> <li><code>mesa-vulkan-drivers</code> for the Mesa AMD Vulkan ICD, or</li> <li>AMD's official VUlkan ICD.</li> </ul> </li> <li>For NVIDIA GPUs, you can install<ul> <li><code>nvidia-vulkan-icd</code> on Debian for NVIDIA Vulkan ICD.</li> <li>the most recent <code>nvidia-driver-*</code> package on Ubuntu for NVIDIA Vulkan ICD.</li> </ul> </li> </ul> <p>The above packages provide the Vulkan loader and ICDs. With them a Vulkan application should be able to run. You may additionally want to install</p> <ul> <li>vulkan-tools for command-line tools like <code>vulkaninfo</code>   (dumping available ICDs and their capabilities) and GUI application like   <code>vulkancube</code> (rendering a rotating cube).</li> </ul> <p>In order to develop Vulkan applications, you additionally need the following packages:</p> <ul> <li>libvulkan-dev for various Vulkan header files.</li> <li>vulkan-validationlayers for Vulkan validation     layers like <code>VkLayer_standard_validation</code>.</li> </ul>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#linux","title":"Linux","text":"<p>For other Linux distros, please consult the corresponding package management tools for the packages needed. (And please feel free to update this doc regarding them.)</p> <p>You can also download and install the Vulkan SDK tarball from LunarG. It packages the loader with many useful layers and other shader tools.</p> <p>You can also build the Vulkan SDK component projects like Vulkan-Loader and Vulkan-ValidationLayers from source. But note that building these components separately you need to make sure they are consistent with one another (e.g., using the same version of Vulkan headers) to function together.</p>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#android","title":"Android","text":"<p>Please make sure your Android device is Vulkan capable. Vulkan is supported on Android since 7, but we track newer Android versions (10+) closely and haven't set a clear min version yet.</p>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#multiple-vulkan-sdks","title":"Multiple Vulkan SDKs","text":"<p>If you have multiple versions of Vulkan loaders exist, you may also need to set <code>LD_LIBRARY_PATH</code> and <code>LD_PRELOAD</code> to load the desired version of the loader. For example:</p> <pre><code>LD_LIBRARY_PATH={PATH_TO_VULKAN_SDK}/x86_64/lib/\nLD_PRELOAD=libvulkan.so.1\n</code></pre> <p>This can also be done by sourcing the proper <code>setup-env.sh</code> from one of the downloaded Vulkan SDKs.</p>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#vulkan-environment-troubleshooting","title":"Vulkan environment troubleshooting","text":"","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#useful-environment-variables","title":"Useful environment variables","text":"<p>There are a few environment variables that can alter the default Vulkan loader behavior and print verbose information, notably:</p> <ul> <li><code>VK_LOADER_DEBUG</code>: enable loader debug messages. Setting it to <code>all</code> will     enable the most verbose logging from the loader. This is especially useful     when trying to see what layers/ICDs are searched and used.</li> <li><code>VK_ICD_FILENAMES</code>: force the loader to use a specific ICD. This is     especially useful when you have multiple Vulkan capable devices and want to     select which one to use manually.</li> <li><code>VK_INSTANCE_LAYERS</code>: force the loader to enable the given layers. For     example, You can force enable <code>VK_LAYER_LUNARG_api_dump</code> to have a detailed     dump of all Vulkan API calls made by the application. You can force enable     <code>VK_LAYER_LUNARG_core_validation</code> to validate the API calls made by the     application.</li> <li><code>VK_LAYER_PATH</code>: override the loader's standard layer library search folders.</li> </ul> <p>Please see the Vulkan loader's documentation for detailed explanation for these variables.</p>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#setting-environment-variables-for-bazel-test","title":"Setting environment variables for Bazel test","text":"<p>Bazel runs tests in a sandbox and environment variables must be passed through to the test runner. Consider putting environment setup in a <code>user.bazelrc</code> to save typing. For example:</p> <pre><code>test --test_env=\"LD_LIBRARY_PATH=/absolute/path/to/vulkan/sdk/x86_64/lib/\"\ntest --test_env=\"LD_PRELOAD=libvulkan.so.1\"\ntest --test_env=\"VK_LAYER_PATH=/absolute/path/to/additional/layers/:$VK_LAYER_PATH\"\n</code></pre>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#vulkan-function-vkcreateinstance-not-available-on-android","title":"Vulkan function <code>vkCreateInstance</code> not available on Android","text":"<p>Since Android 8 Oreo, Android re-architected the OS framework with project Treble. Framework libraries and vendor libraries have a more strict and clear separation. Their dependencies are carefully scrutinized and only selected cases are allowed. This is enforced with linker namespaces.</p> <p><code>/data/local/tmp</code> is the preferred directory for automating native binary tests built using NDK toolchain. They should be allowed to access libraries like <code>libvulkan.so</code> for their functionality. However, there was an issue with fully treblized Android 10 where <code>/data/local/tmp</code> did not have access to the linker namespaces needed by <code>libvulkan.so</code>. This should be fixed now. But as typically in the Android system, it takes a long time to see the fix getting propagated, if ever.</p> <p>A known workaround is to symlink the vendor Vulkan implementation under <code>/vendor/lib[64]</code> as <code>libvulkan.so</code> under <code>/data/local/tmp</code> and use <code>LD_LIBRARY_PATH=/data/local/tmp</code> when invoking IREE executables.</p> <p>For Qualcomm Adreno GPUs, the vendor Vulkan implementation is at <code>/vendor/lib[64]/hw/vulkan.*.so</code>. So for example for Snapdragon 865:</p> <pre><code>adb shell ln -s /vendor/lib64/hw/vulkan.kona.so /data/local/tmp/libvulkan.so\n</code></pre> <p>For ARM Mali GPUs, there is only one monolithic driver (<code>/vendor/lib[64]/libGLES_mali.so</code>) for OpenGL and Vulkan and the Vulkan vendor driver (<code>/vendor/lib[64]/hw/vulkan.*.so</code>) is just a symlink to it. So for example:</p> <pre><code>adb shell ln -s /vendor/lib64/libGLES_mali.so /data/local/tmp/libvulkan.so\n</code></pre>","tags":["GPU","Vulkan"]},{"location":"developers/vulkan-environment-setup/#ssh-on-linux-and-x-forwarding","title":"SSH on Linux and X forwarding","text":"<p>Physical devices enumerated on NVIDIA drivers can be affected by the <code>DISPLAY</code> environment variable. If you are running under an SSH session to Linux or using chrome remote desktop and have problems with physical device enumeration, you probably want to check the <code>DISPLAY</code> environment and set it to point to a display at the server side, for example:</p> <pre><code>export DISPLAY=:0\n</code></pre>","tags":["GPU","Vulkan"]},{"location":"developers/building/bazel/","title":"Building with Bazel","text":"<p>This page walks through building IREE from source using the Bazel build system.</p> <p>Warning</p> <p>Bazel build support is primarily for internal project infrastructure. We strongly recommend using CMake instead.</p> <p>Our Bazel configuration is also only tested on Linux. Windows and macOS may be unstable.</p>"},{"location":"developers/building/bazel/#prerequisites","title":"Prerequisites","text":"Linux macOS Windows <ol> <li> <p>Install Bazel, matching IREE's     <code>.bazelversion</code>     by following the     official docs.</p> </li> <li> <p>Install a compiler such as Clang (GCC is not fully supported).</p> <pre><code>sudo apt install clang\n</code></pre> <p>Set environment variables for Bazel:</p> <pre><code>export CC=clang\nexport CXX=clang++\n</code></pre> </li> <li> <p>Install Python build requirements:</p> <pre><code>python -m pip install -r runtime/bindings/python/iree/runtime/build_requirements.txt\n</code></pre> </li> </ol> <ol> <li> <p>Install Homebrew:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre> </li> <li> <p>Install Bazel, matching IREE's     <code>.bazelversion</code>     by following the official docs or     via Homebrew:</p> <pre><code>brew install bazel\n</code></pre> </li> <li> <p>Install Python build requirements:</p> <pre><code>python -m pip install -r runtime/bindings/python/iree/runtime/build_requirements.txt\n</code></pre> </li> </ol> <p>Tip</p> <p>You can simplify installation by using a package manager like Scoop or Chocolatey.</p> <ol> <li> <p>Install Bazel, matching IREE's     <code>.bazelversion</code>     by following the official docs.</p> <p>Also install MSYS2 by following Bazel's documentation.</p> </li> <li> <p>Install Python3 (docs here)     and Python build requirements:</p> <pre><code>python -m pip install -r runtime/bindings/python/iree/runtime/build_requirements.txt\n</code></pre> </li> <li> <p>Install the full Visual Studio or \"Build Tools For Visual Studio\" from the     downloads page then     set the <code>BAZEL_VS</code> environment variable:</p> <pre><code>&gt; $env:BAZEL_VS = \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\"\n</code></pre> </li> </ol>"},{"location":"developers/building/bazel/#quickstart-clone-and-build","title":"Quickstart: clone and build","text":""},{"location":"developers/building/bazel/#clone","title":"Clone","text":"<p>Use Git to clone the IREE repository and initialize its submodules:</p> <pre><code>git clone https://github.com/iree-org/iree.git\ncd iree\ngit submodule update --init\n</code></pre> <p>Configure Bazel:</p> <pre><code># This generates a `configured.bazelrc` file by analyzing your environment.\n# Skipping this step will make it difficult to select your platform/compiler.\npython3 configure_bazel.py\n</code></pre>  Linux macOS Windows <p>(No Linux-specific tips for configuring)</p> <p>(No macOS-specific tips for configuring)</p> <p>Tip</p> <p>Clone to a short path like <code>C:\\projects\\</code> to avoid issues with Windows maximum path lengths (260 characters).</p> <p>Tip</p> <p><code>configure_bazel.py</code> only detects that you have Windows and will output the default <code>--config=windows</code> to <code>configured.bazelrc</code>, which assumes the latest version of MSVC. To avoid some warnings, you may want to replace it with (for example) <code>--config=msvc2022</code>.</p>"},{"location":"developers/building/bazel/#build","title":"Build","text":"<p>Run all tests:</p> <pre><code>bazel test -k //...\n</code></pre> <p>Run all tests except those that require CUDA:</p> <pre><code>bazel test -k //... \\\n    --iree_drivers=local-sync,local-task,vulkan \\\n    --test_tag_filters=\"-driver=cuda,-target=cuda\" \\\n    --build_tag_filters=\"-driver=cuda,-target=cuda\"\n</code></pre> <p>Run all tests except those that require a GPU (any API):</p> <pre><code>bazel test -k //... \\\n    --iree_drivers=local-sync,local-task,vulkan \\\n    --test_tag_filters=\"-driver=vulkan,-driver=metal,-driver=cuda,-target=cuda\" \\\n    --build_tag_filters=\"-driver=cuda,-target=cuda\"\n</code></pre> <p>Tip</p> <p>See the <code>build_tools/bazel/build_test_all.sh</code> script for examples of other flags and environment variables that can be used to configure what Bazel runs.</p> <p>In general, build artifacts will be under the <code>bazel-bin</code> directory at the top level.</p>"},{"location":"developers/building/bazel/#recommended-userbazelrc","title":"Recommended <code>user.bazelrc</code>","text":"<p>You can put a user.bazelrc at the root of the repository and it will be ignored by git.</p>  Linux macOS Windows <pre><code>build --disk_cache=/tmp/bazel-cache\n\n# Use --config=debug to compile IREE and LLVM without optimizations\n# and with assertions enabled.\nbuild:debug --config=asserts --compilation_mode=opt '--per_file_copt=iree|llvm@-O0' --strip=never\n\n# Use --config=asserts to enable assertions. This has to be done globally:\n# Code compiled with and without assertions can't be linked together (ODR violation).\nbuild:asserts --compilation_mode=opt '--copt=-UNDEBUG'\n</code></pre> <pre><code>build --disk_cache=/tmp/bazel-cache\n\n# Use --config=debug to compile IREE and LLVM without optimizations\n# and with assertions enabled.\nbuild:debug --config=asserts --compilation_mode=opt '--per_file_copt=iree|llvm@-O0' --strip=never\n\n# Use --config=asserts to enable assertions. This has to be done globally:\n# Code compiled with and without assertions can't be linked together (ODR violation).\nbuild:asserts --compilation_mode=opt '--copt=-UNDEBUG'\n</code></pre> <pre><code>build --disk_cache=c:/bazelcache\nbuild:debug --compilation_mode=dbg --copt=/O2 --per_file_copt=iree@/Od --strip=never\n</code></pre>"},{"location":"developers/building/bazel/#whats-next","title":"What's next?","text":""},{"location":"developers/building/bazel/#take-a-look-around","title":"Take a Look Around","text":"<p>Build all of IREE's 'tools' directory:</p> <pre><code>bazel build tools/...\n</code></pre> <p>Check out what was built:</p> <pre><code>ls bazel-bin/tools/\n./bazel-bin/tools/iree-compile --help\n</code></pre> <p>Translate a MLIR file and execute a function in the compiled module:</p> <pre><code># iree-run-mlir &lt;compiler flags&gt; [input.mlir] &lt;runtime flags&gt;\n$ ./bazel-bin/tools/iree-run-mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  --print-mlir \\\n  ./samples/models/simple_abs.mlir \\\n  --input=f32=-2\n</code></pre>"},{"location":"developers/building/cmake-options/","title":"CMake options","text":""},{"location":"developers/building/cmake-options/#frequently-used-cmake-options","title":"Frequently-used CMake options","text":""},{"location":"developers/building/cmake-options/#cmake_build_type","title":"<code>CMAKE_BUILD_TYPE</code>","text":"<ul> <li>type: STRING</li> </ul> <p>Sets the build type. Possible values are <code>Release</code>, <code>Debug</code>, <code>RelWithDebInfo</code> and <code>MinSizeRel</code>. If unset, build type is set to <code>Release</code>.</p>"},{"location":"developers/building/cmake-options/#cmake_lang_compiler","title":"<code>CMAKE_&lt;LANG&gt;_COMPILER</code>","text":"<ul> <li>type: STRING</li> </ul> <p>This is the command that will be used as the <code>&lt;LANG&gt;</code> compiler, which are <code>C</code> and <code>CXX</code> in IREE. These variables are set to compile IREE with <code>clang</code> or rather <code>clang++</code>. Once set, these variables can not be changed.</p>"},{"location":"developers/building/cmake-options/#iree-specific-cmake-options","title":"IREE-specific CMake options","text":"<p>This gives a brief explanation of IREE specific CMake options and variables.</p>"},{"location":"developers/building/cmake-options/#iree_enable_runtime_tracing","title":"<code>IREE_ENABLE_RUNTIME_TRACING</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Enables instrumented runtime tracing. Defaults to <code>OFF</code>.</p>"},{"location":"developers/building/cmake-options/#iree_enable_compiler_tracing","title":"<code>IREE_ENABLE_COMPILER_TRACING</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Enables instrumented compiler tracing. This requires that <code>IREE_ENABLE_RUNTIME_TRACING</code> also be set. Defaults to <code>OFF</code>.</p>"},{"location":"developers/building/cmake-options/#iree_build_compiler","title":"<code>IREE_BUILD_COMPILER</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Builds the IREE compiler. Defaults to <code>ON</code>.</p>"},{"location":"developers/building/cmake-options/#iree_build_tests","title":"<code>IREE_BUILD_TESTS</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Builds IREE unit tests. Defaults to <code>ON</code>.</p>"},{"location":"developers/building/cmake-options/#iree_build_docs","title":"<code>IREE_BUILD_DOCS</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Builds IREE documentation files. Defaults to <code>OFF</code>.</p>"},{"location":"developers/building/cmake-options/#iree_build_samples","title":"<code>IREE_BUILD_SAMPLES</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Builds IREE sample projects. Defaults to <code>ON</code>.</p>"},{"location":"developers/building/cmake-options/#iree_build_python_bindings","title":"<code>IREE_BUILD_PYTHON_BINDINGS</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Builds the IREE python bindings. Defaults to <code>OFF</code>.</p>"},{"location":"developers/building/cmake-options/#iree_build_bindings_tflite","title":"<code>IREE_BUILD_BINDINGS_TFLITE</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Builds the IREE TFLite C API compatibility shim. Defaults to <code>ON</code>.</p>"},{"location":"developers/building/cmake-options/#iree_build_bindings_tflite_java","title":"<code>IREE_BUILD_BINDINGS_TFLITE_JAVA</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Builds the IREE TFLite Java bindings with the C API compatibility shim. Defaults to <code>ON</code>.</p>"},{"location":"developers/building/cmake-options/#iree_hal_driver_defaults","title":"<code>IREE_HAL_DRIVER_DEFAULTS</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Default setting for each <code>IREE_HAL_DRIVER_*</code> option.</p>"},{"location":"developers/building/cmake-options/#iree_hal_driver_","title":"<code>IREE_HAL_DRIVER_*</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Individual options enabling the build for each runtime HAL driver:</p> <ul> <li><code>IREE_HAL_DRIVER_CUDA</code></li> <li><code>IREE_HAL_DRIVER_HIP</code></li> <li><code>IREE_HAL_DRIVER_LOCAL_SYNC</code></li> <li><code>IREE_HAL_DRIVER_LOCAL_TASK</code></li> <li><code>IREE_HAL_DRIVER_VULKAN</code></li> <li><code>IREE_HAL_DRIVER_METAL</code></li> </ul>"},{"location":"developers/building/cmake-options/#iree_target_backend_defaults","title":"<code>IREE_TARGET_BACKEND_DEFAULTS</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Default setting for each <code>IREE_TARGET_BACKEND_*</code> option.</p>"},{"location":"developers/building/cmake-options/#iree_target_backend_","title":"<code>IREE_TARGET_BACKEND_*</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Individual options enabling the build for each compiler target backend:</p> <ul> <li><code>IREE_TARGET_BACKEND_VMVX</code></li> <li><code>IREE_TARGET_BACKEND_LLVM_CPU</code></li> <li><code>IREE_TARGET_BACKEND_LLVM_CPU_WASM</code></li> <li><code>IREE_TARGET_BACKEND_METAL_SPIRV</code></li> <li><code>IREE_TARGET_BACKEND_VULKAN_SPIRV</code></li> <li><code>IREE_TARGET_BACKEND_ROCM</code></li> </ul>"},{"location":"developers/building/cmake-options/#iree_input_","title":"<code>IREE_INPUT_*</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Individual options enabling each set of input dialects:</p> <ul> <li><code>IREE_INPUT_STABLEHLO</code></li> <li><code>IREE_INPUT_TORCH</code></li> <li><code>IREE_INPUT_TOSA</code></li> </ul>"},{"location":"developers/building/cmake-options/#iree_output_format_c","title":"<code>IREE_OUTPUT_FORMAT_C</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Enables the vm-c compiler output format, using MLIR EmitC. Defaults to <code>ON</code>.</p>"},{"location":"developers/building/cmake-options/#iree_dev_mode","title":"<code>IREE_DEV_MODE</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Configure settings to optimize for IREE development (as opposed to CI or release). Defaults to <code>OFF</code>. For example, this will downgrade some compiler diagnostics from errors to warnings.</p>"},{"location":"developers/building/cmake-options/#iree_enable_lld","title":"<code>IREE_ENABLE_LLD</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Use lld when linking. Defaults to <code>OFF</code>. This option is equivalent to <code>-DIREE_USE_LINKER=lld</code>. The option <code>IREE_ENABLE_LLD</code> and <code>IREE_USE_LINKER</code> can not be set at the same time.</p>"},{"location":"developers/building/cmake-options/#iree_enable_asan","title":"<code>IREE_ENABLE_ASAN</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Enable address sanitizer if the current build type is Debug and the compiler supports it.</p>"},{"location":"developers/building/cmake-options/#iree_enable_msan","title":"<code>IREE_ENABLE_MSAN</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Enable memory sanitizer if the current build type is Debug and the compiler supports it.</p>"},{"location":"developers/building/cmake-options/#iree_enable_tsan","title":"<code>IREE_ENABLE_TSAN</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Enable thread sanitizer if the current build type is Debug and the compiler supports it.</p>"},{"location":"developers/building/cmake-options/#iree_enable_ubsan","title":"<code>IREE_ENABLE_UBSAN</code>","text":"<ul> <li>type: BOOL</li> </ul> <p>Enable undefiend behavior sanitizer if the current build type is Debug and the compiler supports it.</p>"},{"location":"developers/building/cmake-options/#cross-compilation","title":"Cross-compilation","text":"<p>When cross compiling (using a toolchain file like <code>android.toolchain.cmake</code>), first build and install IREE's tools for your host configuration, then use the <code>IREE_HOST_BIN_DIR</code> CMake option to point the cross compiled build at the host tools.</p>"},{"location":"developers/building/cmake-with-ccache/","title":"CMake with <code>ccache</code>","text":"<p><code>ccache</code> is a compilation cache. In principle, just prepending compiler invocations with <code>ccache</code> is all one needs to enable it, e.g.</p> <pre><code>ccache clang foo.c -c -o foo.o\n</code></pre> <p>takes care of executing <code>clang</code> with these arguments and caches the output file <code>foo.o</code>. The next invocation then skips executing <code>clang</code> altogether.</p> <p>When the cache is hit, the speedup is such that the \"compilation\" becomes essentially free. However, <code>ccache</code> only caches compilation, not linking.</p> <p>Here a few scenarios where <code>ccache</code> helps:</p> <ul> <li>Incremental rebuilds. While <code>cmake</code> always tries to avoid unnecessary work in   incremental rebuilds, it can only make simple decisions based on file   timestamps. <code>ccache</code> sees deeper: if the raw source code isn't readily   a cache hit, it will then try again after preprocessing and discarding   comments.</li> <li>One pain point with <code>cmake</code> is having to start over from a clean build   directory from time to time, which by default means paying again the full cost   of a cold build. Thankfully <code>ccache</code> keeps its cache outside of any <code>cmake</code>   build directory, so the first build in the new clean build directory may be   very fast.</li> </ul>"},{"location":"developers/building/cmake-with-ccache/#installing-and-setting-up-ccache","title":"Installing and setting up <code>ccache</code>","text":"<p><code>ccache</code> is available on most platforms. On Debian-based Linux distributions, do:</p> <pre><code>sudo apt install ccache\n</code></pre> <p>The one <code>ccache</code> setting that you probably need to configure is the maximum cache size. The default <code>5G</code> is too small for our purposes. To set the cache max size, do this once:</p> <pre><code>ccache --max-size=20G\n</code></pre> <p>Tip: At the moment (late 2020), most of the code we're building is <code>third_party/llvm-project</code> so the fundamental limiting factor to how far we can cache away rebuilds is how often that dependency gets updated. Given how frequently it currently is updated, I'm finding that <code>20G</code> is enough to make the <code>ccache</code> size not be the limiting factor.</p>"},{"location":"developers/building/cmake-with-ccache/#telling-cmake-to-use-ccache","title":"Telling CMake to use <code>ccache</code>","text":"<p>Use the CMake COMPILER_LAUNCHER functionality by setting <code>CMAKE_C_COMPILER_LAUNCHER=ccache</code> and <code>CMAKE_CXX_COMPILER_LAUNCHER=ccache</code> in your</p> <p>Notes:</p> <ul> <li>This approach only works with the <code>Ninja</code> and <code>Makefile</code> generators   (<code>cmake -G</code> flag). When using other generators, another approach is needed,   based on wrapping the compiler in a script that prepends <code>ccache</code>. See this   article.</li> </ul>"},{"location":"developers/building/cmake-with-ccache/#ensuring-that-ccache-is-used-and-monitoring-cache-hits","title":"Ensuring that <code>ccache</code> is used and monitoring cache hits","text":"<p>The <code>ccache -s</code> command dumps statistics, including a cache hit count and ratio. It's convenient to run periodically with <code>watch</code> in a separate terminal:</p> <pre><code>watch -n 0.1 ccache -s  # update the stats readout every 0.1 seconds\n</code></pre>"},{"location":"developers/building/emscripten/","title":"Building with Emscripten","text":"<p>Emscripten is a complete compiler toolchain to WebAssembly, using LLVM, with a special focus on speed, size, and the Web platform. Emscripten can be used to compile parts of IREE to WebAssembly for execution within web browsers or other Wasm runtimes.</p>","tags":["Web"]},{"location":"developers/building/emscripten/#status","title":"Status","text":"<p>IREE's runtime can be compiled through Emscripten in some limited configurations. More of the runtime will be supported over time.</p> <p>IREE's compiler can be compiled through Emscripten with local changes. More work is needed for this to be generally supported.</p>","tags":["Web"]},{"location":"developers/building/emscripten/#prerequisites","title":"Prerequisites","text":"<p>Read https://emscripten.org/docs/getting_started/downloads.html and run</p> <pre><code>./emsdk install latest\n./emsdk activate latest\nsource ./emsdk_env.sh\n</code></pre>","tags":["Web"]},{"location":"developers/building/emscripten/#building-irees-runtime-with-emscripten","title":"Building IREE's runtime with Emscripten","text":"","tags":["Web"]},{"location":"developers/building/emscripten/#host-configuration","title":"Host configuration","text":"<p>Build and install at least the compiler tools on your host machine, or install them from a binary distribution:</p> <pre><code>$ cmake -G Ninja -B ../iree-build-host/ \\\n    -DCMAKE_C_COMPILER=clang \\\n    -DCMAKE_CXX_COMPILER=clang++ \\\n    -DCMAKE_INSTALL_PREFIX=../iree-build-host/install \\\n    .\n$ cmake --build ../iree-build-host/ --target install\n</code></pre>","tags":["Web"]},{"location":"developers/building/emscripten/#target-configuration","title":"Target configuration","text":"<pre><code>$ emcmake cmake -G Ninja -B ../iree-build-emscripten/ \\\n  -DCMake_BUILD_TYPE=Release \\\n  -DIREE_HOST_BIN_DIR=$(realpath ../iree-build-host/install/bin) \\\n  -DIREE_BUILD_TESTS=OFF \\\n  -DIREE_BUILD_COMPILER=OFF \\\n  .\n</code></pre> <p>Build:</p> <pre><code>cmake --build ../iree-build-emscripten/ \\\n  --target iree_samples_simple_embedding_simple_embedding_vmvx_sync\n</code></pre>","tags":["Web"]},{"location":"developers/building/emscripten/#load-into-a-webassembly-environment","title":"Load into a WebAssembly environment","text":"<p>Copy the outputs from the build process (e.g. <code>simple_embedding_vmvx_sync.js</code> and <code>simple_embedding_vmvx_sync.wasm</code>) into your application and follow instructions at either https://webassembly.org/getting-started/developers-guide/ or https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running.</p>","tags":["Web"]},{"location":"developers/debugging/android-with-lldb/","title":"Android LLDB debugging","text":"<p>This doc shows how to use LLDB to debug native binaries on Android. For a more complete explanation, see the official LLDB documentation on remote debugging.</p>","tags":["Android"]},{"location":"developers/debugging/android-with-lldb/#prerequisites","title":"Prerequisites","text":"<p>We assume the following setup:</p> <ol> <li>Android NDK is installed and    the <code>ANDROID_NDK</code> environment variable is set to the installation path.</li> <li>Your Android device connected and configured for    <code>adb</code>.</li> <li>The Android binary of interest is already compiled and the command to run it    (in <code>adb shell</code>) is <code>&lt;your-binary&gt; [program args...]</code>. This does not have    to be a proper Android app with a manifest, etc.</li> </ol>","tags":["Android"]},{"location":"developers/debugging/android-with-lldb/#running-manually","title":"Running Manually","text":"<ol> <li> <p>Push the toolchain files, including <code>lldb-server</code>, to your device:</p> <pre><code>adb shell \"mkdir -p /data/local/tmp/tools\"\nadb push \"$ANDROID_NDK\"/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/aarch64/* /data/local/tmp/tools\n</code></pre> <p>You may need to adjust the clang toolchain version to match the one in your NDK. You can find it with <code>find \"$ANDROID_NDK/toolchains/llvm/prebuilt\" -name lldb-server</code>.</p> </li> <li> <p>Set up port forwarding. We are going to use port 5039 but you are free to    pick a different one:</p> <pre><code>adb forward tcp:5039 tcp:5039\n</code></pre> </li> <li> <p>Start an <code>lldb-server</code> in a new interactive adb shell:</p> <pre><code>adb shell\n/data/local/tmp/tools/lldb-server platform --listen '*:5039' --server\n</code></pre> </li> <li> <p>Launch <code>lldb</code>, connect to the server and run the binary:</p> <pre><code>lldb -o 'platform select remote-android' \\\n    -o 'platform connect connect://:5039' \\\n    -o 'platform shell cd /data/local/tmp'\ntarget create &lt;your-binary&gt;\nrun [program args...]\n</code></pre> <p>You can either use the system <code>lldb</code> or a prebuilt under <code>\"$ANDROID_NDK\"/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/&lt;your-host-arch&gt;</code>.</p> <p>Explanation: each <code>-o</code> (short for <code>--one-shot</code>) tells lldb to execute a command on startup. You can run those manually in the lldb shell, if you prefer. Then, we tell lldb which working directory to use, where to find the executable, and what command line arguments to use.</p> </li> </ol>","tags":["Android"]},{"location":"developers/debugging/compile-time-regressions/","title":"Compile time regression debugging","text":"<p>So the IREE compiler used to compile a program quickly, but it is now slower. What do you do?</p>"},{"location":"developers/debugging/compile-time-regressions/#initial-information-gathering","title":"Initial information gathering","text":"<p>Try to answer as many of these questions as you can:</p> <p>When did compilation get slower?</p> <p>A specific git commit is ideal, but \"sometime in the last week\" is a good   starting point. You'll ultimately want to find a culprit release or git   commit that changed the compiler code.</p> <p>How much slower did compilation get?</p> <p>Be specific - did it jump from 1 minute to 2 minutes, or 1 minute to 1 hour?   Identifying the scale of the regression can help set the priority to   investigate it.</p> <p>What is the full compile command?</p> <p>Try to extract the input program and full list of flags passed to the   compiler binary so that others can reproduce what you're seeing. Try to   distill this as much as possible to using just native tools (no Python or   other framework layers).</p> <p>What environment is the compiler running in?</p> <p>Are you using a <code>Debug</code> build, or a release build? What operating system and   size machine is running the compiler (e.g. Linux developer machine, or a   smaller system)?</p>"},{"location":"developers/debugging/compile-time-regressions/#culprit-finding-and-bisecting","title":"Culprit finding and bisecting","text":"<p>If you only have a rough idea of when something changed and want to narrow that down to a specific code change, bisecting can help.</p>"},{"location":"developers/debugging/compile-time-regressions/#running-git-bisect","title":"Running <code>git bisect</code>","text":"<p>Building the compiler from source and using <code>git bisect</code> will let you pinpoint specific commits in IREE, though it typically won't let you step through changes in submodules (e.g. MLIR updates in <code>third_party/llvm-project/</code>).</p>"},{"location":"developers/debugging/compile-time-regressions/#scripted-bisecting-with-package-artifacts","title":"Scripted bisecting with package artifacts","text":"<p>See https://github.com/iree-org/iree/tree/main/build_tools/pkgci/bisect.</p>"},{"location":"developers/debugging/compile-time-regressions/#manually-bisecting-with-source-builds","title":"Manually bisecting with source builds","text":"<p>Tip: Configure ccache if you'll be rebuilding the compiler while bisecting</p> <p>A manual workflow with <code>git bisect</code> looks like this:</p> <pre><code>git bisect start --first-parent\ngit bisect good [&lt;rev&gt;]\ngit bisect bad [&lt;rev&gt;]\n\n# Read the prompts from the command as it runs\n# At each step, test the compiler:\n#   git submodule update\n#   cmake --build build/ --target iree-compile\n#   ./build/tools/iree-compile &lt;args&gt;\n#       attach Tracy, observe timing, print IR, etc. to determine if fast or slow\n#       if fast, `git bisect good`\n#       if slow, `git bisect bad`\n#   repeat\n</code></pre> <p>An automated workflow can use <code>git bisect run</code> and a script:</p> run_bisect.sh<pre><code>git submodule update\ncmake --build build/ --target iree-compile\n# Other logic here\n</code></pre> <pre><code>git bisect start --first-parent\ngit bisect good [&lt;rev&gt;]\ngit bisect bad [&lt;rev&gt;]\ngit bisect run run_bisect.sh\n</code></pre>"},{"location":"developers/debugging/compile-time-regressions/#sample-compile-executable-sources-individually-with-a-timeout","title":"Sample: compile executable sources individually with a timeout","text":"run_bisect.sh<pre><code>#!/bin/bash\n\nset -xeuo pipefail\n\n# --------------------------------------------------------------------------- #\n# Settings                                                                    #\n# --------------------------------------------------------------------------- #\n\nINPUT_FILE_PATH=\"/path/to/program.mlirbc\"\nTMP_DIR=\"../iree-tmp\"\n\ndeclare -a COMPILER_FLAGS=(\n  \"--iree-input-type=stablehlo\"\n  \"--iree-hal-target-device=cuda\"\n  \"--iree-cuda-target=sm_80\"\n)\n\nTIMEOUT_SECONDS_FOR_COMPILING_EACH_SOURCE=10\n\n# --------------------------------------------------------------------------- #\n# Utility functions                                                           #\n# --------------------------------------------------------------------------- #\n\n# Call to have `git bisect` skip this commit (don't mark as good _or_ bad)\n# https://git-scm.com/docs/git-bisect#_bisect_run\nskip_on_error() {\n  &gt;&amp;2 echo \"** Skipping due to error: $1 **\"\n  exit 125  # Special exit code for `git bisect skip`\n}\n\n# --------------------------------------------------------------------------- #\n# Main script                                                                 #\n# --------------------------------------------------------------------------- #\n\n# Store git version hash, so we can dump artifacts to unique directories later.\nGIT_SHA=\"$(git rev-parse --short HEAD)\"\n\necho \"** Building iree-compile at ${GIT_SHA} **\"\n\n# The `git bisect` command only checks out a commit, so update submodules.\ngit submodule update\n\n# Build the compiler. You'll want ccache configured to make this fast!\ncmake --build ../iree-build/ --target iree-compile || skip_on_error \"CMake build failed\"\n\n# Run the compiler, dumping executable sources and stopping.\nSOURCES_DIR=\"${TMP_DIR}/sources-${GIT_SHA}\"\necho \"** Running iree-compile at ${GIT_SHA}, dumping sources to ${SOURCES_DIR} **\"\n../iree-build/tools/iree-compile \\\n    ${INPUT_FILE_PATH} \\\n    ${COMPILER_FLAGS[@]} \\\n    --iree-hal-dump-executable-sources-to=${SOURCES_DIR} \\\n    --compile-to=executable-sources \\\n    -o /dev/null\n\n# Run the compiler again on each executable individually.\necho \"** Running iree-compile at ${GIT_SHA} for each executable source **\"\nSOURCES=($(ls -1 ${SOURCES_DIR}))\nfor SOURCE in \"${SOURCES[@]}\"; do\n  echo \"  * Compiling: ${SOURCE} *\"\n  timeout --verbose ${TIMEOUT_SECONDS_FOR_COMPILING_EACH_SOURCE} \\\n   ../iree-build/tools/iree-compile ${SOURCES_DIR}/${SOURCE} \\\n    ${COMPILER_FLAGS[@]} \\\n    --compile-mode=hal-executable \\\n    -o /dev/null\ndone\n</code></pre>"},{"location":"developers/debugging/compile-time-regressions/#profiling-and-tracing","title":"Profiling and tracing","text":"<p>If you want to understand why the compiler is fast or slow, or if you want to compare performance in detail between two versions, consider these profiling options.</p>"},{"location":"developers/debugging/compile-time-regressions/#mlir-pass-timing","title":"MLIR pass timing","text":"<p>The <code>-mlir-timing</code> flag enables Pass Timing instrumentation. Once the compiler finishes running, this prints a report like</p> <pre><code>===-------------------------------------------------------------------------===\n                      ... Pass execution timing report ...\n===-------------------------------------------------------------------------===\n  Total Execution Time: 0.0203 seconds\n\n   ---Wall Time---  --- Name ---\n   0.0047 ( 55.9%)  Canonicalizer\n   0.0019 ( 22.2%)  VerifierPass\n   0.0016 ( 18.5%)  LLVMLoweringPass\n   0.0003 (  3.4%)  CSE\n   0.0002 (  1.9%)  (A) DominanceInfo\n   0.0084 (100.0%)  Total\n</code></pre> <p>This is easy data to collect, especially remotely over SSH, but it might not paint a complete picture and requires waiting for compilation to finish.</p>"},{"location":"developers/debugging/compile-time-regressions/#using-tracy","title":"Using Tracy","text":"<p>See our documentation on profiling with Tracy, in particular the section on tracing <code>iree-compile</code>. For compile time regressions, pay particular attention to the compilation phases (Flow/Stream/HAL), how many times <code>TranslateAllExecutablesPass</code> runs, and if there are outlier passes that take significantly longer to run than others.</p> <p>Here are some previous analyses for inspiration:</p> <ul> <li>https://github.com/iree-org/iree/issues/12033</li> <li>https://github.com/iree-org/iree/issues/12035</li> <li>https://github.com/iree-org/iree/issues/12183</li> <li>https://github.com/iree-org/iree/issues/13189</li> </ul> <p>Example slow trace:</p> <p></p> <p>Example fast trace:</p> <p></p> <p>Example sampling statistics showing 10s of minutes in LLVM codegen:</p> <p></p>"},{"location":"developers/debugging/compile-time-regressions/#using-perf-and-pprof","title":"Using <code>perf</code> and <code>pprof</code>","text":"<p>These linux tools allow for fine-grained profiling. Below we present a list of steps to profile <code>iree-compile</code> and visualize the results as a flame graph.</p> <ol> <li> <p>Compile IREE tools with debug information (line tables at minimum) and frame    pointers. You can do that by selecting the <code>RelWithDebInfo</code> build type and    adding <code>-fno-omit-frame-pointers</code> to your compiler flags:</p> <pre><code>cmake &lt;Your-CMAKE-Flags&gt; \\\n   -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n   -DCMAKE_CXX_FLAGS=\"-fno-omit-frame-pointer\" \\\n   -DCMAKE_C_FLAGS=\"-fno-omit-frame-pointer\"\n</code></pre> </li> <li> <p>Set perf event scope/access to the appropriate level with    <code>perf_event_paranoid</code>.</p> <pre><code>echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid\n</code></pre> </li> <li> <p>Run <code>iree-compile</code> under the <code>perf</code> profiler and collect profile data. This    requires <code>sudo</code>.</p> <pre><code>sudo perf record -F 999 -g -- tools/iree-compile &lt;Your-Compile-Arguments&gt;\nsudo chown \"$USER:$USER\" perf.data\n</code></pre> </li> <li> <p>Use <code>pprof</code> to process <code>perf.data</code> from the previous step and start a local    http server with the visualized profile. See the    <code>pprof</code>'s README for installation    instructions and make sure to build    <code>perf_data_converter</code> and    add it to your <code>PATH</code>.</p> <pre><code>pprof -http ':' perf.data\n</code></pre> </li> </ol>"},{"location":"developers/debugging/compile-time-regressions/#stepping-through-compiler-ir","title":"Stepping through compiler IR","text":"<p>Debugging an MLIR-based compiler like IREE usually involves reading IR at some point. For compile time regressions, it helps to snapshot the IR at a few key phases and look for differences between fast compilation and slow compilation.</p> <p>Here is one useful flag combination:</p> <pre><code>--mlir-disable-threading \\\n--mlir-elide-elementsattrs-if-larger=8 \\\n--mlir-print-ir-after=iree-hal-materialize-interfaces\n</code></pre>"},{"location":"developers/debugging/gpu/","title":"GPU debugging playbook","text":"<p>This page aims to provide general approaches and practical tips for debugging GPU compiler/runtime correctness/performance issues in IREE.</p> <p>GPUs fundamentally have similar architectures and software stacks. We target GPUs from various vendors using different GPU APIs, but they share quite a lot common infrastructure in IREE. So the approaches and tips here should be widely applicable.</p> <p>For the ones that are specific to a particular kind of problem/component/GPU, they are prefixed with proper icons to be clear. Here are what those icons represents--</p> Icon Category Correctness Performance AMD HIP/ROCm Apple Metal :simple-microsoft: Microsoft DirectX NVIDIA CUDA Vulkan","tags":["GPU","CUDA","Metal","ROCm","Vulkan"]},{"location":"developers/debugging/gpu/#general-methodology","title":"General methodology","text":"<p>The difficulties associated with debugging typically arise from isolating the problematic component and pinpointing the culprit. Once done, the solution typically derives naturally.</p> <p>There are many components in the IREE stack; hierarchically we can categorize them into either the compiler or runtime bucket:</p> <ul> <li>For compilers, there are multiple layers from the top to the bottom--frontend   input importers, IREE flow/stream compilation, IREE host/device compilation,   GPU backend in LLVM proper or GPU driver compiler for SPIR-V.</li> <li>For runtime, we have fewer layers--IREE HAL drivers, and GPU driver.</li> </ul> <p>Any of the above components/layers can have bugs. It's important to reduce the potential surface area to make the problem more tractable.</p> <p>Once we have a more isolated case, the general methodology to pinpoint the exact culprit is to</p> <ol> <li>collect and inspect the symptoms,</li> <li>form hypothesis and run experiments to prove/refute the hypothesis, and</li> <li>iterate.</li> </ol>","tags":["GPU","CUDA","Metal","ROCm","Vulkan"]},{"location":"developers/debugging/gpu/#with-shortcuts","title":".. with shortcuts","text":"<p>The above procedure is for facing a large problem with no clue, for example, when bringing up a new model end-to-end via IREE.</p> <p>Though most of the time, we can leverage existing facilities to avoid going down the full top-down hiearchical debugging procedure. For example, for regression happening on an existing model, CI or <code>git bitsect</code> might tell us directly the culprit commit.</p>","tags":["GPU","CUDA","Metal","ROCm","Vulkan"]},{"location":"developers/debugging/gpu/#using-tools","title":".. using tools","text":"<p>For issues with strong signals like crashing, it's also easier to pinpoint the exact culprit with dedicated tools--we can leverage various sanitizers or debuggers.</p>","tags":["GPU","CUDA","Metal","ROCm","Vulkan"]},{"location":"developers/debugging/gpu/#isolating-the-problematic-component","title":"Isolating the problematic component","text":"<p>If we are facing a large problem without a clear clue, we need to isolate the problematic compiler or runtime layer first, typically by comparing with a working solution:</p> <p>[correctness/performance]</p> <p>Sanitize the environment first. Asking these questions and making sure the environment is proper can save you hours of debugging sometimes:</p> <ul> <li>Did you recently updated the GPU SDK or driver?</li> <li>Are others able to reproduce the issue?</li> <li>If not what SDK / driver versions they are using?</li> <li>Is your machine drawing enough power when benchmarking?</li> <li>Is your machine connected with a monitor (e.g., for Vulkan)?</li> <li>How long since you last rebooted your machine? \ud83d\udc7b</li> <li>(Windows only) Did you change the <code>TdrDelay</code> value to something more lenient (e.g., 600 seconds)?   <code>TdrDelay</code> (<code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\GraphicsDrivers</code>) is   the timeout for a response to a preempt request from the GPU scheduler.   A large enough computation can outlive the default value of 2 seconds, leading to a GPU reset.</li> </ul> <p>[correctness/performance]</p> <p>We have multiple GPU targets/drivers in IREE--LLVMGPU/CUDA, LLVMGPU/HIP, SPIR-V/Vulkan, SPIR-V/Metal.</p> <p>For the same GPU, we typically have two paths to target, e.g., CUDA/HIP or Vulkan for NVIDIA/AMD GPUs, Metal or Vulkan for Apple GPUs.</p> <p>If one path is correct/performant, we can diff against it to try isolate the problem--the common/shared compiler/runtime code is likely okay; what differs between paths is likely problematic.</p> <p>[correctness/performance] [vulkan]</p> <p>Vulkan supports different GPUs. Similarly, if one GPU gives correct/performant result, we diff against it to find clues.</p> <p>Even more code in compiler/runtime are shared here; what's problematic is likely different capabilities triggering different CodeGen pipelines so revealing bugs in a particular CodeGen pipeline. Or there are driver issues from a particular vendor.</p> <p>[correctness]</p> <p>If the CPU is working properly, we can use the same dispatch region formation and diff against the CPU dispatches one by one to isolate the problem. See this issue as an example.</p> <p>[correctness]</p> <p><code>--iree-flow-trace-dispatch-tensors</code> and/or <code>--iree-flow-break-dispatch=</code> to <code>iree-compile</code> is quite helpful to inspect the output after all/each dispatch(es).</p> <p>[correctness]</p> <p><code>iree-reduce</code> is a great tool to reduce and isolate issues programmatically. See more details here.</p>","tags":["GPU","CUDA","Metal","ROCm","Vulkan"]},{"location":"developers/debugging/gpu/#pinpointing-compiler-issues","title":"Pinpointing compiler issues","text":"<p>Once we identified that the problem is due to some compiler issue, we can investigate by comparing with different paths and inputs:</p> <p>[correctness]</p> <p>For the same dispatch, we may have different CodeGen pipelines, e.g., for matmul we can have simple SIMT pipeline or using tensor/matrix cores. We can try to switch between different pipelines to isolate the problem.</p> <p>[correctness]</p> <p>Assuming we have a small repro, we can also try to see if there are \"patterns\" in the wrong result (e.g., this issue). Or mutate the input to see if the failure has some \"consistency\".</p> <p>[correctness/performance]</p> <p><code>--mlir-print-ir-*</code> and <code>--debug*</code> to <code>iree-opt</code> is our best friend. Sometimes it just takes eyeballing the IRs between stages to find clues.</p> <p>[performance]</p> <p>For identifying performance issues, we typically need to use:</p> <ul> <li>Tracy profiling to get a   course-grained command-buffer timing to understand what's the most   time-consuming kernels.   Typical big performance issues include but not limit to going down a   incorrect CodeGen pipeline, missing tiling/vectorization, having an   improper tiling/vectorization configuration, and so on.   If the course-grained information is not enough, then we need to</li> <li>vendor-specific tools to   understand kernel internal counters to identify the bottleneck.</li> </ul>","tags":["GPU","CUDA","Metal","ROCm","Vulkan"]},{"location":"developers/debugging/gpu/#pinpointing-runtime-issues","title":"Pinpointing runtime issues","text":"<p>On the other side, if we suspect that it's a runtime issue, here are some useful approachs and tips:</p> <p>[correctness/performance]</p> <p>Tracy profiling is a great way to view how the application runs dynamically. It can help to show problematic GPU API call sequences and performance bottlenecks.</p> <ul> <li>It requires adding <code>-DIREE_ENABLE_RUNTIME_TRACING=ON</code> during CMake   configuration, or use the <code>IREE_PY_RUNTIME=tracy</code> environment variable   when invoking IREE runtime installed via Python packages.</li> </ul> <p>[correctness]</p> <p>GPU validation can sometimes give us hints:</p> <ul> <li>[] Enable validation via <code>export METAL_DEVICE_WRAPPER_TYPE=1</code>.</li> <li>[] Use <code>--vulkan_validation_layers=true</code> to <code>iree-run-module</code>, or</li> <li>[] Force enable via environment variables to the Vulkan loader:   <code>export VK_INSTANCE_LAYERS=VK_LAYER_LUNARG_standard_validation</code>   (may additionally need   <code>export VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/explicit_layer.d</code> and   <code>export LD_LIBRARY_PATH=$VULKAN_SDK/lib</code> if Vulkan SDK is not installed   to a system path).</li> </ul> <p>[correctness]</p> <p>Turning on verbose output can give us more information:</p> <ul> <li>When compiling IREE runtime, add   <code>-DCMAKE_C_FLAGS=-DIREE_VM_EXECUTION_TRACING_FORCE_ENABLE=1</code> in CMake   configuration to enable VM op tracing.</li> <li>[] Use <code>--vulkan_debug_verbosity=4</code> to <code>iree-run-module</code>.</li> <li>[] Print all Vulkan APIs calls with detailed arguments:   <code>export VK_INSTANCE_LAYERS=VK_LAYER_LUNARG_api_dump</code>   (may additionally need   <code>export VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/explicit_layer.d</code> and   <code>export LD_LIBRARY_PATH=$VULKAN_SDK/lib</code> if Vulkan SDK is not installed   to a system path).</li> </ul> <p>[correctness]</p> <p>Try different \"debugging modes\" provided by HAL drivers:</p> <ul> <li>[] Switch <code>--cuda_use_streams=</code> between <code>true</code> and <code>false</code> to   <code>iree-run-module</code> to see whether the issue comes from the stream/graph   command buffer implementation.</li> <li>[] Switch <code>--cuda_async_allocations=false</code> to <code>iree-run-module</code> to   see if the issue comes from async allocation.</li> <li>[] Use <code>--metal_serial_command_dispatch=true</code>,   <code>--metal_command_buffer_retain_resources=true</code>, or   <code>--metal_resource_hazard_tracking=true</code> to <code>iree-run-module</code> to see   if any of the above \"fixes\" the issue.   It can help to isolate the pontential problem.</li> <li>[] Use <code>--vulkan_robust_buffer_access=true</code> to <code>iree-run-module</code>   especially when seeing undeterministic/corrupted contents in buffers and   suspecting there are buffer allocation/indexing issues.</li> </ul>","tags":["GPU","CUDA","Metal","ROCm","Vulkan"]},{"location":"developers/debugging/integration-tests/","title":"Integration test debugging","text":"<p>This document includes tips for triaging integration test correctness issues. Feel free to reach out to @hanhanW or ask questions on Discord for more help.</p>"},{"location":"developers/debugging/integration-tests/#general-tips","title":"General tips","text":""},{"location":"developers/debugging/integration-tests/#narrow-down-reproducers","title":"Narrow down reproducers","text":"<ul> <li>Models themselves can be large, and IREE breaks models into dispatches/kernels and then launches those individually. Program outputs could diverge starting from any individual launch. To get a smaller reproducer, you can use --iree-flow-trace-dispatch-tensors.</li> <li>You can compare the logs between builds/backends to get an idea about which dispatch results in wrong outputs. The dumped inputs can be reused in a flagfile.</li> </ul> <p>Once a suspicious dispatch is identified, we can create a test case based on the dispatch function. The dispatch function can be derived after the <code>OutlineDispatchRegions</code> pass. The function signatures have to be modified manually. You'll have to put <code>iree_tensor_ext.dispatch.tensor.load</code> variables to function arguments, and replace <code>iree_tensor_ext.dispatch.tensor.store</code> with <code>return</code> op.</p> <p>Note: This only works when dispatch formation logics are identical between runs.</p>"},{"location":"developers/debugging/integration-tests/#iree-experimental-repository-tests","title":"iree-experimental repository tests","text":"<p>Follow README to run the model. The MLIR files will be generated. You'll find the saved file from log. E.g.,</p> <pre><code>[ RUN      ] MobilenetV2Int8Test.test_compile_tflite\nI0401 17:27:04.084272 140182373025024 test_util.py:119] Setting up for IREE\nI0401 17:27:04.085064 140182373025024 binaries.py:218] Invoke IREE Pipeline:\n  /tmp/iree-experimental/iree-experimental.venv/lib/python3.9/site-packages/iree/tools/tflite/iree-import-tflite\n    /tmp/iree-experimental/tflitehub/tmp/mobilenet_v2_int8_test.py/model.tflite\n    --mlir-print-debuginfo\n    --save-temp-tfl-input=/tmp/iree-experimental/tflitehub/tmp/mobilenet_v2_int8_test.py/tflite.mlir\n    --save-temp-iree-input=/tmp/iree-experimental/tflitehub/tmp/mobilenet_v2_int8_test.py/tosa.mlir\n</code></pre> <p>Unfortunately, the artifacts are not dumped in the runs. There is an issue for tracking this. A workaround can be found in the issue.</p>"},{"location":"developers/debugging/integration-tests/#tensorflow-integration-tests","title":"TensorFlow integration tests","text":"<p>These are steps to reproduce/address failures in TF/TFLite integration tests. These instructions are most stable on Linux, though they may work with a few tweaks on Windows and macOS.</p> <p>All steps here assume starting from the IREE root directory.</p> <ol> <li> <p>First create a Python virtual environment to install packages into:</p> <pre><code>python -m venv iree-tf.venv\nsource iree-tf.venv/bin/activate\n\n# Install test requirements\npython -m pip install -r ./integrations/tensorflow/test/requirements.txt\n</code></pre> </li> <li> <p>Install IREE's tools and Python bindings or build them from source</p> <p>Install distributed packages</p> <pre><code># Install packages from nightly pre-releases\n# This should work for most cases, as the importers change infrequently\npython -m pip install --pre \\\n  iree-base-compiler iree-base-runtime iree-tools-tf iree-tools-tflite \\\n  --find-links https://iree.dev/pip-release-links.html\n</code></pre> <p>OR build from source</p> <pre><code># Build Python bindings from source\ncmake -G Ninja -B ../iree-build/ -DIREE_BUILD_PYTHON_BINDINGS=ON .\ncmake --build ../iree-build/\n\n# Add IREE built-from-source Python packages to PYTHONPATH\nsource .env\n\n# Install IREE TF/TFLite Python packages\npython -m pip install integrations/tensorflow/python_projects/iree_tf\npython -m pip install integrations/tensorflow/python_projects/iree_tflite\n</code></pre> </li> <li> <p>Run the python test command line</p> <p>The command can be obtained from the run file. For example, if <code>iree_tfl_tests/llvmcpu_posenet_i8.run</code> failed,</p> <pre><code>cd integrations/tensorflow/test/\ncat iree_tfl_tests/llvmcpu_posenet_i8.run\n\n# REQUIRES: llvmcpu\n# RUN: %PYTHON -m iree_tfl_tests.posenet_i8_test --target_backend=llvmcpu --artifacts_dir=%t\n\ncd python/\npython -m iree_tfl_tests.posenet_i8_test --target_backend=llvmcpu --artifacts_dir=/tmp/posenet_i8_failure\n</code></pre> <p>Note that the command can only be run under <code>integrations/tensorflow/test/python</code> directory.</p> </li> <li> <p>Extract intermediate files and use with native tools</p> <p>The test will create an <code>iree_input.mlir</code> in the temp directory specified. Those can then be fed into <code>iree-compile</code> (built locally to reproduce the error)</p> <pre><code>iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-input-type=stablehlo \\\n  iree_input.mlir\n</code></pre> </li> </ol>"},{"location":"developers/debugging/model-development/","title":"Model development debugging","text":"<p>Bringing up new models or diagnosing regressions in existing models written using one of IREE's supported ML frameworks or downstream projects like shark-ai can involve debugging up and down the tech stack. Here are some tips to make that process easier.</p>"},{"location":"developers/debugging/model-development/#helpful-build-settings","title":"Helpful build settings","text":""},{"location":"developers/debugging/model-development/#use-a-debug-build","title":"Use a debug build","text":"<p>Build with <code>-DCMAKE_BUILD_TYPE=Debug</code> or <code>-DCMAKE_BUILD_TYPE=RelWithDebInfo</code> to include debug information in binaries you build.</p>"},{"location":"developers/debugging/model-development/#enable-assertions","title":"Enable assertions","text":"<p>Build with <code>-DIREE_ENABLE_ASSERTIONS=ON</code> to ensure that asserts in compiler and runtime code are included in your program binaries. If an assert is missed and the program compiles anyways, the output should not be trusted. The compiler must not crash on valid input programs, so assert failures should be fixed and not worked around.</p> <p>Note: release builds and some CI jobs may not have asserts enabled!</p>"},{"location":"developers/debugging/model-development/#run-using-sanitizers-asantsanubsan","title":"Run using sanitizers (ASan/TSan/UBSan)","text":"<p>Building and running using sanitizers can catch memory usage issues (ASan), thread synchronization issues (TSan), and undefined behavior (UBSan).</p>"},{"location":"developers/debugging/model-development/#helpful-compiler-and-runtime-flags","title":"Helpful compiler and runtime flags","text":""},{"location":"developers/debugging/model-development/#vm-execution-tracing","title":"VM execution tracing","text":"<p>The <code>--trace_execution</code> flag to runtime tools like <code>iree-run-module</code> will print each VM instruction as it is executed. This can help with associating other logs and system behavior with the compiled VM program.</p>"},{"location":"developers/debugging/model-development/#tensor-tracing","title":"Tensor tracing","text":"<ul> <li>The <code>--iree-flow-trace-dispatch-tensors</code> flag to <code>iree-compile</code> inserts   trace markers for all dispatch operation tensor inputs and outputs. This lets   you see tensor contents change as the program runs.</li> <li>The <code>--iree-flow-break-dispatch</code> flag to <code>iree-compile</code> inserts breaks after   a specified dispatch, allowing early termination of the program and shorter   logs when focusing debugging around a specific dispatch</li> </ul>"},{"location":"developers/debugging/model-development/#executable-substitution","title":"Executable substitution","text":"<p>Executable sources can be dumped, edited, and then loaded back into a program using <code>--iree-hal-dump-executable-sources-to</code> and <code>--iree-hal-substitute-executable-source</code>. This can be used for performace tuning or for debugging (e.g. by replacing a complicated dispatch with a simpler one).</p> <p>See https://github.com/iree-org/iree/pull/12240 for examples.</p>"},{"location":"developers/debugging/model-development/#alternate-perspectives","title":"Alternate perspectives","text":""},{"location":"developers/debugging/model-development/#try-using-other-data-types","title":"Try using other data types","text":"<p>Nearly all targets support the <code>i32</code> and <code>f32</code> data types well, while higher and lower bit depth types and more esoteric types like <code>bf16</code> and <code>complex</code> may be supported partially or not at all on some targets.</p> <p>If a program fails to compile or produces incorrect outputs, consider checking if the program works after converting to other data types.</p> <p>Tip</p> <p>These compiler options automatically convert between several types on import:</p> <ul> <li><code>--iree-input-demote-i64-to-i32</code></li> <li><code>--iree-input-demote-f32-to-f16</code></li> <li><code>--iree-input-demote-f64-to-f32</code></li> <li><code>--iree-input-promote-f16-to-f32</code></li> <li><code>--iree-input-promote-bf16-to-f32</code></li> </ul> <p>If using <code>iree-run-module --input=@path/to/input_values.npy</code>, consider also using <code>.bin</code> binary files instead of <code>.npy</code> numpy files, since IREE supports different types than numpy and signedness information is lost at that level.</p>"},{"location":"developers/debugging/model-development/#try-using-other-targets-devices","title":"Try using other targets / devices","text":"<p>Large parts of IREE's compilation pipelines and runtime libraries are shared between compiler target backends and runtime HAL devices/drivers. If a program works in one configuration but fails in another, that indicates an issue or missing functionality in the failing configuration.</p> <p>Some configurations also offer unique debugging functionality:</p> Compiler target Runtime device Notable properties for debugging <code>vmvx</code> <code>local-sync</code> Easy to step into generated code, limited type support <code>llvm-cpu</code> <code>local-sync</code> Single-threaded, broad type support <code>llvm-cpu</code> <code>local-task</code> Multi-threaded, broad type support <code>vulkan-spirv</code> <code>vulkan</code> Compatible with Renderdoc (docs here) <code>cuda</code> <code>cuda</code> Compatible with NVIDIA Nsight Graphics <code>rocm</code> <code>hip</code> Compatible with Omniperf <code>metal-spirv</code> <code>metal</code> Compatible with the Metal Debugger <p>Tip</p> <p>See the deployment configurations pages for more information about each backend and device.</p>"},{"location":"developers/debugging/model-development/#run-natively-and-via-python-bindings","title":"Run natively and via Python bindings","text":"<p>Some problems manifest only when running through the Python (or some other language/framework) bindings. The Python bindings have some non-trivial interop and memory management across the C/C++/Python boundary.</p> <p>Try extracting standalone <code>.mlir</code> files, compiling through <code>iree-compile</code>, then running through <code>iree-run-module</code>. Extracting these artifacts can also help other developers follow your reproduction steps.</p>"},{"location":"developers/debugging/model-development/#reducing-complexity","title":"Reducing complexity","text":""},{"location":"developers/debugging/model-development/#top-down-reduction","title":"Top-down reduction","text":"<p>Starting from a full program, try to reduce the program size and complexity while keeping the issue you are debugging present. This can be either a manual process or the <code>iree-reduce</code> tool can automate it. For manual reduction, here are some general strategies:</p> <ul> <li>Reduce tensor sizes (e.g. image dimensions, context lengths) in your ML   framework</li> <li>Cut out duplicate layers (e.g. attention blocks in LLMs)</li> <li>If your program has multiple functions, test each in isolation</li> </ul>"},{"location":"developers/debugging/model-development/#bottom-up-reduction","title":"Bottom-up reduction","text":"<p>Consider writing unit tests for individual ops or combinations of ops to see if crashes, bugs, numerical issues, etc. can be reproduced at that scale.</p> <p>Some existing test suites can be found at these locations:</p> <ul> <li>https://github.com/iree-org/iree/tree/main/tests/e2e</li> <li>https://github.com/iree-org/iree-test-suites</li> <li>https://github.com/nod-ai/SHARK-TestSuite/tree/main/e2eshark/onnx/operators</li> <li>https://github.com/nod-ai/SHARK-TestSuite/tree/main/e2eshark/pytorch/operators</li> <li>https://github.com/openxla/stablehlo/tree/main/stablehlo/tests/interpret</li> </ul>"},{"location":"developers/debugging/releases/","title":"Release debugging playbook","text":""},{"location":"developers/debugging/releases/#tools-and-locations","title":"Tools and Locations","text":"<ul> <li><code>.github/workflows/build_package.yml</code>:   Release packaging jobs</li> <li><code>build_tools/github_actions/build_dist.py</code>:   Main script to build various release packages (for all platforms). We usually   use this when reproing to approximate exactly what the CI does. Assumes a   subdirectory of <code>c</code> and writes builds to <code>iree-build</code> and <code>iree-install</code> as a   peer of it. To use locally, just symlink your source dir as <code>c</code> in an empty   directory (versus checking out).</li> </ul>"},{"location":"developers/debugging/releases/#mapping-releases-back-to-git-commits","title":"Mapping releases back to git commits","text":"<p>The source IREE commit SHA is embeded into pip releases in a few places. Starting in a python venv, you can find the IREE commit from both the shell:</p> <pre><code>\"$(find . -name 'iree-compile' -executable)\" --version\nIREE (https://iree.dev):\n  IREE compiler version 20231016.553 @ f1cb2692a086738d7f16274b9b3af6d2c15ef133\n  LLVM version 18.0.0git\n  Optimized build\n</code></pre> <p>and the Python API:</p> <pre><code>python -c \"import iree.compiler.version as v; print(v.REVISIONS['IREE'])\"\nf1cb2692a086738d7f16274b9b3af6d2c15ef133\n</code></pre>"},{"location":"developers/debugging/releases/#manylinux-releases","title":"Manylinux releases","text":"<p>The Linux releases are done in a manylinux2014 docker container defined in the <code>manylinux_x86_64.Dockerfile</code> file within the iree-org/base-docker-images repository. At the time of this writing, it has gcc 9.3.1 and Python versions 3.5 - 3.9 under <code>/opt/python</code>. Note that this docker image approximates a 2014 era RHEL distro, patched with backported (newer) dev packages. It builds with gcc and BFD linker unless if you arrange otherwise. <code>yum</code> can be used to get some packages.</p> <p>Get a docker shell (see exact docker image in build_package.yml workflow):</p> <pre><code>docker run --rm -it -v $(pwd):/work/c ghcr.io/iree-org/manylinux_x86_64:main /bin/bash\n</code></pre> <p>Remember that docker runs as root unless if you take steps otherwise. Don't touch write files in the <code>/work/c</code> directory to avoid scattering root owned files on your workstation.</p> <p>The default system Python is 2.x, so you must select one of the more modern ones:</p> <pre><code>export PATH=/opt/python/cp39-cp39/bin:$PATH\n</code></pre> <p>Build core installation:</p> <pre><code># (from within docker)\ncd /work\npython ./c/build_tools/github_actions/build_dist.py main-dist\n\n# Also supports:\n#   main-dist\n#   py-runtime-pkg\n#   py-xla-compiler-tools-pkg\n#   py-tflite-compiler-tools-pkg\n#   py-tf-compiler-tools-pkg\n</code></pre> <p>You can <code>git bisect</code> on the host and keep running the above in the docker container. Note that every time you run <code>build_dist.py</code>, it deletes the cmake cache but otherwise leaves the build directory (so it pays the configure cost but is otherwise incremental). You can just <code>cd iree-build</code> and run <code>ninja</code> for faster iteration (after the first build or if changing cmake flags). Example:</p> <p>Extended debugging in the manylinux container:</p> <pre><code>cd /work/iree-build\n# If doing extended debugging in the container, these may make you happier.\nyum install ccache devtoolset-9-libasan-devel gdb\n\n# Get an LLVM symbolizer.\nyum install llvm9.0\nln -s /usr/bin/llvm-symbolizer-9.0 /usr/bin/llvm-symbolizer\n\n# You can manipulate cmake flags. These may get you a better debug experience.\ncmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DIREE_ENABLE_ASAN=ON -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache .\n\nninja\n\n# Or you may need this if buggy LLVM tools (like mlir-tblgen) are leaking :(\nASAN_OPTIONS=\"detect_leaks=0\" ninja\n</code></pre> <p>Other tips:</p> <ul> <li>If debugging the runtime, you may have a better time just building the   Release mode <code>main-dist</code> package above once, which will drop binaries in the   <code>iree-install</code> directory. Then build the <code>py-runtime-pkg</code> or equiv and   iterate further in the build directory. Ditto for TF/XLA/etc.</li> </ul>"},{"location":"developers/debugging/releases/#testing-releases-on-your-fork","title":"Testing releases on your fork","text":"<p>To avoid interrupting the regular releases published on the IREE github, you can test any changes to the release process on your own fork.  Some setup is required before these github actions will work on your fork and development branch.</p> <p>You can run <code>schedule_candidate_release.yml</code> with a workflow dispatch from the actions tab. If you want to test using a commit other than the latest green on your <code>main</code> branch, modify the section that identifies the latest green commit to search from another commit or just hardcode one.</p> <p>To speed up <code>build_package.yml</code>, you may want to comment out some of the builds here. The <code>py-pure-pkgs</code> build takes only ~2 minutes and the <code>py-runtime-pkg</code> build takes ~5, while the others can take several hours.</p> <p>From your development branch, you can manually run the Schedule Snapshot Release action, which invokes the Build Release Packages action, which finally invokes the Validate and Publish Release action.  If you already have a draft release and know the release id, package version, and run ID from a previous Build Release Packages run, you can also manually run just the Validate and Publish Release action.</p>"},{"location":"developers/debugging/sanitizers/","title":"Sanitizers (ASan/MSan/TSan)","text":"<p>AddressSanitizer, MemorySanitizer and ThreadSanitizer are tools provided by <code>clang</code> to detect certain classes of errors in C/C++ programs. They consist of compiler instrumentation (so your program's executable code is modified) and runtime libraries (so e.g. the <code>malloc</code> function may get replaced).</p> <p>They are abbreviated as \"ASan\", \"MSan\" and \"TSan\" respectively.</p> <p>They all incur large overhead, so only enable them while debugging.</p> Tool Detects Helps debug what? Slowdown Memory overhead Android support ASan Out-of-bounds accesses, use-after-free, use-after-return, memory leaks Crashes, non-deterministic results, memory leaks 2x 3x Yes MSan Uninitialized memory reads Non-deterministic results 3x ? Yes TSan Data races Many bugs in multi-thread code 5x-15x 5x-10x No <p>Note</p> <p>See this documentation on leak detection. It is only enabled by default on some platforms.</p>"},{"location":"developers/debugging/sanitizers/#support-status-and-how-to-enable-each-sanitizer","title":"Support status and how to enable each sanitizer","text":""},{"location":"developers/debugging/sanitizers/#asan-addresssanitizer","title":"ASan (AddressSanitizer)","text":"<p>To enable ASan:</p> <pre><code>cmake -DIREE_ENABLE_ASAN=ON ...\n</code></pre> <p>Several <code>_asan</code> tests like <code>iree/tests/e2e/stablehlo_ops/check_llvm-cpu_local-task_asan_abs.mlir</code> are also defined when using this configuration. These tests include AddressSanitizer in compiled CPU code as well by using these <code>iree-compile</code> flags:</p> <pre><code>--iree-llvmcpu-link-embedded=false\n--iree-llvmcpu-sanitize=address\n</code></pre>"},{"location":"developers/debugging/sanitizers/#linking-to-the-dynamic-asan-runtime","title":"Linking to the dynamic ASan runtime","text":"<p>You may want to use ASan when using the python bindings. One way to achieve this is to build Python (or whatever executable that is going to use IREE as a shared library) with Asan. Another option is to link to the ASan runtime dynamically instead of linking it statically into an executable.</p> <p>Using clang-12 (other versions should also work) as a example, configure IREE with something like:</p> <pre><code>cmake \\\n  -DIREE_ENABLE_ASAN=ON \\\n  -DCMAKE_EXE_LINKER_FLAGS=-shared-libasan \\\n  -DCMAKE_SHARED_LINKER_FLAGS=-shared-libasan \\\n  -DCMAKE_C_COMPILER=clang-12 \\\n  -DCMAKE_CXX_COMPILER=clang++-12 \\\n  ...\n</code></pre> <p>Then when running things the ASan runtime will have to be preloaded.</p> <pre><code>LD_PRELOAD=/usr/lib/llvm-12/lib/clang/12.0.0/lib/linux/libclang_rt.asan-x86_64.so \\\nASAN_SYMBOLIZER_PATH=/usr/lib/llvm-12/bin/llvm-symbolizer \\\n  python ...\n</code></pre> <p>On Ubuntu the corresponding ASan runtime is provided by a package like <code>libclang-common-12-dev</code> depending on your Clang version. E.g.</p> <pre><code>sudo apt install libclang-common-12-dev llvm-12 clang-12\n</code></pre> <p>Note that during building would also need to preload the ASan runtime, since the build executes its own binaries that are linked against the runtime.</p> <pre><code>LD_PRELOAD=/usr/lib/llvm-12/lib/clang/12.0.0/lib/linux/libclang_rt.asan-x86_64.so \\\nASAN_OPTIONS=detect_leaks=0 \\\nASAN_SYMBOLIZER_PATH=/usr/lib/llvm-12/bin/llvm-symbolizer \\\n  cmake --build ...\n</code></pre> <p>Tip - ASan stack traces from Python</p> <p>When properly configured, you should see stack trace symbols from ASan reports, even when running Python code.</p> <p>If you see stack traces pointing at <code>site-packages</code>, you are using an installed package from pip and not your source build with ASan!</p> <pre><code>#0 0x7fbffd1712d8  (/.venv/lib/python3.11/site-packages/iree/_runtime_libs/_runtime.cpython-311-x86_64-linux-gnu.so+0xae2d8) (BuildId: 32e87a22f20d0241)\n#1 0x7fbffd1e5d78  (/.venv/lib/python3.11/site-packages/iree/_runtime_libs/_runtime.cpython-311-x86_64-linux-gnu.so+0x122d78) (BuildId: 32e87a22f20d0241)\n#2 0x7fbffd1e5b86  (/.venv/lib/python3.11/site-packages/iree/_runtime_libs/_runtime.cpython-311-x86_64-linux-gnu.so+0x122b86) (BuildId: 32e87a22f20d0241)\n#3 0x7fbffd11882d  (/.venv/lib/python3.11/site-packages/iree/_runtime_libs/_runtime.cpython-311-x86_64-linux-gnu.so+0x5582d) (BuildId: 32e87a22f20d0241)\n#4 0x5af471  (/usr/bin/python3.11+0x5af471) (BuildId: ead95fcf0410547669743f801bc8c549efbdf7ce)\n</code></pre> <p>To fix this, uninstall the packages and ensure that you have your <code>PYTHONPATH</code> pointing at your build directory:</p> <pre><code>python -m pip uninstall iree-base-runtime\npython -m pip uninstall iree-base-compiler\nsource iree-build/.env &amp;&amp; export PYTHONPATH\n\nLD_PRELOAD=/usr/lib/llvm-12/lib/clang/12.0.0/lib/linux/libclang_rt.asan-x86_64.so \\\nASAN_SYMBOLIZER_PATH=/usr/lib/llvm-12/bin/llvm-symbolizer \\\nASAN_OPTIONS=\"detect_leaks=0\" \\\n  python ...\n\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==229852==ERROR: AddressSanitizer: SEGV on unknown address 0x7f66510ff050 (pc 0x7f66efa5f25e bp 0x7fff9db6e9d0 sp 0x7fff9db6e950 T0)\n==229852==The signal is caused by a READ memory access.\n    #0 0x7f66efa5f25e in __flatbuffers_soffset_read iree/third_party/flatcc/include/flatcc/flatcc_endian.h:89:2\n    #1 0x7f66efa5f25e in __flatbuffers_soffset_read_from_pe iree/third_party/flatcc/include/flatcc/flatcc_endian.h:89:2\n    #2 0x7f66efa5f25e in iree_vm_BytecodeModuleDef_exported_functions iree-build/runtime/src/iree/schemas/bytecode_module_def_reader.h:693:1\n    #3 0x7f66efa5f25e in iree_vm_bytecode_module_lookup_function iree/runtime/src/iree/vm/bytecode/module.c:292:9\n    #4 0x7f66efb5b497 in iree_vm_context_run_function iree/runtime/src/iree/vm/context.c:77:26\n</code></pre> <p>Tip - Using the CUDA driver with ASan from Python</p> <p>If you want to run the IREE CUDA runtime driver it is likely you would need.</p> <pre><code>ASAN_OPTIONS=\"protect_shadow_gap=0\"\n</code></pre> <p>Like this</p> <pre><code>LD_PRELOAD=/usr/lib/llvm-12/lib/clang/12.0.0/lib/linux/libclang_rt.asan-x86_64.so \\\nASAN_SYMBOLIZER_PATH=/usr/lib/llvm-12/bin/llvm-symbolizer \\\nASAN_OPTIONS=\"protect_shadow_gap=0\" \\\n  python ...\n</code></pre>"},{"location":"developers/debugging/sanitizers/#tsan-threadsanitizer","title":"TSan (ThreadSanitizer)","text":"<p>To enable TSan:</p> <pre><code>cmake -DIREE_ENABLE_TSAN=ON ...\n</code></pre> <p>You may also need:</p> <ul> <li> <p>Depending on your system (see   https://github.com/google/benchmark/issues/773#issuecomment-616067912):</p> <pre><code>-DRUN_HAVE_STD_REGEX=0 \\\n-DRUN_HAVE_POSIX_REGEX=0 \\\n-DCOMPILE_HAVE_GNU_POSIX_REGEX=0 \\\n</code></pre> </li> <li> <p>For clang &lt; 18.1.0 on system with <code>vm.mmap_rnd_bits</code> &gt; 28 (see   https://stackoverflow.com/a/77856955):</p> <pre><code>sudo sysctl vm.mmap_rnd_bits=28\n</code></pre> <p>TSan in LLVM &gt;= 18.1.0 supports 30 bits of ASLR entropy. If the layout is unsupported, TSan will automatically re-execute without ASLR.</p> </li> <li> <p>If running under Docker, add <code>--privileged</code> to your <code>docker run</code> command</p> </li> </ul>"},{"location":"developers/debugging/sanitizers/#c-standard-library-with-tsan-support","title":"C++ Standard Library with TSan support","text":"<p>For best results to avoid false positives/negatives TSan needs all userspace code to be compiled with Tsan. This includes <code>libstdc++</code> or <code>libc++</code>. libstdc++ is usually the default C++ runtime on Linux.</p> <p>Building GCC's 12 libstdc++ on Ubuntu 22.04 with Clang has build errors. It seems that GCC and Clang shared their TSan implementation. They may be interoperable, but to avoid problems we should build everything with GCC. This means using GCC both as a compiler and linker.</p>"},{"location":"developers/debugging/sanitizers/#build-libstdc-with-tsan-support","title":"Build libstdc++ with TSan support","text":"<p>Get GCC 12.3 source code.</p> <pre><code>git clone --depth 1 --branch releases/gcc-12.3.0 \\\n  https://github.com/gcc-mirror/gcc.git\n</code></pre> <pre><code>SRC_DIR=$PWD/gcc\nBIN_DIR=$PWD/gcc/build\n</code></pre> <p>Building all dependencies of libstdc++ with TSan has errors during linking of <code>libgcc</code>. libgcc is a dependency of libstdc++. It is desirable to build everything with TSan, but it seems this excludes libgcc, as the TSan runtime <code>libtsan</code> has it as a dependency. We build it without TSan. We do that to make libstdc++'s configuration find <code>gthr-default.h</code>, which is generated during building of libgcc. If not found C++ threads will silently have missing symbols.</p> <pre><code>LIBGCC_BIN_DIR=$BIN_DIR/libgcc\nmkdir -p $LIBGCC_BIN_DIR\ncd $LIBGCC_BIN_DIR\n\n$SRC_DIR/configure \\\n  CC=gcc-12 \\\n  CXX=g++-12 \\\n  --disable-multilib \\\n  --disable-bootstrap \\\n  --enable-languages=c,c++\n\nmake -j$(nproc) --keep-going all-target-libgcc\n</code></pre> <p>Now build libstdc++.</p> <pre><code>LIBSTDCXX_BIN_DIR=$BIN_DIR/libstdc++\nmkdir -p $LIBSTDCXX_BIN_DIR\nLIBSTDCXX_INSTALL_DIR=$BIN_DIR/install/libstdc++\nmkdir -p $LIBSTDCXX_INSTALL_DIR\n\nGTHREAD_INCLUDE_DIR=$LIBGCC_BIN_DIR/x86_64-pc-linux-gnu/libgcc\nCXX_AND_C_FLAGS=\"-I$GTHREAD_INCLUDE_DIR -g -fno-omit-frame-pointer -fsanitize=thread\"\n\ncd $LIBSTDCXX_BIN_DIR\n$SRC_DIR/libstdc++-v3/configure \\\n  CC=gcc-12 \\\n  CXX=g++-12 \\\n  CFLAGS=\"$CXX_AND_C_FLAGS\" \\\n  CXXFLAGS=\"$CXX_AND_C_FLAGS\" \\\n  LDFLAGS=\"-fsanitize=thread\" \\\n  --prefix=$LIBSTDCXX_INSTALL_DIR \\\n  --disable-multilib \\\n  --disable-libstdcxx-pch \\\n  --enable-libstdcxx-threads=yes \\\n  --with-default-libstdcxx-abi=new\n\nmake -j$(nproc)\nmake install\n</code></pre> <p>When running programs you would need to use the sanitized version of libstdc++.</p> <pre><code>LD_LIBRARY_PATH=\"$LIBSTDCXX_INSTALL_DIR/lib\" \\\n  my-program ...\n</code></pre>"},{"location":"developers/debugging/sanitizers/#iree-with-tsan-support","title":"IREE with TSan support","text":"<p>To enable TSan:</p> <pre><code>cmake -DIREE_ENABLE_TSAN=ON ...\n</code></pre> <p>Several <code>_tsan</code> tests like <code>iree/tests/e2e/stablehlo_ops/check_llvm-cpu_local-task_tsan_abs.mlir</code> are also defined when using this configuration. These tests include ThreadSanitizer in compiled CPU code as well by using these <code>iree-compile</code> flags:</p> <pre><code>--iree-llvmcpu-link-embedded=false\n--iree-llvmcpu-sanitize=address\n</code></pre> <p>Note that a IREE runtime built with TSan cannot load a IREE compiled LLVM/CPU module unless those flags are used, so other tests are excluded using the <code>notsan</code> label.</p>"},{"location":"developers/debugging/sanitizers/#msan-memorysanitizer","title":"MSan (MemorySanitizer)","text":"<p>In theory that should be a simple matter of</p> <pre><code>-DIREE_ENABLE_MSAN=ON\n</code></pre> <p>However, that requires making and using a custom build of libc++ with MSan as explained in this documentation.</p> <p>As of April 2022, all of IREE's tests succeeded with MSan on Linux/x86-64, provided that the <code>vulkan</code> driver was disabled (due to lack of MSan instrumentation in the NVIDIA Vulkan driver).</p>"},{"location":"developers/debugging/sanitizers/#ubsan-undefinedbehaviorsanitizer","title":"UBSan (UndefinedBehaviorSanitizer)","text":"<p>Enabling UBSan in the IREE build is a simple matter of setting the <code>IREE_ENABLE_UBSAN</code> CMake option:</p> <pre><code>cmake -DIREE_ENABLE_UBSAN=ON ...\n</code></pre> <p>Note that both ASan and UBSan can be enabled in the same build.</p>"},{"location":"developers/debugging/sanitizers/#symbolizing-the-reports","title":"Symbolizing the reports","text":""},{"location":"developers/debugging/sanitizers/#desktop-platforms","title":"Desktop platforms","text":"<p>On desktop platforms, getting nicely symbolized reports is covered in this documentation. The gist of it is make sure that <code>llvm-symbolizer</code> is in your <code>PATH</code>, or make the <code>ASAN_SYMBOLIZER_PATH</code> environment variable point to it.</p>"},{"location":"developers/debugging/sanitizers/#android","title":"Android","text":"<p>On Android it's more complicated due to this Android NDK issue. Fortunately, we have a script to perform the symbolization. Copy the raw output from the sanitizer and feed it into the <code>stdin</code> of the <code>build_tools/scripts/android_symbolize.sh</code> script, with the <code>ANDROID_NDK</code> environment variable pointing to the NDK root directory, like this:</p> <pre><code>ANDROID_NDK=~/android-ndk-r21d ./build_tools/scripts/android_symbolize.sh &lt; /tmp/asan.txt\n</code></pre> <p>Where <code>/tmp/asan.txt</code> is where you've pasted the raw sanitizer report.</p> <p>Tip</p> <p>This script will happily just echo any line that isn't a stack frame. That means you can feed it the whole <code>ASan</code> report at once, and it will output a symbolized version of it. DO NOT run it on a single stack at a time! That is unlike the symbolizer tool that's being added in NDK r22, and one of the reasons why we prefer to keep our own script. For more details see this comment.</p>"},{"location":"developers/design-docs/cuda-hal-driver/","title":"CUDA HAL driver","text":"<p>This document lists technical details regarding the CUDA implemenation of IREE's Hardware Abstraction Layer, called a CUDA HAL driver.</p> <p>IREE provides a Hardware Abstraction Layer (HAL) as a common interface to different compute accelerators. IREE HAL's design draws inspiration from modern GPU architecture and APIs; so implementing a HAL driver using CUDA is mostly straightforward; though there are places we need emulation given no direct mapping concepts or mechanisms.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#overall-design-choices","title":"Overall design choices","text":"","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#cuda-driver-vs-runtime-api","title":"CUDA driver vs runtime API","text":"<p>IREE HAL's design draws inspiration from modern GPU APIs--it provides explicit control of low-level GPU objects. The compiler is expected to plan the object lifetime and schedule workload and synchronization in an optimized way; IREE HAL implementation and the underlying GPU driver stack is expected to be a thin layer without much smarts and magic.</p> <p>Therefore when implementing the IREE HAL using CUDA, we use the driver API instead of the runtime API. At runtime the HAL CUDA driver will load the <code>libcuda.so</code>/<code>nvcuda.dll</code> library dynamically and query a subset of the CUDA driver API used in HAL via the <code>cuGetProcAddress()</code> API.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#gpu-objects","title":"GPU Objects","text":"","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#driver","title":"Driver","text":"<p>There is no direct CUDA construct that map to the IREE HAL <code>iree_hal_driver_t</code> abstraction. We use it to hold the dynamic symbols loaded for all devices, and device enumeration and creation.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#device","title":"Device","text":"<p><code>iree_hal_cuda_device_t</code> implements <code>iree_hal_device_t</code> to provide the interface to CUDA GPU device by wrapping a <code>CUdevice</code>. For each device, right now we create two <code>CUstream</code>s--one for issuing commands for memory allocation and kernel lauches as instructed by the program; the other for issue host callback functions after dispatched command buffers completes. See synchronization section regarding the details.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#async-allocation","title":"Async allocation","text":"<p>The CUDA HAL driver supports async allocation (<code>iree_hal_device_queue_alloca()</code> and <code>iree_hal_device_queue_dealloca()</code>) via CUDA stream ordered memory allocation.</p> <p>The <code>async_allocations</code> in the <code>iree_hal_cuda_device_params_t</code> struct allows to enable this feature.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#command-buffer","title":"Command buffer","text":"<p><code>iree_hal_command_buffer_t</code> is a recording of commands to issue to the GPU; when the command buffer is submitted to the device it's then actually executed on the GPU asynchronously.</p> <p>Two implementations of <code>iree_hal_command_buffer_t</code> exist in the CUDA HAL driver--one backed by <code>CUgraph</code> and the other backed by <code>CUstream</code>.</p> <p><code>CUgraph</code> conceptually matches <code>iree_hal_command_buffer_t</code> better given it's a recording of commands to issue to the GPU. Also using the <code>CUgraph</code> API allows to easily encode fine grain dependencies between dispatch without having to create multiple streams. Therefore, the <code>CUgraph</code>-backed implementation is a more natural one. Though note that <code>CUgraph</code> API is meant to be used for recording once and replying multiple times and there may be a performance penalty to using <code>CUgraph</code> API for one-shot command buffer.</p> <p>The <code>CUstream</code>-backed implementation just issues commands directly to a <code>CUstream</code> when recording. Commands issued to <code>CUstream</code> can be immediately sent to the GPU for execution; there is no recording and replaying separation. In order to match the recording semantics of <code>iree_hal_command_buffer_t</code>, to use the <code>CUstream</code>-backed command buffer, we need to first record the command buffer into an in-memory <code>iree_hal_deferred_command_buffer_t</code>, and then when applying the command buffer, we create a new <code>CUstream</code>-backed implementation.</p> <p>The <code>command_buffer_mode</code> in the <code>iree_hal_cuda_device_params_t</code> struct allows to select which implementation to use.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#allocator","title":"Allocator","text":"<p>The allocator will forward allocation requests to <code>cuMemHostAlloc()</code> for host local memory, <code>cuMemAlloc()</code> for device local and host invisible memory, and <code>cuMemAllocManaged()</code> for device local and host visible memory.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#buffer","title":"Buffer","text":"<p>CUDA buffers are represented either as a host pointer or a device pointer of type <code>CUdeviceptr</code>.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#executable","title":"Executable","text":"<p><code>iree_hal_executable_t</code> maps naturally to <code>CUmodule</code>.</p> <p>The compiler generates a FlatBuffer containing a PTX image as well as a list of entry point functions and their associated metadata (names, workgroup size, dynamic shared memory size, etc.). At runtime, the CUDA HAL driver loads the PTX image and creates <code>CUfunction</code>s out of it for various entry points.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#synchronization","title":"Synchronization","text":"","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#event","title":"Event","text":"<p><code>iree_hal_event_t</code> right now is not used in the compiler so it's not yet implemented in the CUDA HAL driver.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#semaphore","title":"Semaphore","text":"<p>The IREE HAL uses semaphores to synchronize work between host CPU threads and device GPU streams. It's a unified primitive that covers all directions--host to host, host to device, device to host, and device to device, and allows flexible signal and wait ordering--signal before wait, or wait before signal. There is no limit on the number of waits of the same value too.</p> <p>The core state of a HAL semaphore consists of a monotonically increasing 64-bit integer value, which forms a timeline--signaling the semaphore to a larger value advances the timeline and unblocks work waiting on some earlier values. The semantics closely mirrors Vulkan timeline semaphore.</p> <p>In CUDA, there is no direct equivalent primitives providing all the capabilities needed by the HAL semaphore abstraction:</p> <ul> <li>Stream memory operations provides <code>cuStreamWriteValue64()</code> and   <code>cuStreamWaitValue64()</code>, which can implment HAL semaphore 64-bit integer value   signal and wait. Though these operations require device pointers and cannot   accepts pointers to managed memory buffers, meaning no support for the host.   Additionally, per the spec, \"synchronization ordering established through   these APIs is not visible to CUDA. CUDA tasks that are (even indirectly)   ordered by these APIs should also have that order expressed with   CUDA-visible dependencies such as events.\" So it's not suitable for   integration with other CUDA components.</li> <li>For external resource interoperability, we have APIs   like <code>cuSignalExternalSemaphoresAsync()</code> and <code>cuWaitExternalSemaphoresAsync()</code>,   which can directly map to Vulkan timeline semaphores. Though these APIs are   meant to handle exernal resources--there is no way to create   <code>CUexternalSemaphore</code> objects directly other than <code>cuImportExternalSemaphore()</code>.</li> </ul> <p>Therefore, to implement the support, we need to leverage multiple native CPU or CUDA primitives under the hood.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#cuevent-capabilities","title":"<code>CUevent</code> capabilities","text":"<p>The main synchronization mechanism is CUDA event--<code>CUevent</code>. As a functionality and integration baseline, we use <code>CUevent</code> to implement the IREE HAL semaphore abstraction.</p> <p><code>CUevent</code> natively supports the following capabilities:</p> <ul> <li>State: binary; either unsignaled or signaled. There can exist multiple   waits (e.g., via <code>cuEventSynchronize()</code> or <code>cuGraphAddEventWaitNode()</code>) for   the same <code>CUevent</code> signal (e.g., via <code>cuEventRecord()</code> or   <code>cuGraphAddEventRecordNode()</code>).</li> <li>Ordering: must be signal before wait. Waiting before signal would mean   waiting an empty set of work, or previously recorded work.</li> <li>Direction: device to device, device to host.</li> </ul> <p>We need to fill the remaining capability gaps. Before going into details, the overall approach would be to:</p> <ul> <li>State: we need a 64-bit integer value timeline. Given the binary state of   a <code>CUevent</code>, each <code>CUevent</code> would just be a \"timepoint\" on the timeline.</li> <li>Ordering: we need to defer releasing the workload to the GPU until the   semaphore waits are reached on the host, or we can have some device   <code>CUevent</code> to wait on.</li> <li>Direction: host to host and host to device is missing; we can support that   with host synchronization mechanisms.</li> </ul>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#signal-to-wait-analysis","title":"Signal to wait analysis","text":"<p>Concretely, for a given HAL semaphore, looking at the four directions:</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#cpu-signal","title":"CPU signal","text":"<p>A CPU thread signals the semaphore timeline to a new value.</p> <p>If there are CPU waits, it is purely on the CPU side. We just need to use common CPU notification mechanisms. In IREE we have <code>iree_event_t</code> wrapping various low-level OS primitives for it. So we can just use that to represent a wait timepoint. We need to keep track of all CPU wait timepoints in the timeline. After a new signaled value, go through the timeline and notify all those waiting on earlier values.</p> <p>If there are GPU waits, given that there are no way we can signal a <code>CUevent</code> on CPU, one way to handle this is to cache and defer the submission batches by ourselves until CPU signals past the desired value. To support this, we would need to implement a deferred/pending actions queue.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#gpu-signal","title":"GPU signal","text":"<p>GPU signals can only be through a <code>CUevent</code> object, which has a binary state. We need to advance the timeline too. One way is to use <code>cuLaunchHostFunc()</code> to advance from the CPU side with <code>iree_hal_semaphore_list_signal()</code>. This additionally would mean we can reuse the logic form CPU signaling to unblock CPU waits.</p> <p>After advancing the timeline from the CPU side with <code>cuLaunchHostFunc()</code>, we can release more workload from the deferred/pending actions queue to the GPU. Though, per the documentation of <code>cuLaunchHostFunc()</code>, \"the host function must not make any CUDA API calls.\" So we cannot do that directly inside <code>cuLaunchHostFunc()</code>; we need to notify another separate thread to call CUDA APIs to push more work to the GPU. So the deferred/pending action queue should have an associcated thread.</p> <p>For GPU waits, we can also leverage the same logic--using CPU signaling to unblock deferred GPU queue actions. Though this is performant, given that the CPU is involved for GPU internal synchronization. We want to use <code>CUevent</code> instead:</p> <ul> <li>We keep track of all GPU signals in the timeline. Once we see a GPU wait   request, try to scan the timeline to find a GPU signal that advances the   timeline past the desired value, and use that for waiting instead. (This   actually applies to CPU waits too, and it's an optimization over pure   CPU side <code>iree_event_t</code> polling.)</li> <li>We may not see GPU signal before seeing GPU wait requests, then we can also   keep track of all GPU waits in the timeline. Later once see either a CPU   signal or GPU signal advancing past the waited value, we can handle them   accordingly--submitting immediately or associating the <code>CUevent</code>.   This would also guarantee the requirement of <code>CUevent</code>--recording should   happen before waiting.</li> <li>We can use the same <code>CUevent</code> to unblock multiple GPU waits. That's allowed,   though it would mean we need to be careful regarding <code>CUevent</code> lifetime   management. Here we can use reference counting to see how many timepoints   are using it and automatically return to a pool once done.</li> </ul> <p>Another problem is that per the <code>cuLaunchHostFunc()</code> doc, \"the function will be called after currently enqueued work and will block work added after it.\" We don't want the blocking behavior involving host. So we can use a dedicated <code>CUstream</code> for launching the host function, waiting on the <code>CUevent</code> from the original stream too. We can also handle resource deallocation together there.</p>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/cuda-hal-driver/#data-structures","title":"Data structures","text":"<p>To summarize, we need the following data structures to implement HAL semaphore:</p> <ul> <li><code>iree_event_t</code>: CPU notification mechanism wrapping low-level OS primitives.   Used by host wait timepoints.</li> <li><code>iree_event_pool_t</code>: a pool for CPU <code>iree_event_t</code> objects to recycle.</li> <li><code>iree_hal_cuda_event_t</code>: GPU notification mechanism wrapping a <code>CUevent</code> and   a reference count. Used by device signal and wait timepoints. Associates with   a <code>iree_hal_cuda_event_pool_t</code> pool--returns to the pool directly on once   reference count goes to 0.</li> <li><code>iree_hal_cuda_event_pool_t</code>: a pool for GPU <code>iree_hal_cuda_event_t</code> objects   to recycle.</li> <li><code>iree_hal_cuda_timepoint_t</code>: an object that wraps a CPU <code>iree_event_t</code> or   GPU <code>iree_hal_cuda_event_t</code> to represent wait/signal of a timepoint on a   timeline.</li> <li><code>iree_hal_cuda_timepoint_pool_t</code>: a pool for <code>iree_hal_cuda_timepoint_t</code>   objects to recycle. This pool builds upon the CPU and GPU event pool--it   acquires CPU/GPU event objects there.</li> <li><code>iree_hal_cuda_timeline_semaphore_t</code>: contains a list of CPU wait and GPU   wait/signal timepoints.</li> <li><code>iree_hal_cuda_queue_action_t</code>: a pending queue action (kernel launch or   stream-ordered allocation).</li> <li><code>iree_hal_cuda_pending_queue_actions_t</code>: a data structure to manage pending   queue actions. It provides APIs to enqueue actions, and advance the queue on   demand--queue actions are released to the GPU when all their wait semaphores   are signaled past the desired value, or we can have a <code>CUevent</code> object already   recorded to some <code>CUstream</code> to wait on.</li> </ul>","tags":["GPU","CUDA"]},{"location":"developers/design-docs/design-roadmap/","title":"Design roadmap","text":"<p>A not-so-concise walkthrough of various IREE features that are in the design process and planned for future versions. A lot of the questions around how the IREE IR is designed and why certain components exist (such as the VM) hopefully become much clearer when seeing where we want to go with the infrastructure we are building (as opposed to where we currently are with our MVP slice). This document is not meant to encompass the entire design of any individual feature and if there's interest please say hi on the iree-technical-discussion mailing list.</p> <ul> <li>Design roadmap<ul> <li>Input Dialects<ul> <li>Quantization</li> </ul> </li> <li>flow: Data- and Execution-Flow Modeling<ul> <li>Avoiding Readbacks with flow.stream</li> <li>Threading flow.stream through the CFG</li> <li>Predication of flow.dispatch</li> <li>Deduping flow.executables</li> <li>Rematerializing CSE'd Expressions</li> <li>Device Placement</li> </ul> </li> <li>hal: Hardware Abstraction Layer and Multi-Architecture Executables<ul> <li>Allow Targets to Specify hal.interfaces</li> <li>Target-specific Scheduling Specialization</li> <li>Buffer Usage Tracking</li> <li>Batched Executable Caching and Precompilation</li> <li>Target-aware Executable Compression</li> <li>Target-aware Constant Compression</li> <li>Command Buffer Stateful Deduplication</li> <li>Resource Timeline</li> <li>Transient Tensor Ringbuffer</li> <li>Timeline Semaphores on the Module ABI</li> <li>GPU-like CPU Scheduling</li> </ul> </li> <li>vm: Lightweight Virtual Machine<ul> <li>Coroutines for Batching and Cooperative Scheduling<ul> <li>Cellular Batching</li> </ul> </li> <li>Lowering to LLVM IR</li> <li>Improved Type Support</li> <li>Indirect Command Buffer/On-Accelerator Execution</li> </ul> </li> </ul> </li> </ul>"},{"location":"developers/design-docs/design-roadmap/#input-dialects","title":"Input Dialects","text":""},{"location":"developers/design-docs/design-roadmap/#quantization","title":"Quantization","text":"<p>It's assumed that any work related to quantization/compression has happened prior to lowering into IREE dialects. Our plan is to use the proposed Quantization Transforms to achieve both training and inference-time quantization of types in a way that preserves maximum accuracy. IREE will support running with original unquantized floats in all cases, allowing for a smooth on-ramp to quantization and the gains in performance and reduction in model size that come from it.</p> <p>As future work IREE would like to move beyond these transformation-directed approaches to quantization and interface directly to frontends which have a defined enough type system to represent accurate quantized (and otherwise compressed) computations directly, not relying exclusively on compiler-side type inference transforms.</p>"},{"location":"developers/design-docs/design-roadmap/#flow-data-and-execution-flow-modeling","title":"<code>flow</code>: Data- and Execution-Flow Modeling","text":"<p>The <code>flow</code> dialect is designed to allow us to extract as much concurrency as possible from a program and partition IR into the scheduling and execution domains. Today we have the IR structure and transformation flow in place but have not yet got to the most interesting things such an infrastructure enables. A majority of the largest performance, latency, and memory usage improvements IREE can offer are determined first here and all following lowerings benefit. The fastest code is the code you don't execute and the smallest allocation is the allocation you don't make ;)</p>"},{"location":"developers/design-docs/design-roadmap/#avoiding-readbacks-with-flowstream","title":"Avoiding Readbacks with <code>flow.stream</code>","text":"<p>A majority of the readbacks we have today (manifested as <code>flow.tensor.load.*</code> ops) will be removed when we have an HLO tensor-&gt;primitive conversion. There will still be cases when readbacks are required for correctness but they usually fall into a small set of usage patterns. For those that don't this is one place where IREE will warn about performance issues, allowing programs that perform suboptimally but encouraging authors to adjust their input model to enable better behavior. The IREE VM also has specific support for hiding readback latency in an efficient way via coroutines.</p> <p>The most common case we are currently seeing in the IR is that of dynamic copies where the offsets are dependent on the result of previous computations. Source models may have top-k + gather operations, for example. These appear as a <code>flow.stream</code>, a <code>flow.tensor.load</code>, and then another <code>flow.stream</code> that uses the loaded value for a <code>flow.tensor.update</code> (or other operation):</p> <pre><code>%index_tensor = flow.ex.stream.fragment(...) -&gt; tensor&lt;i32&gt; { ... }\n%index = flow.tensor.load %index_tensor : tensor&lt;i32&gt;\n%result = flow.ex.stream.fragment(%arg0 = %index : i32, ...) -&gt; ... {\n  %0 = flow.dispatch ...\n  %1 = flow.tensor.update %0, %arg2[%index] : tensor&lt;10xf32&gt; -&gt; tensor&lt;1x10xf32&gt;\n  ...\n}\n</code></pre> <p>Today the <code>flow.tensor.update</code> turns into HAL command buffer transfer operations that must have their offsets known at recording time. This is a limitation of <code>vkCmdCopyBuffer</code> but not a fundamental limitation of any hardware. In fact several drivers implement copies as small built-in shader programs meaning that we could perform the same expansion here with the right primitives. This would allow, in the above example, both the index to be computed and the tensor to be updated within the same stream to entirely remove the host round-trip.</p>"},{"location":"developers/design-docs/design-roadmap/#threading-flowstream-through-the-cfg","title":"Threading <code>flow.stream</code> through the CFG","text":"<p>The current <code>flow.ex.stream.fragment</code>, as denoted by the <code>ex</code>perimental tag, is a temporary implementation designed to get the concept of streams lowered to the HAL dialect. For streams to be effective at modeling larger concurrency scopes they need to be able to move across branches in the CFG. This intuitively follows exactly what one would do if recording commands in C:</p> <pre><code>vkCmdCopyBuffer(cmd, ...);\nif (some_flag) {\n  vkCmdBindPipeline(cmd, ..., pipeline_a);\n} else {\n  vkCmdBindPipeline(cmd, ..., pipeline_b);\n}\nvkCmdDispatch(cmd, ...);\n</code></pre> <p>The corresponding <code>flow</code> IR:</p> <pre><code>  flow.stream.append[%s0](...) {\n    flow.tensor.update ...\n  }\n  %b = arith.cmpi ne %some_flag, ...\n  cond_br %b, ^a(%s0), ^b(%s0)\n^a(%s1):\n  flow.stream.append[%s1](...) {\n    flow.dispatch @pipeline_a, ...\n  }\n  br ^end(%s1)\n^b(%s2):\n  flow.stream.append[%s2](...) {\n    flow.dispatch @pipeline_b, ...\n  }\n  br ^end(%s2)\n^end(%s3):\n  ...\n</code></pre> <p>This allows the entire stream to be lowered into one command buffer without the need for any host round-trips. The conversion into the <code>flow</code> dialect will walk the CFG and attempt to thread the <code>flow.stream</code> values through so long as there are no external dependencies.</p>"},{"location":"developers/design-docs/design-roadmap/#predication-of-flowdispatch","title":"Predication of <code>flow.dispatch</code>","text":"<p>While the <code>flow.stream</code> threading through the CFG can remove many of the simpler conditional dispatches there will always be some that will have their execution dependent on the result of prior dispatches. For these a <code>flow.cond_dispatch</code> will allow a condition to be provided that must be true for the dispatch to actually be performed.</p> <p>For targets that natively support predication in their command buffers (such as D3D12's ID3D12GraphicsCommandList::SetPredication) this provides a host round-trip-free way of conditionally executing dispatches and transfers. Unfortunately Vulkan support is still lacking, though Nvidia supports the VK_EXT_conditional_rendering extension that exposes the same behavior.</p> <p>For targets that do not support predication natively it's still possible to emulate predication with indirect dispatches. In this model the workgroup counts normally used to dispatch execution are sourced from another device buffer at the time the dispatch is made instead of sourced from the command buffer at the time the dispatch is recorded. Degenerate dispatches with counts of <code>0, 0, 0</code> allow for effective neutering of the dispatch with minimal overhead (vs. the significant penalty of a host round-trip!).</p> <p>By modeling such predication at the <code>flow</code> level we are able to lower into the HAL with target-aware predication semantics and fuse indirect dispatch workgroup count calculations into existing dispatches already being performed such that overhead is reduced.</p>"},{"location":"developers/design-docs/design-roadmap/#deduping-flowexecutables","title":"Deduping <code>flow.executable</code>s","text":"<p>While still in the <code>flow</code> dialect, the executables are target-agnostic. This makes simple IR tree diffing a potential solution to deduplication. Since most of the dispatches originate from the same source-language library calls in input frameworks there's a high likelihood of duplication, and depending on when inlining is performed we may have stronger or weaker ability to perform the deduplication. Thanks to the MLIR canonicalization pass (that ensures ops are rearranged into consistent canonical representations) the IR comparisons can be done rather trivially.</p>"},{"location":"developers/design-docs/design-roadmap/#rematerializing-csed-expressions","title":"Rematerializing CSE'd Expressions","text":"<p>Common subexpression elimination is performed many times during lowering, however there comes a point where the CSE can introduce false dependencies and additional allocations that are otherwise avoidable. For example if a broadcasting operation is CSE'd and then the result is used by two or more operations that are scheduled independently what would have been a relatively cheap lowering of the broadcast to a simple index remapping now becomes an additional dispatch, materialization of an intermediate tensor, and a barrier:</p> <pre><code>%bcast = \"mhlo.broadcast_in_dim\"(%cst) : (tensor&lt;f32&gt;) -&gt; tensor&lt;1024x10xf32&gt;\n%mul1 = mhlo.multiply %arg0, %bcast : tensor&lt;1024x10xf32&gt;\n// (pretend something here that prevents fusion)\n%mul2 = mhlo.multiply %arg1, %bcast : tensor&lt;1024x10xf32&gt;\n</code></pre> <pre><code>%bcast = flow.dispatch.region(%cst : tensor&lt;f32&gt;) -&gt; tensor&lt;1024x10xf32&gt; {\n  %0 = \"mhlo.broadcast_in_dim\"(%cst) : (tensor&lt;f32&gt;) -&gt; tensor&lt;1024x10xf32&gt;\n  return %0 : tensor&lt;1024x10xf32&gt;\n}\n// a barrier will be required here\n%mul1 = flow.dispatch.region(%arg0 : tensor&lt;1024x10xf32&gt;, %bcast : tensor&lt;1024x10xf32&gt;) -&gt; tensor&lt;1024x10xf32&gt; {\n  %1 = mhlo.multiply %arg0, %bcast : tensor&lt;1024x10xf32&gt;\n  return %1 : tensor&lt;1024x10xf32&gt;\n}\n%mul2 = flow.dispatch.region(%arg1 : tensor&lt;1024x10xf32&gt;, %bcast : tensor&lt;1024x10xf32&gt;) -&gt; tensor&lt;1024x10xf32&gt; {\n  %2 = mhlo.multiply %arg1, %bcast : tensor&lt;1024x10xf32&gt;\n  return %2 : tensor&lt;1024x10xf32&gt;\n}\n</code></pre> <p>Instead the broadcast should be rematerialized inside of both dispatch regions as the cost of doing so is significantly less in compute resources and then the intermediate tensor will not be required at all. Though at first it may seem counter-intuitive to undo such a critical optimization as CSE (both to code size and often to compute) but here it's something we must carefully balance while looking at the whole system. It gets even more important when considering multi-device execution as the cost of sharing memory and synchronizing may be extremely non-trivial.</p>"},{"location":"developers/design-docs/design-roadmap/#device-placement","title":"Device Placement","text":"<p>While still within the <code>flow</code> dialect we have the ability to easily split streams and safely shuffle around operations. Target execution backends can opt into such behavior to ensure that device restrictions such as maximum in-flight memory, maximum scheduling depth, and capabilities are observed. For heterogeneous configurations the intent is that certain operations, dispatches, and streams can be attributed to specify which device categories they should be lowered. The constraint solving that takes place can be provided with generic heuristics (\"big GEMMs go on the accelerator\"), profile-guided databases based on benchmarks, learned traits via ML, etc.</p>"},{"location":"developers/design-docs/design-roadmap/#hal-hardware-abstraction-layer-and-multi-architecture-executables","title":"<code>hal</code>: Hardware Abstraction Layer and Multi-Architecture Executables","text":"<p>As the IREE HAL is designed almost 1:1 with a compute-only Vulkan API many of the techniques classically used in real-time graphics apply. The benefit we have by modeling our usage of such a low-level API in IR is that the normal work - some of which is very non-trivial - for managing allocations, tracking resource lifetime, and ensuring proper synchronization/barriers is something we can apply the full force of an offline compiler against.</p>"},{"location":"developers/design-docs/design-roadmap/#allow-targets-to-specify-halinterfaces","title":"Allow Targets to Specify <code>hal.interface</code>s","text":"<p>The <code>hal.interface</code> op specifies the ABI between the scheduler and the device containing the buffer bindings and additional non-buffer data (parameters, shapes, specialization flags, etc). Today a na\u00efve ordering is used uniformly for all targets however it is possible for target backends to opt into providing their own interfaces based on target configuration. The same <code>hal.executable</code> may have multiple interfaces and the same backend may use one or more. This is useful for when target capabilities may vary at runtime, such as the number of available storage buffer bindings in Vulkan. By exposing a few <code>hal.interface</code> variants with different binding amounts the Vulkan backend could make better use of the larger number of bindings available at runtime while still providing support for smaller configurations.</p> <p>Once we have multiple <code>hal.interface</code>s defined for executables the scheduler needs to emit HAL ops that properly switch between them. By having a canonical form for bindings we can ensure that only the differences between the interfaces will need additional code.</p>"},{"location":"developers/design-docs/design-roadmap/#target-specific-scheduling-specialization","title":"Target-specific Scheduling Specialization","text":"<p>Though the <code>flow</code> dialect attempts to fuse as many ops as possible into dispatch regions, it's not always possible for all target backends to schedule a region as a single dispatch. A classic example is algorithms like parallel reduction commonly used on GPUs that may require many dispatches to identical executables, while other algorithms may vary the executables they use based on the input parameters such as shape or the target runtime device support.</p> <p>By default the <code>flow.dispatch</code> executable translation to <code>hal.executable</code>s is performed 1:1 and it is assumed that a single dispatch is required. Extending target backends with scheduling interfaces (enabling them to opt into different scheduling behavior) will allow the backends to emit any number of <code>hal.executable</code>s and any stream commands (such as additional dispatches or transfers) they may need. This is effectively equivalent to what would be done at runtime only because we are still operating on IR prior to buffer allocation and can use the <code>hal</code> ringbuffer primitive. Through this we can elide many of the allocations that would otherwise be required at runtime (and the concurrency-limiting false dependencies that usually come along with scratch memory).</p> <p>Since the algorithm used may vary based on the parameters of the dispatch (such as the shape of the reduction which may be dynamically determined) scheduling specialization may occur even when targeting a single backend. In many cases folding and canonicalization can eliminate the overhead as whether one dynamically computed workgroup size is used instead of another the same IR is present.</p>"},{"location":"developers/design-docs/design-roadmap/#buffer-usage-tracking","title":"Buffer Usage Tracking","text":"<p>Many explicit hardware APIs require knowing how buffers are used alongside with where they should be located. For example this additional information determines caching policy on buffer accesses (write-through, write-back, etc), visibility of writes across compute units, and the possible MMU properties that may need to be maintained/matched for the buffer. By using the SSA-form value-semantics of the MLIR <code>tensor</code> as used in the <code>flow</code> dialect we have complete information of where buffers may be used or at least where they enter or leave regions where we can derive such information.</p> <p>Analysis passes can run over IR to attribute tensors such that when allocation is performed when lowering to the <code>hal</code> dialect we do so from an allocator compatible with where the buffer will be used, with memory types chosen based on the potential cost and location of operations performed (write-only on host vs. read-write on host and device, etc), and with usage bits indicating what kind of operations may be performed on the buffer. Many of these are local transformations as most buffers are only live within very small regions such as the <code>flow.stream</code> encompassing their usage.</p> <p>Traditional systems need to either use very permissive buffer properties or heuristics that can introduce additional non-trivial overhead when such heuristics are incorrect. For example, OpenGL had several such usage hints that drivers were then able to use but almost no drivers behaved as desired in all cases and it lead to additional memory ghosting, copies, readbacks, and unpredictable performance. For almost all uses of the buffers within an IREE invocation we instead can know precisely where and how buffers may need to be moved and do it a minimum number of times if it is required.</p>"},{"location":"developers/design-docs/design-roadmap/#batched-executable-caching-and-precompilation","title":"Batched Executable Caching and Precompilation","text":"<p>For targets that may require runtime preprocessing of their executables prior to dispatch, such as SPIR-V or MSL, the IREE HAL provides a caching and batch compilation mechanism based on Vulkan's Pipeline Cache.</p> <p>Today each executable is compiled on-demand and cached only for the process lifetime. Though some drivers may provide their own caching we can make better use of the explicit caching and compilation behavior with the additional information we have in the compiler.</p> <p>For any given entry point (or group of entry points) into an IREE module we can perform reachability analysis to know which executables may be executed when that entry point is invoked. In this way we can emit pre-invocation compilation checks (similar to an <code>std::call_once</code> block) that provides all required executables for compilation and allows more efficient compilation through multithreading the compiler invocations. These same compilation caching function can be exposed and invoked manually by an application to force pre-compilation when it is least likely to impact the user, such as a post-install/first-run step or concurrently while other application features are loading.</p> <p>We can use zero or more scoped caches for executables within a module. Completely dynamic modules (such as those emitted in eager-mode usage) may avoid the caching overhead entirely, while modules that have several primary usage modes (such as training and inference) may choose to use independent caches for each such mode.</p> <p>The caches generated can then be retrieved and saved by the hosting application. Upon the next execution the application can provide the caches and if still valid they will be used to avoid compilation.</p>"},{"location":"developers/design-docs/design-roadmap/#target-aware-executable-compression","title":"Target-aware Executable Compression","text":"<p>An advantage of representing executable binaries in IR after translation is that we can apply various post-compilation compression and minification techniques while still know precisely where the executable will be used. This is extremely important for SPIR-V as it is not designed to be a small at-rest format. Though the biggest lever we have to control generated code size is higher-level deduplication and specialization there will still be a sufficiently large number of executable binaries we will need to embed within the final modules and having targeted approaches for reducing their size beyond just \"gzip everything\" is very powerful.</p> <p>For example, SMOL-V is a fantastic lossless SPIR-V compression technique that, when coupled with modern dictionary-based compression algorithms, can save significant binary size. As a data point, the SPIR-V corpus SMOL-V uses for testing goes from 4.8MiB of raw SPIR-V to 348KiB of compressed SMOL-V.</p> <p>Combined with Batched Executable Caching and Precompilation we can easily use shared dictionaries and other cross-artifact compression in a relatively plug-in way.</p>"},{"location":"developers/design-docs/design-roadmap/#target-aware-constant-compression","title":"Target-aware Constant Compression","text":"<p>It's still an area that needs more research but one goal of the IREE design was to enable efficient target- and context-aware compression of large constants (typically model weights/parameters/embeddings). This may mean reusing existing hardware compression formats on GPUs, ML accelerator-specific formats, or very-low-bit-depth (1-4 bit per value) quantization techniques that cannot be directly used without first decompressing. The inspiration here is formats like Crunch and Basis Universal that perform \"supercompression\", and we may even be able to use these directly as then we can make use of GPU hardware samplers to do the 4-bit to 32-bit decompression, etc.</p>"},{"location":"developers/design-docs/design-roadmap/#command-buffer-stateful-deduplication","title":"Command Buffer Stateful Deduplication","text":"<p>The IREE HAL - much like Vulkan it is based on - eschews much of the state that traditional APIs have in favor of (mostly) immutable state objects (pipeline layouts, pipeline states, descriptor sets, etc). There are still a few stateful entry points in the API, though, and deduplicating or reordering redundant calls can reduce both IR, API, and execution overhead.</p> <p>The key place this will have the largest impact is around descriptor set bindings and push descriptors, both of which are state and can have non-trivial setup overhead. A canonicalization for such commands that inspects the target <code>hal.command_buffer</code> to see if the same state was set prior and code motion to move such commands out of loop bodies when possible would be helpful.</p>"},{"location":"developers/design-docs/design-roadmap/#resource-timeline","title":"Resource Timeline","text":"<p>A core concept of the IREE scheduler that allows for overlapping in-flight invocations is that of the resource timeline. This identifies module state that can be in use by multiple invocations and assigns timeline milestones denoting when the resource will be in the appropriate state for the current invocation to proceed. Conceptually it is like a epoch-based synchronization mechanism as commonly found in garbage collectors to allow for lock-free asynchronous memory reclamation.</p> <p>The advantage we have in the IR is that we know both the usage of all resources thanks to buffer usage tracking and the synchronization domains of all resources (in most cases). This allows us to effectively assign one timeline semaphore per writeable resource while in practice having far fewer than 1:1, as for example if two resources are only ever written in the same command buffer only one semaphore is needed to signal the completion of both writes.</p> <p>By transforming IR to sink all resource reads and writes closest to where the value is used we can enlarge the time windows that can overlap across invocations that may share those resources. This is similar to what out-of-order CPUs do with register renaming/reorder buffers/etc and something we can apply some traditional instruction scheduling techniques to (only here our 'instructions' are entire command buffer dispatches/transfers).</p> <p>Two degenerate cases of this approach are that of resource indirection (<code>util.ptr&lt;tensor&lt;T&gt;&gt;</code>) and dynamic resource shapes. In these two cases it may not be possible to continue recording commands even if we are able to ensure execution is appropriately synchronized. This is where indirect dispatch, predication, indirect command buffers, and VM coroutines can all help cover for the times where we are unable to transform away the indirection or emit shape logic without data dependencies.</p>"},{"location":"developers/design-docs/design-roadmap/#transient-tensor-ringbuffer","title":"Transient Tensor Ringbuffer","text":"<p>(When properly implemented) almost all buffers required during execution never escape the command buffers they are used in or a single VM invocation. We can trivially identify this from the explicit captures of <code>flow.stream</code> and <code>flow.dispatch</code> ops and the fact that all tensor types have value-semantics. Only those tensor values loaded-from/stored-to module state or that cross the exported module function boundary need special consideration while almost everything else can live transiently only so long as it is required during execution.</p> <p>Thanks to this information about buffer usage and lifetime we can use a ringbuffer to store the transient tensor data and other required data reservations such as uniform buffers used to pass dynamic parameters (shapes, flags, etc) into dispatches. This gives the compiler and the application a knob that allows them to control maximum concurrency (by having a very large ringbuffer) or maximum memory usage (by having a minimally small ringbuffer).</p> <p>Allocating tensors from the ringbuffer does not require sophisticated runtime packing as we can emit IR to calculate required sizes for dynamically shaped tensors. Whether a basic block reserves <code>%sz = arith.constant 42 : index</code> bytes or <code>%sz = std.muli %cst, %dyn_dim : index</code> bytes doesn't materially change how the allocations are performed. Since almost all usage involves simple write head bumps there is no need for ahead-of-time memory planning or large fixed allocations, and since no buffer within the ringbuffer can alias we can have coarse (read: low overhead) guarantees about the availability of certain regions of the ringbuffer (\"when this event is signaled all prior ringbuffer writes have completed\").</p> <p>Usually any planning we may want to perform can be done in IR via code motion. For example applying traditional algorithms used to reduce register pressure will help us attain narrower live windows within the ringbuffer leading to a larger number of in-flight operations for the same ringbuffer memory usage.</p> <p>We may end up using both a classical ringbuffer and a variant known as the bip buffer because it is better for descriptor set utilization (as we can provide many dispatch parameters with a single base offset bound once at the beginning of a region).</p>"},{"location":"developers/design-docs/design-roadmap/#timeline-semaphores-on-the-module-abi","title":"Timeline Semaphores on the Module ABI","text":"<p>Functions calls made across modules (either from C++ into the VM, VM-&gt;VM, or VM-&gt;C++) should be able to define timeline semaphores used to wait and signal on the call. We can do this by making all exports automatically have the semaphores and then make invocations populate them if they were not provided by the caller. In this way we can allow multiple invocations of exported functions to chain naturally with internal asynchronous workloads, turning most IREE invocations into just recording of command buffers that can never block.</p> <p>When combined with VM coroutine support we even have the ability to interleave any required host execution between the wait and signal semaphores provided such that the caller never knows on which device execution is taking place. It's still possible to provide synchronous wrappers that emulate blocking behavior but by having the core system designed around a single system-supported primitive we avoid the need for additional things like interrupt watchdog threads, implicit blocking, and other pitfalls.</p>"},{"location":"developers/design-docs/design-roadmap/#gpu-like-cpu-scheduling","title":"GPU-like CPU Scheduling","text":"<p>One approach to using multiple cores on a CPU is to perform interior parallelization of operations such as OpenMP or library-call-based custom thread pools (gemmlowp). This works when each individual operation is relatively costly vs. potential pipeline bubbles caused by work spinning down near the end of an operation and spinning up at the beginning of the next.</p> <p>IREE is designed to handle many more workloads - some of which have very narrow shapes but very deep pipelines (like search algorithms) - such that the above approach of multithreading within ops becomes a bottleneck. These workloads are traditionally very poorly handled by frameworks and issues with oversubscription, pipeline stalls, and suboptimal system schedulers (such as on Android) can lead to more time being spent thrashing about than actually executing real work.</p> <p>The approach we take here is to treat the cores of a CPU as if they were computation units on a GPU, each able to perform some set of heterogeneous work independent of others units. This means that the concurrency we are trying to model at the <code>flow</code> level and communicate to the runtime via the <code>hal</code> that explicitly states which dispatches can overlap and the size of the workgroups can trivially be used to distribute this work over many cores exactly as a GPU would do it. Integration with library calls that may require their own threading (such as Ruy) requires that they be able to use the IREE thread pool instead of their own.</p> <p>In this way we can avoid pipeline bubbles and other latency-inducing unpredictable scheduling. This does not mean that we treat individual units of work at the same scale as we would for GPUs, but instead that we tile and have one or more processing units that allows us to work on those tiles. Whether the tile size is defined by a library call contract, heuristics, or empirically is TBD, but expect workgroup sizes in the thousands to millions of invocations vs. normal GPU workgroup sizes in the dozens to hundreds of invocations.</p> <p>To achieve this style of scheduling efficiently we'll likely use something like marl as the scheduler. Marl provides cross-platform low-overhead fibers and is compatible with this style of scheduling as it was built for the Swiftshader software rasterizer.</p> <p>Even if IREE was only targeting CPUs the assertion is that we would still want to schedule this way and it's only an incidental benefit that if building for heterogeneous targets the scheduling code may be shared (just with a different divisor for workgroup count calculations).</p>"},{"location":"developers/design-docs/design-roadmap/#vm-lightweight-virtual-machine","title":"<code>vm</code>: Lightweight Virtual Machine","text":"<p>The VM is designed as a dynamic linkage ABI, stable bytecode representation, and intermediate lowering IR. Many of the optimizations we can perform on it will benefit all use cases (such as when lowering to LLVM IR) by allowing higher-level program transformations around synchronization that are difficult to perform on arbitrary LLVM IR.</p>"},{"location":"developers/design-docs/design-roadmap/#coroutines-for-batching-and-cooperative-scheduling","title":"Coroutines for Batching and Cooperative Scheduling","text":"<p>One of the largest features currently missing from the VM is coroutines (aka user-mode fiber scheduling). Coroutines are what will allow us to have multiple in-flight invocations into a module - some of which may be waiting on external events - without the need for complex multithreading logic or state machine machinations.</p> <p>In many cases once semaphores are exposed to callers we will not need to yield in the VM. The user will call into the module with provided semaphores, the work to perform will be recorded to one or more command buffers and submitted to the device, and then control return will return to the caller immediately.</p> <p>In cases requiring host readbacks that we were not able to remove, however, additional VM code may need to run prior to when the final semaphore is signaled. To preserve the asynchronous interface and immediate execution guarantees the compiler can emit explicit yield points (<code>vm.yield</code>) that are known-good locations for yielding (such as most resources not required after the yield having been flushed/discarded, partial synchronization scope availability if other work may be able to execute concurrently irrespective of the yielded coroutine, etc).</p> <p>When the VM encounters the yield at runtime it will suspend the coroutine until a defined condition is met. Many coroutines can be in various states at any given time and - thanks to the resource timeline - can still be memory safe. For example if two stateless invocations are made with a common wait semaphore both can be recorded and submitted without waiting on each other. If there is internal module state accessed the invocations are implicitly ordered by invocation order (similar to what Vulkan calls API order) based on internal resource timeline semaphores.</p> <p>Waking the coroutines can be performed by either an application-provided callback in the case of the application already having a periodic event which is doing bookkeeping (such as frame end callbacks when rendering or Looper idle events on Android), giving direct control over the frequency and location which IREE utilizes to perform additional work. A helper will be provided as well that runs a dedicated IREE thread to do this, but the expectation is that applications can often do a better (and importantly more predictable) job.</p> <p>By utilizing coroutines IREE will have a way to fill traditional pipeline bubbles even with execution from the same module (let alone across modules) in the situation where host readbacks or other logic is required. This increases overall throughput and utilization while reducing host wakeups as many coroutines can be processed at once to submit new work to the device queues, though it does not help reduce per-invocation latency.</p> <p>External code such as the HAL implementation or user ops may provide the wait handles used for continuation. For example, the HAL can expose a function that yields and wakes only when one or more timeline semaphores reach their target values:</p> <pre><code>// submit work\nhal.device.yield %semaphore4 &gt;= %sem4_target, %semaphore5 &gt;= %sem5_target\n// continue here, possibly much later in time\n</code></pre>"},{"location":"developers/design-docs/design-roadmap/#cellular-batching","title":"Cellular Batching","text":"<p>Though coroutines help throughput there is a way we've found to reduce latency that's been documented as cellular batching. This same technique has been implemented in prior internal systems and is one of the motivating design goals for IREE's creation. The core idea is to identify small uniform work that can be partitioned and scheduled greedily such as to enable batching or reduce associated invocation costs (such as refreshing accelerator SRAM/caches with new parameters). This usually manifests as finding large GEMM/GEMV operations using the same fixed parameters and either dynamically increasing the batch size by adding the waiting work (without deferring the actual execution time) or sequencing them back to back to ensure better cache utilization. Which approach is taken depends on any data dependencies that may be present (such as LSTM state feedback edges).</p> <p>With the foundation of coroutines in IREE it's possible to yield execution at any given point - including during command buffer recording - and wake on specific conditions. A majority of the logic can be built into the module itself with very little need for runtime machinery, as shared VM variables can be used to track pending work across invocations (even from different parts of the program) and flush based on logic wholly controlled by the user or compiler (such as count/max time latency/etc limits). This allows for the large variety of scheduling behavior various applications may want to use, such as a zero-latency batch-only-within-this-invocation to a Nagle's Algorithm-esque time or limit based behavior or even some learned model-specific windowing.</p> <p>Design work is still required on how to represent this in IR but the current thought is to model the regions in which deferred execution is possible and beneficial and allow during lowering to the VM additional transformations. This is similar to how the async-await behavior works in C# where the async keyword is just sugar that expands to additional generated helper utilities.</p> <p>A simple strawman representation for sequential dispatch may look like:</p> <pre><code>hal.scheduling_policy @defer_policy {\n  // max time, max count, max live memory, etc\n}\n...\nhal.command_buffer.dispatch.deferred @defer_policy, @dispatch, ...\n// vm.yield added here during lowering\n</code></pre> <p>There are many cases to explore and as cellular batching can have performance benefits of several orders of magnitudes it'll be one of the primary areas of research in the long-term.</p>"},{"location":"developers/design-docs/design-roadmap/#lowering-to-llvm-ir","title":"Lowering to LLVM IR","text":"<p>For scenarios where dynamic module loading is not required and entire modules can be compiled into applications we can lower the VM IR to LLVM IR within MLIR's transformation pipeline. Instead of embedding <code>vm.call</code> ops that are dispatched at runtime to things like the HAL we can instead lower to <code>llvm::CallInst</code> to runtime-resolved function pointers. This still enables all of the flexibility of heterogeneous/runtime-determined devices, pluggable diagnostics, and backend composition without any need for FlatBuffers or the VM bytecode interpreter.</p> <p>The VM was designed to make such a lowering easy and the C-style struct-based function pointer registration for runtime modules was designed to make emitting code that used it fairly robust even when linked in dynamically such as when embedded in shared objects.</p> <p>An extension of this is what we've been calling 'runtimeless mode', where the IREE VM linkage code is statically linked into the binary alongside the generated module LLVM IR. If only a single HAL backend is linked in then (with some build-fu) we should be able to get call devirtualization to reduce code size to precisely the functionality used by the module.</p>"},{"location":"developers/design-docs/design-roadmap/#improved-type-support","title":"Improved Type Support","text":"<p>Currently the VM only supports two types: <code>i32</code> and <code>vm.ref&lt;T&gt;</code>. This is an intentional limitation such that we can determine what is really needed to express the scheduling we perform, with the idea being that such a limited model will make it easier to use techniques like indirect command buffers to compile the VM itself to an accelerator executable that dispatches work without host involvement.</p> <p>As we port more models we may find a few primitives that are worth bringing into the VM design such that it's worth potential complications to future porting. These includes types like <code>f32</code> (for simple float calculations/comparisons), <code>list</code>/<code>dict</code> (easier python compatibility), and <code>vector&lt;4xf32&gt;</code> (for simple inline calculations that are not worth dispatch overhead/synchronization).</p>"},{"location":"developers/design-docs/design-roadmap/#indirect-command-bufferon-accelerator-execution","title":"Indirect Command Buffer/On-Accelerator Execution","text":"<p>Though IREE will use many different tricks such as predication to build deep pipelines there is still the requirement that the command recording and submission happens on the host CPU. Though the cost of this in terms of latency and power use can be minimized by coalescing and timelines there is still the possibility of non-trivial roundtrips being introduced that limit performance. For particular applications like low-power always-on compute or where there is significantly branchy behavior (such as search algorithms) it is important that the decision making logic as to what is dispatched runs as close to real-time as possible within the execution pipeline.</p> <p>The IREE VM is designed to be runnable on-device in a secure and cooperative way (no pointers, indirect buffer handles to allow for memory space rearrangement op-to-op, deterministic execution and explicit yield points, etc).</p> <p>The recent efforts to bring indirect command buffers to Vulkan and Metal's Indirect Command Buffers (that both derive inspiration from NV_command_list) are one such target for this. Either by lowering the VM IR to LLVM IR or SPIR-V, by a special conversion to target-specific forms, or by actually executing the VM bytecode directly on-device (it's ~1000 LoC) we should be able to prototype what full on-device usage is like. Even if only some VM functions the compiler deems useful to schedule on the device are used and the rest run on the host (particularly those functions calling imported functions) some of the most costly logic that creates tight coupling of the host and device scheduling can be limited.</p>"},{"location":"developers/design-docs/function-abi/","title":"Function ABI","text":"<p>Note</p> <p>Authored December, 2019</p> <p>Updated August, 2021</p> <p>A key job of the IREE compiler and runtime is capturing function call semantics from the originating system and providing mechanisms so that invocations can be performed in as similar way as possible in various target languages. In general, this requires additional metadata on top of the raw characteristics of a function. Where possible, this is done by attaching attributes to a function.</p> <ul> <li><code>iree.abi</code> : JSON encoded description of the function's calling convention.</li> </ul>"},{"location":"developers/design-docs/function-abi/#v1-abi","title":"V1 ABI","text":"<p>This is the default ABI supported by the IREE VM invocations. It attempts to provide a default calling convention that can be used without further reflection metadata but which may be enhanced with it.</p> <p>It natively allows monomorphic functions to be exported where arguments and results are composed of the following types:</p>"},{"location":"developers/design-docs/function-abi/#value-types","title":"Value Types:","text":"<ul> <li>Byte aligned integer type (i8, i16, i32, i64)</li> <li>Floating point value (f16, f32, f64)</li> </ul>"},{"location":"developers/design-docs/function-abi/#reference-types","title":"Reference Types:","text":"<ul> <li> <p>ND-Array buffers of Value Types:</p> <ul> <li>Simple: Packed, C-layout</li> <li>Strided: Arbitrary layout with strides (future)</li> </ul> </li> <li> <p>String (byte arrays)</p> </li> <li> <p>Opaque reference object</p> </li> </ul>"},{"location":"developers/design-docs/function-abi/#sequence-types","title":"Sequence Types:","text":"<ul> <li>Tuples: fixed length lists where each position has its own type bound</li> <li>Homogenous list: lists of arbitrary size where a single type bound applies     to all elements</li> </ul> <p>The intent with these low level types is that calling conventions can be synthesized to bind arbitrary high level, domain/language specific signatures to these types, possibly by way of additional reflection metadata.</p>"},{"location":"developers/design-docs/function-abi/#representations","title":"Representations:","text":"<p>The above are all representable with native constructs in the VM:</p> <ul> <li> <p>ValueType:</p> <ul> <li>Runtime:     <code>iree_vm_value</code></li> <li>Compile Time: primitive MLIR integer/floating point types</li> </ul> </li> <li> <p>Simple ND-Array Buffer:</p> <ul> <li>Runtime:     <code>iree_hal_buffer_view</code></li> <li>Compile Time: <code>tensor&lt;&gt;</code></li> </ul> </li> <li> <p>String:</p> <ul> <li>Runtime:     <code>iree_vm_list</code>     containing <code>i8</code></li> <li>Compile Time: <code>!util.list&lt;i8&gt;</code></li> </ul> </li> <li> <p>Tuple:</p> <ul> <li>Runtime:     <code>iree_vm_list</code>     of variant</li> <li>Compile Time: <code>!util.list&lt;?&gt;</code></li> <li>Note that these are statically type erased at the boundary.</li> </ul> </li> <li> <p>TypedList (homogenous):</p> <ul> <li>Runtime:     <code>iree_vm_list</code>     of <code>T</code></li> <li>Compile Time: <code>!util.list&lt;T&gt;</code></li> </ul> </li> </ul>"},{"location":"developers/design-docs/function-abi/#extended-type-calling-conventions","title":"Extended Type Calling Conventions","text":"<p>While the above features of the native ABI may be sufficient for direct use by various programs, many programs and callers will need to represent various higher level types, consistently mapping them to the above facilities. This section describes calling conventions for various higher level types which do not map 1:1 to the above. Not all source language types are representable, and extending these calling conventions (and the fundamental types above) is demand driven.</p> <p>All of these calling conventions presume that the arity of the arguments/results of the raw function matches the user-level function, meaning that the calling convention is specified per argument/result. Higher-level whole function transformations may also exist for some domains but are outside of the scope of this specification.</p>"},{"location":"developers/design-docs/function-abi/#structure","title":"Structure","text":"<p>A <code>Structure</code> is a common enough entity to have a dedicated calling convention. In C-like languages, this may just be a <code>struct</code>. In Python, it is typically a <code>dict</code> with an associated schema providing a name and type bound for each of its slots. In both, its slots are of fixed arity.</p> <p>In this convention, such a structure is represented as a <code>Tuple</code> in the native calling convention (i.e. <code>!util.list</code> of variant type). The order of the elements of the tuple are the natural order of the structure, where that is either:</p> <ul> <li>For a C-like system where order is determinate, it is the order of     declaration.</li> <li>For a name-based system (i.e. bind to <code>dict</code>) where no order is defined, the     natural order will be the lexically sorted order of the keys.</li> </ul>"},{"location":"developers/design-docs/function-abi/#string","title":"String","text":"<p>Most languages interop between byte arrays (i.e. the native ABI <code>String</code> type) by way of applying an encoding. Such strings are just a sequence of bytes (i.e. <code>!util.list&lt;i8&gt;</code>).</p>"},{"location":"developers/design-docs/function-abi/#typed-list","title":"Typed List","text":"<p>High level lists which all share the same type bound are represented as a <code>TypedList</code> in the native ABI.</p>"},{"location":"developers/design-docs/function-abi/#ndarray-of-reference-types","title":"NDArray of Reference Types","text":"<p>NDArrays of reference types are considered separately from those of value types. Internally, the code generated for them is completely different from what gets generated for numeric based arrays (i.e. has ref-counting, ownership semantics, non-POD, etc). These types are permitted for completeness, not necessarily performance: by nature they are already indirected and have overheads.</p> <p>In the native ABI, these are represented as a composite tuple type (i.e. today a list since sugar for tuple is not yet defined): <code>!iree.tuple&lt;!util.list&lt;T&gt;, !util.list&lt;index&gt;&gt;</code>. The first element of the tuple is the list of values, packed with a C-Layout and the second element is the list of dimension sizes.</p>"},{"location":"developers/design-docs/function-abi/#reflection","title":"Reflection","text":"<p>Additional reflection metadata may be encoded in a custom JSON form, providing additional typing hints for arguments and results. If present, this will be a reflection attribute with key <code>d</code>, containing a serialized JSON object.</p> <p>The JSON object contains:</p> <ul> <li><code>a</code> (array): List of type records for each argument.</li> <li><code>r</code> (array): List of type records for each argument.</li> </ul> <p>Type records are one of:</p> <ul> <li> <p>A string naming a primitive type:</p> <ul> <li><code>i[0-9]+</code>: Integer type with given bit width</li> <li><code>f[0-9]+</code>: IEEE floating point type with given bit width</li> <li><code>bf16</code>: BFloat16</li> </ul> </li> <li> <p>JSON <code>null</code>: A null reference value</p> </li> <li> <p><code>\"unknown\"</code>: An unknown/unmapped type</p> </li> <li> <p>An array, interpreted as a tuple describing a compound type.</p> </li> </ul>"},{"location":"developers/design-docs/function-abi/#compound-type-tuples","title":"Compound type tuples","text":"<p>A compound type tuple has a type identifier as its first element, followed with type specific fields:</p> <ul> <li><code>[\"named\", \"key\", {slot_type}]</code>: Associates a name with a slot. This is     used with the root argument list to denote named arguments that can be     passed positionally or by keyword.</li> <li><code>[\"ndarray\", {element_type}, {rank}, {dim...}]</code>: For unknown rank, the     <code>rank</code> will be <code>null</code> and there will be no dims. Any unknown dim will be     <code>null</code>.</li> <li><code>[\"slist\", {slot_type...}]</code>: An anonymous structured list of fixed arity and     slot specific types. If there are gaps in the list, empty slots will have a     <code>null</code> type.</li> <li><code>[\"stuple\", {slot_type...}]</code>: Same as <code>slist</code> but some languages     differentiate between sequences represented as lists and those represented     as tuples (read-only lists).</li> <li><code>[\"sdict\", [\"key\", {slot_type}]...]</code>: An anonymous structure with named     slots. Note that when passing these types, the keys are not passed to the     function (only the slot values).</li> <li><code>[\"py_homogeneous_list\", {element_type}]</code>: A Python list of unknown size     with elements sharing a common type bound given by <code>element_type</code>.</li> </ul>"},{"location":"developers/design-docs/hip-hal-driver/","title":"HIP HAL driver","text":"<p>This document lists technical details regarding the HIP implemenation of IREE's Hardware Abstraction Layer, called a HIP HAL driver.</p> <p>IREE provides a Hardware Abstraction Layer (HAL) as a common interface to different compute accelerators. IREE HAL's design draws inspiration from modern GPU architecture and APIs; so implementing a HAL driver using HIP is mostly straightforward; though there are places we need emulation given no direct mapping concepts or mechanisms. HIP HAL driver draws inspiration from the CUDA HAL driver and the code structure is based off of that implementation.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#overall-design-choices","title":"Overall design choices","text":"","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#hip-driver-vs-runtime-api","title":"HIP driver vs runtime API","text":"<p>IREE HAL's design draws inspiration from modern GPU APIs--it provides explicit control of low-level GPU objects. The compiler is expected to plan the object lifetime and schedule workload and synchronization in an optimized way; IREE HAL implementation and the underlying GPU driver stack is expected to be a thin layer without much smarts and magic.</p> <p>Unlike CUDA, HIP doesn't provide two separate API's with the same functionality in the name of driver and runtime. Instead it extends the HIP API with Modules and Ctx control API's that the CUDA driver API's exclusively offer. At runtime the HIP HAL driver will load the <code>libamdhip64.so</code>/<code>amdhip64.dll</code> library dynamically.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#gpu-objects","title":"GPU Objects","text":"","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#driver","title":"Driver","text":"<p>There is no direct HIP construct that map to the IREE HAL <code>iree_hal_driver_t</code> abstraction. We use it to hold the dynamic symbols loaded for all devices, and device enumeration and creation.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#device","title":"Device","text":"<p><code>iree_hal_hip_device_t</code> implements <code>iree_hal_device_t</code> to provide the interface to HIP GPU device by wrapping a <code>hipDevice_t</code>. For each device, right now we create two <code>hipStream_t</code>s--one for issuing commands for memory allocation and kernel launches as instructed by the program; the other for issue host callback functions after dispatched command buffers completes. See synchronization section regarding the details.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#async-allocation","title":"Async allocation","text":"<p>The HIP HAL driver supports async allocation (<code>iree_hal_device_queue_alloca()</code> and <code>iree_hal_device_queue_dealloca()</code>) via HIP stream ordered memory allocation.</p> <p>The <code>async_allocations</code> in the <code>iree_hal_hip_device_params_t</code> struct allows to enable this feature.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#command-buffer","title":"Command buffer","text":"<p><code>iree_hal_command_buffer_t</code> is a recording of commands to issue to the GPU; when the command buffer is submitted to the device it's then actually executed on the GPU asynchronously.</p> <p>Two implementations of <code>iree_hal_command_buffer_t</code> exist in the HIP HAL driver--one backed by <code>hipGraph_t</code> and the other backed by <code>hipStream_t</code>.</p> <p><code>hipGraph_t</code> conceptually matches <code>iree_hal_command_buffer_t</code> better given it's a recording of commands to issue to the GPU. Also using the <code>hipGraph_t</code> API allows to easily encode fine grain dependencies between dispatch without having to create multiple streams. Therefore, the <code>hipGraph_t</code>-backed implementation is a more natural one. Though note that <code>hipGraph_t</code> API is meant to be used for recording once and replaying multiple times and there may be a performance penalty to using <code>hipGraph_t</code> API for one-shot command buffer.</p> <p>The <code>hipStream_t</code>-backed implementation just issues commands directly to a <code>hipStream_t</code> when recording. Commands issued to <code>hipStream_t</code> can be immediately sent to the GPU for execution; there is no recording and replaying separation. In order to match the recording semantics of <code>iree_hal_command_buffer_t</code>, to use the <code>hipStream_t</code>-backed command buffer, we need to first record the command buffer into an in-memory <code>iree_hal_deferred_command_buffer_t</code>, and then when applying the command buffer, we create a new <code>hipStream_t</code>-backed implementation.</p> <p>The <code>command_buffer_mode</code> in the <code>iree_hal_hips_device_params_t</code> struct allows to select which implementation to use.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#allocator","title":"Allocator","text":"<p>The allocator will forward allocation requests to <code>hipHostMalloc()</code> for host local memory, <code>hipMalloc()</code> for device local and host invisible memory, and <code>hipMallocManaged()</code> for device local and host visible memory.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#buffer","title":"Buffer","text":"<p>HIP buffers are represented either as a host pointer or a device pointer of type <code>hipDeviceptr_t</code>.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#executable","title":"Executable","text":"<p><code>iree_hal_executable_t</code> maps naturally to <code>hipModule_t</code>.</p> <p>The compiler generates a FlatBuffer containing a HSACO image as well as a list of entry point functions and their associated metadata (names, workgroup size, dynamic shared memory size, etc.). At runtime, the HIP HAL driver loads the HSACO image and creates <code>hipFunction_t</code>s out of it for various entry points.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#synchronization","title":"Synchronization","text":"","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#event","title":"Event","text":"<p><code>iree_hal_event_t</code> right now is not used in the compiler so it's not yet implemented in the HIP HAL driver.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#semaphore","title":"Semaphore","text":"<p>The IREE HAL uses semaphores to synchronize work between host CPU threads and device GPU streams. It's a unified primitive that covers all directions--host to host, host to device, device to host, and device to device, and allows flexible signal and wait ordering--signal before wait, or wait before signal. There is no limit on the number of waits of the same value too.</p> <p>The core state of a HAL semaphore consists of a monotonically increasing 64-bit integer value, which forms a timeline--signaling the semaphore to a larger value advances the timeline and unblocks work waiting on some earlier values. The semantics closely mirrors Vulkan timeline semaphore.</p> <p>In HIP, there is no direct equivalent primitives providing all the capabilities needed by the HAL semaphore abstraction. Therefore, to implement the support, we need to leverage multiple native CPU or HIP primitives under the hood.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#hipevent_t-capabilities","title":"<code>hipEvent_t</code> capabilities","text":"<p>The main synchronization mechanism is HIP event--<code>hipEvent_t</code>. As a functionality and integration baseline, we use <code>hipEvent_t</code> to implement the IREE HAL semaphore abstraction.</p> <p><code>hipEvent_t</code> natively supports the following capabilities:</p> <ul> <li>State: binary; either unsignaled or signaled. There can exist multiple   waits (e.g., via <code>hipEventSynchronize()</code> or <code>hipGraphAddEventWaitNode()</code>) for   the same <code>hipEvent_t</code> signal (e.g., via <code>hipEventRecord()</code> or   <code>hipGraphAddEventRecordNode()</code>).</li> <li>Ordering: must be signal before wait. Waiting before signal would mean   waiting an empty set of work, or previously recorded work.</li> <li>Direction: device to device, device to host.</li> </ul> <p>We need to fill the remaining capability gaps. Before going into details, the overall approach would be to:</p> <ul> <li>State: we need a 64-bit integer value timeline. Given the binary state of   a <code>hipEvent_t</code>, each <code>hipEvent_t</code> would just be a \"timepoint\" on the timeline.</li> <li>Ordering: we need to defer releasing the workload to the GPU until the   semaphore waits are reached on the host, or we can have some device   <code>hipEvent_t</code> to wait on.</li> <li>Direction: host to host and host to device is missing; we can support that   with host synchronization mechanisms.</li> </ul>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#signal-to-wait-analysis","title":"Signal to wait analysis","text":"<p>Concretely, for a given HAL semaphore, looking at the four directions:</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#cpu-signal","title":"CPU signal","text":"<p>A CPU thread signals the semaphore timeline to a new value.</p> <p>If there are CPU waits, it is purely on the CPU side. We just need to use common CPU notification mechanisms. In IREE we have <code>iree_event_t</code> wrapping various low-level OS primitives for it. So we can just use that to represent a wait timepoint. We need to keep track of all CPU wait timepoints in the timeline. After a new signaled value, go through the timeline and notify all those waiting on earlier values.</p> <p>If there are GPU waits, given that there are no way we can signal a <code>hipEvent_t</code> on CPU, one way to handle this is to cache and defer the submission batches by ourselves until CPU signals past the desired value. To support this, we would need to implement a deferred/pending actions queue.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#gpu-signal","title":"GPU signal","text":"<p>GPU signals can only be through a <code>hipEvent_t</code> object, which has a binary state. We need to advance the timeline too. One way is to use <code>hipLaunchHostFunc()</code> to advance from the CPU side with <code>iree_hal_semaphore_list_signal()</code>. This additionally would mean we can reuse the logic form CPU signaling to unblock CPU waits.</p> <p>After advancing the timeline from the CPU side with <code>hipLaunchHostFunc()</code>, we can release more workload from the deferred/pending actions queue to the GPU. Though, per the documentation of <code>hipLaunchHostFunc()</code>, \"the host function must not make any HIP API calls.\" So we cannot do that directly inside <code>hipLaunchHostFunc()</code>; we need to notify another separate thread to call HIP APIs to push more work to the GPU. So the deferred/pending action queue should have an associcated thread.</p> <p>For GPU waits, we can also leverage the same logic--using CPU signaling to unblock deferred GPU queue actions. Though this is performant, given that the CPU is involved for GPU internal synchronization. We want to use <code>hipEvent_t</code> instead:</p> <ul> <li>We keep track of all GPU signals in the timeline. Once we see a GPU wait   request, try to scan the timeline to find a GPU signal that advances the   timeline past the desired value, and use that for waiting instead. (This   actually applies to CPU waits too, and it's an optimization over pure   CPU side <code>iree_event_t</code> polling.)</li> <li>We may not see GPU signal before seeing GPU wait requests, then we can also   keep track of all GPU waits in the timeline. Later once see either a CPU   signal or GPU signal advancing past the waited value, we can handle them   accordingly--submitting immediately or associating the <code>hipEvent_t</code>.   This would also guarantee the requirement of <code>hipEvent_t</code>--recording should   happen before waiting.</li> <li>We can use the same <code>hipEvent_t</code> to unblock multiple GPU waits. That's allowed,   though it would mean we need to be careful regarding <code>hipEvent_t</code> lifetime   management. Here we can use reference counting to see how many timepoints   are using it and automatically return to a pool once done.</li> </ul> <p>Another problem is that per the <code>hipLaunchHostFunc()</code> doc, \"the function will be called after currently enqueued work and will block work added after it.\" We don't want the blocking behavior involving host. So we can use a dedicated <code>hipStream_t</code> for launching the host function, waiting on the <code>hipEvent_t</code> from the original stream too. We can also handle resource deallocation together there.</p>","tags":["GPU","HIP"]},{"location":"developers/design-docs/hip-hal-driver/#data-structures","title":"Data structures","text":"<p>To summarize, we need the following data structures to implement HAL semaphore:</p> <ul> <li><code>iree_event_t</code>: CPU notification mechanism wrapping low-level OS primitives.   Used by host wait timepoints.</li> <li><code>iree_event_pool_t</code>: a pool for CPU <code>iree_event_t</code> objects to recycle.</li> <li><code>iree_hal_hip_event_t</code>: GPU notification mechanism wrapping a <code>hipEvent_t</code> and   a reference count. Used by device signal and wait timepoints. Associates with   a <code>iree_hal_hip_event_pool_t</code> pool--returns to the pool directly on once   reference count goes to 0.</li> <li><code>iree_hal_hip_event_pool_t</code>: a pool for GPU <code>iree_hal_hip_event_t</code> objects   to recycle.</li> <li><code>iree_hal_hip_timepoint_t</code>: an object that wraps a CPU <code>iree_event_t</code> or   GPU <code>iree_hal_hip_event_t</code> to represent wait/signal of a timepoint on a   timeline.</li> <li><code>iree_hal_hip_timepoint_pool_t</code>: a pool for <code>iree_hal_hip_timepoint_t</code>   objects to recycle. This pool builds upon the CPU and GPU event pool--it   acquires CPU/GPU event objects there.</li> <li><code>iree_hal_hip_timeline_semaphore_t</code>: contains a list of CPU wait and GPU   wait/signal timepoints.</li> <li><code>iree_hal_hip_queue_action_t</code>: a pending queue action (kernel launch or   stream-ordered allocation).</li> <li><code>iree_hal_hip_pending_queue_actions_t</code>: a data structure to manage pending   queue actions. It provides APIs to enqueue actions, and advance the queue on   demand--queue actions are released to the GPU when all their wait semaphores   are signaled past the desired value, or we can have a <code>hipEvent_t</code> object already   recorded to some <code>hipStream_t</code> to wait on.</li> </ul>","tags":["GPU","HIP"]},{"location":"developers/design-docs/invocation-execution-model/","title":"Invocation execution model","text":"<p>Authored June, 2022</p> <p>This documents the behavior of the user-visible invocation mechanism IREE uses to schedule program execution. Internally IREE uses a very similar modeling for tracking its internal workloads and in kind carries that down to target APIs and devices that themselves use a very similar model. The intent is to expose the device model in an abstracted way that allows for the full capture and communication of the execution intent to be propagated to the hardware that executes it. Though here we focus on the user-visible portion of execution there is really only one \"IREE execution model\" and the entire stack follows the same design. At its core this design is just an instantiation of an out-of-order execution algorithm such as those originating from the 1960's.</p>"},{"location":"developers/design-docs/invocation-execution-model/#glossary","title":"Glossary","text":"<pre><code>stateDiagram\n    state UserApplication {\n      direction BT\n      state Context0 {\n        ModuleA--&gt;ModuleAState0\n        ModuleB--&gt;ModuleBState0\n      }\n      state Context1 {\n        ModuleA--&gt;ModuleAState1\n        ModuleB--&gt;ModuleBState1\n        ModuleC--&gt;ModuleCState1\n      }\n      state ModuleA {\n        @func1\n        @func2\n      }\n      state ModuleB {\n        @func3\n        @func4\n      }\n      state ModuleC {\n        @func5\n      }\n    }</code></pre>"},{"location":"developers/design-docs/invocation-execution-model/#program","title":"Program","text":"<p>An IREE program is a collection of modules instantiated in a context from which invocations can be made. Invocations are ordered on a user-controlled timeline that uses fences to define the execution order requirements to enable out-of-order execution. A hosting user application may have multiple programs or multiple instances of the same program available and running invocations at a time across multiple timelines.</p>"},{"location":"developers/design-docs/invocation-execution-model/#module","title":"Module","text":"<p>Modules define executable code and data that can be loaded, linked, and run \u00e0 la ELF shared libraries. Modules may be implemented as C/C++, generated bytecode or C sources from the IREE compiler, or any other mechanism that can run code and implement the <code>iree_vm_module_t</code> interface. Modules on their own are read-only and can be reused across many contexts.</p> <p>Traditional ML runtimes would use a model (graph, etc) as their module representation. In IREE everything is a module including runtime subsystems like the HAL and user-provided custom code. This ensures that anything IREE can do can be externalized and replaced by users without needing to modify the core IREE code.</p>"},{"location":"developers/design-docs/invocation-execution-model/#context","title":"Context","text":"<p>A collection of modules are linked and instantiated in a context. Each context operates independently and carries its own copies of mutable module state. Invocations execute within a context scope and hosting applications coordinate across contexts as required. Contexts are cheap to create (microseconds) and retain (~100B + program state) such that users can decide how to manage them based on their scenario.</p> <p>Traditional ML runtimes would call these \"sessions\" but in IREE everything is a program. Whether the program is stateful or stateless and how the program is invoked is up to the program author.</p>"},{"location":"developers/design-docs/invocation-execution-model/#invocation","title":"Invocation","text":"<p>An invocation represents a single call into a module exported function using the program state stored in a context. Users can decide whether to perform synchronous blocking invocations or asynchronous non-blocking invocations per-call; the behavior of the invocation is independent from the target function and a user program may contain a mix of both.</p> <p>As an example a user program may synchronously invoke a <code>@query_output_shapes</code> function to preallocate storage for an asynchronous <code>@execute_in_place</code> function to write into.</p>"},{"location":"developers/design-docs/invocation-execution-model/#timeline","title":"Timeline","text":"<p>A timeline represents the observable order of execution. Users define their own timelines and communicate them to IREE via fences. Timelines do not match up with the order of invocations unless the user dictates they must by way of fences. In the absence of fences all invocations execute in an arbitrary order and they may execute concurrently just as threads in C with no barriers.</p> <p>Each timeline can be thought of as an independent clock domain that may operate asynchronously at its own frequency with only fences acting to tie separate timelines together. This directly mirrors real hardware constraints like clock domain crossing as each execution scope (thread on core, driver calls to queues, kernel queues to device queues, device queues to compute unit queues, etc) is naturally operating at different rates and well-designed systems must tolerate that variability.</p>"},{"location":"developers/design-docs/invocation-execution-model/#fence","title":"Fence","text":"<p>A fence is a specific point of progress in one or more timelines acting as a barrier, fork, or join point. Fences only guard execution ordering and not any particular resources though users can use them to guard resources by defining when in time the resources are available for use.</p> <p>Waits on fences are wait-until operations specifying that the timeline must reach  at least a specific point. This allows for flexible reordering and deferral of execution as executors can pull forward scheduled work based on policy (run similar work together, etc).</p>"},{"location":"developers/design-docs/invocation-execution-model/#hardware-abstraction-layer-hal","title":"Hardware Abstraction Layer (HAL)","text":"<p>The HAL is an optional feature of IREE that is used to provide a consistent interface across execution resources. It is used internally by IREE programs to define and submit work to devices and signal across them but may also be used by users to directly interface with hardware in a compatible way. Exposing the HAL API allows for users to efficiently manage their data and custom execution without expensive marshaling. Most users will only interact with HAL buffers as they work with their data but more advanced integrations can directly insert IREE into existing device contexts to transparently share scheduling and resources or insert their own code into IREE to pipeline custom execution.</p>"},{"location":"developers/design-docs/invocation-execution-model/#execution-by-timelines","title":"Execution by Timelines","text":"<p>NOTE: this defines an execution scheme that IREE supports but a user may use one or more such schemes in a single program - just as a C application may mix single- and multi-threaded code within itself for different components.</p> <p>The combination of invocations, timelines, and fences allows users to provide future knowledge to lower layers of the system by declaring their availability requirements and the lower layers are then able to execute the work out-of-order so long as the specified requirements are met. The primary goal when designing for such a system is to specify as few requirements as possible in order to provide the maximum amount of scheduling freedom to the implementation.</p> <p>This makes timelines one of the most critical components of the interface. The purpose of invocations is to schedule work against one or more timelines and what happens within the invocations is an implementation detail of the program.</p>"},{"location":"developers/design-docs/invocation-execution-model/#sequential-execution","title":"Sequential Execution","text":"<p>Here we say \"a user invokes a function to schedule execution on a timeline\" vs. a more traditional \"a user invokes a function to execute work\" and this manifests in the IREE ABI as invocations taking fences defining specific points on timelines of which the user may observe:</p> <pre><code># Fences are effectively just timeline + integer tuples and are cheap to hold.\nwait_fence = my_timeline.at(t)\nsignal_fence = my_timeline.at(t+1)\n# Schedule work against the timeline.\n# All work prior to t must complete before execution can occur and after\n# execution the timeline will advance to t+1.\nasync_invoke(@some_fn, wait_fence, signal_fence)\n# The invocation may have returned immediately after the work was scheduled;\n# until the fence is reached no actual execution may have occurred. To\n# synchronize the user code with the timeline the user can block until the fence\n# is reached.\nsignal_fence.wait()\n</code></pre> <p>To the user this would appear as:</p> <pre><code>sequenceDiagram\n    User-&gt;&gt;@some_func: invoke\n    activate @some_func\n    @some_func-&gt;&gt;User: ;\n    @some_func--&gt;&gt;@some_func: wait t\n    @some_func--&gt;&gt;User: signal t+1\n    deactivate @some_func</code></pre> <p>This means from the user's perspective the actual operations performed by the invocation are not important: the only thing the user can observe in this situation is when the timeline reaches <code>t+1</code> as they specified. Whether internally the invocation needs many steps to complete as there are timelines internal to the program is an implementation detail. Actual execution may look like this:</p> <pre><code>sequenceDiagram\n    User-&gt;&gt;@some_func: invoke\n    activate @some_func\n    @some_func-&gt;&gt;User:  ;\n    @some_func-&gt;&gt;@some_func: ;\n    @some_func--&gt;&gt;Device A: ;\n    Device A--&gt;&gt;Device A: wait t\n    activate Device A\n    @some_func-&gt;&gt;@some_func: ;\n    @some_func--&gt;&gt;Device B: ;\n    activate Device B\n    @some_func-&gt;&gt;@some_func: ;\n    Device A--&gt;&gt;@some_func: ;\n    deactivate Device A\n    @some_func-&gt;&gt;@some_func: ;\n    @some_func--&gt;&gt;Device B: ;\n    activate Device B\n    deactivate @some_func\n    Device B--&gt;&gt;User: signal t+1\n    deactivate Device B\n    deactivate Device B</code></pre> <p>Even in this simple user-synchronous example the system is able to internally run several concurrent timelines with a minimal number of synchronization points and the lowest possible latency as the user is immediately notified without any intermediate layers needing to be woken, scheduled, executed, and passed on.</p>"},{"location":"developers/design-docs/invocation-execution-model/#pipelined-execution","title":"Pipelined Execution","text":"<p>The true power of timelines comes from the ability to pipeline execution. Users define DAGs with fences and can construct arbitrarily complex execution topologies whether from the same program or across multiple programs:</p> <pre><code>stateDiagram\n    direction LR\n    state fence0 &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fence0\n    fence0 --&gt; @fn0\n    state fence1 &lt;&lt;fork&gt;&gt;\n    @fn0 --&gt; fence1\n    fence1 --&gt; @fn1\n    fence1 --&gt; @fn2\n    state fence2 &lt;&lt;join&gt;&gt;\n    @fn1 --&gt; fence2\n    @fn2 --&gt; fence2\n    @fn3 --&gt; fence2\n    fence0 --&gt; @fn4\n    @fn4 --&gt; fence2\n    fence2 --&gt; [*]</code></pre> <p>This is a simple extension to the synchronous example using the same primitives:</p> <pre><code># Timeline is defined by the user.\nfence_a = my_timeline.at(t)\nfence_b = my_timeline.at(t+1)\nfence_c = my_timeline.at(t+2)\n# Invocations are launched using the fences and may not complete immediately.\nasync_invoke(@fn0, fence_a, fence_b)\nasync_invoke(@fn1, fence_b, fence_c)\nasync_invoke(@fn2, fence_b, fence_c)\nasync_invoke(@fn3, None, fence_c)\nasync_invoke(@fn4, fence_a, fence_c)\n# Blocking here but no need to; could pass fence_c on to other invocations.\nfence_c.wait()\n</code></pre> <p>The critical point of this being that the user never had to wait for any particular invocation to complete before being able to schedule more work against the timeline, even if those invocations could themselves not complete synchronously. The lower layers of the system are able to fully model the execution as early as possible without needing to communicate (and importantly synchronize) with the user.</p>"},{"location":"developers/design-docs/invocation-execution-model/#io","title":"I/O","text":"<p>Users define the semantics of their programs themselves. For example if the user knows the precise shape of an output buffer they can preallocate the buffer and pass it in. If they don't know they can decide to factor out the shape calculation and invoke that synchronously in order to compute the shape, allocate the appropriately sized buffer, and pass that in. Or they could decide to only deal with synchronous invocations and return a program-allocated buffer view with the appropriate shape in their callback. IREE does not dictate the design of user programs and as such enables mixed stateful/stateless, asynchronous/synchronous, and arbitrary scheduling models (enqueue/drain, windowing, etc).</p> <p>Inputs and outputs to invocations are provided by the user as primitive values (integers, floats, etc), supported builtin types (lists, byte buffers/strings), custom user types, and HAL types like buffers or buffer views (buffers + shape and type metadata). One or more wait fences can be used to order invocation access to one or more inputs by indicating that the resource is not available until a certain fence is reached. Similarly one or more signal fences can be used to order subsequent access to the resources by indicating the advancement of the timeline when they are available.</p> <pre><code># wait_fence_a must be reached before buffer_a and buffer_b can be read.\n# wait_fence_b must be reached before buffer_c can be read.\n# buffer_a will be ready to read when signal_fence_a has been reached.\nasync_invoke(@fn,\n             (wait_fence_a, buffer_a, buffer_b),\n             42,  # no ordering required on value types\n             (wait_fence_b, buffer_c),\n             (signal_fence_a, buffer_a))\n</code></pre> <p>The above example demonstrates an in-place operation on <code>buffer_a</code>. It's also possible for invocations to return values:</p> <pre><code>result = invoke(@sum, 1, 2)  # = 3\n</code></pre> <p>When executed asynchronously a callback or any construct that can be built upon them (like promises/futures) can receive the results:</p> <pre><code>def my_callback(result):\n  print(result)  # 3\nasync_invoke(@sum, 1, 2, my_callback)\n</code></pre>"},{"location":"developers/design-docs/invocation-execution-model/#stream-ordered-allocations","title":"Stream-ordered Allocations","text":"<p>Invocations generally have only a few KB of overhead and pipelined command buffers take only a small amount more. Storage buffers, however, can easily take hundreds of MB per invocation for I/O and transient state. This compounds as program usage becomes more complex or multiple programs are involved. IREE supports traditional host-ordered allocations (\u00e0 la malloc/free) for persistent buffers like large constants/read-only data or user-managed ringbuffers. Stream-ordered allocations are also supported to allow for pooled buffer reservations that can be allocated in a scheduled order alongside program execution.</p> <p>For more detailed examples see the CUDA blog posts describing their implementation: part 1, part 2.</p> <p>With stream-ordered allocations each allocation and deallocation operation is scheduled with wait and signal fences just as with invocations. This allows these allocation operations to execute remotely on device without host program involvement. For example, scheduling <code>alloca0</code>/<code>dealloca0</code> and <code>alloca1</code>/<code>dealloca1</code> interleaved with the function execution allows for the transient memory required for executing <code>@fn0</code> to remain uncommitted until immediately before it is executed, committed during execution, and then decommitted immediately after execution. The memory required for passing data from <code>@fn0</code> to the subsequent <code>@fn1</code> and <code>@fn2</code> survives until after they have completed executing before being decommitted. By using the same scheduling primitives as execution the allocation topology can be as arbitrarily complex as the invocation topology:</p> <pre><code>stateDiagram\n    direction LR\n    state fence0a &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fence0a\n    state fence0b &lt;&lt;fork&gt;&gt;\n    fence0a --&gt; alloca0\n    fence0a --&gt; alloca1\n    alloca0 --&gt; fence0b\n    alloca1 --&gt; fence0b\n    fence0b --&gt; @fn0\n    state fence1a &lt;&lt;fork&gt;&gt;\n    @fn0 --&gt; fence1a\n    state fence1b &lt;&lt;fork&gt;&gt;\n    fence1a --&gt; dealloc0\n    dealloc0 --&gt; fence1b\n    fence1b --&gt; @fn1\n    fence1b --&gt; @fn2\n    state fence2a &lt;&lt;join&gt;&gt;\n    @fn1 --&gt; fence2a\n    @fn2 --&gt; fence2a\n    state fence2b\n    fence2a --&gt; dealloc1\n    state fence2b &lt;&lt;join&gt;&gt;\n    dealloc1 --&gt; fence2b\n    fence2b --&gt; [*]</code></pre> <p>When operating in this way allocations from the host-perspective are just reservations for a slice of pooled storage that will be committed at some point in the future. Likewise deallocations from the host-perspective release the prior reservation and schedule the paired decommit at some point in the future. Scheduling N sequential invocations thus requires only enough committed storage for a single invocation in addition to the I/O (unless that too is stream-ordered).</p> <p>This scheduling behavior allows for both minimal peak memory consumption regardless of the number of programs or invocation pipeline depth and sharing of committed storage across programs: the memory consumption of a program at rest is near zero when stateless and the sum of all state when stateful. Target devices that natively support stream-ordered allocations (like CUDA) can even share pools across processes.</p> <p>The other provided feature in combination with the fence guaranteed forward progress is that so long as the memory pool can service a single request execution can still continue even when constrained. A device can serialize two independent invocations requiring 400MB of transient memory when the system only has 512MB available with no user-visible impact besides increased latency. This does require the user to ensure they schedule work that is possible to run or rely on the target system having paging in order to lighten the strictness of the pool quotas.</p> <p>Stream-ordered allocations performed by the user for invocation inputs can be declared as transferred to the program. This allows the program to eagerly deallocate or reuse the input storage while still preserving the internal scheduling requirements of the program.</p>"},{"location":"developers/design-docs/invocation-execution-model/#internal-state","title":"Internal State","text":"<p>A stateful program may contain internal timelines that it uses to order its own execution. Take for example this simple stateful program:</p> <pre><code>class TrivialKernel(Program):\n  _x0 = Program.export_global(x_type)\n  def get(self):\n    return self._x0\n  def set(self, x=x_type):\n    self._x0 = x\n  def matmul(self, x=y_type):\n    self._x0 = self._matmul(x, self._x0)\n  @Program.kernel\n  def _matmul(x, x0):\n    return jnp.matmul(x, x0)\n</code></pre> <p>Each invocation of <code>matmul</code> needs to be executed in-order with prior invocations as there is a data dependency established on <code>self._x0</code>. Attempts to <code>get</code> or <code>set</code> must also be sequenced correctly with the <code>matmul</code> invocations. A basic usage like this:</p> <pre><code>m = TrivialKernel()\nm.set(input)\nm.matmul(a)\nm.matmul(b)\nm.matmul(c)\noutput = m.get()\nprint(output)  # implicit wait\n</code></pre> <p>Would be executed as:</p> <pre><code>sequenceDiagram\n    activate User\n    User-&gt;&gt;TrivialKernel: @set(input)\n    activate TrivialKernel\n    TrivialKernel--&gt;&gt;Device: ;\n    deactivate TrivialKernel\n    activate Device\n    TrivialKernel-&gt;&gt;User: ;\n    User-&gt;&gt;TrivialKernel: @matmul(a)\n    activate TrivialKernel\n    TrivialKernel--&gt;&gt;Device: ;\n    deactivate TrivialKernel\n    TrivialKernel-&gt;&gt;User: ;\n    User-&gt;&gt;TrivialKernel: @matmul(b)\n    activate TrivialKernel\n    TrivialKernel--&gt;&gt;Device: ;\n    deactivate TrivialKernel\n    TrivialKernel-&gt;&gt;User: ;\n    User-&gt;&gt;TrivialKernel: @matmul(c)\n    activate TrivialKernel\n    TrivialKernel--&gt;&gt;Device: ;\n    deactivate TrivialKernel\n    TrivialKernel-&gt;&gt;User: ;\n    User-&gt;&gt;TrivialKernel: @get()\n    activate TrivialKernel\n    TrivialKernel--&gt;&gt;Device: ;\n    deactivate TrivialKernel\n    TrivialKernel-&gt;&gt;User: ;\n    Device--&gt;&gt;Device: ;\n    deactivate User\n    User-&gt;&gt;User: (wait)\n    Device--&gt;&gt;User: (signal)\n    deactivate Device\n    activate User\n    User-&gt;&gt;User: print(output)\n    deactivate User</code></pre> <p>Note that although the user provided no timeline of their own execution is still ordered correctly due to the internal timeline constructed by the program. If the user wanted to also pipeline execution with another program they could do so by providing their own fences.</p>"},{"location":"developers/design-docs/metal-hal-driver/","title":"Metal HAL driver","text":"<p>This document lists technical details regarding the Metal implemenation of IREE's Hardware Abstraction Layer, called a Metal HAL driver.</p> <p>IREE provides a Hardware Abstraction Layer (HAL) as a common interface to different compute accelerators. IREE HAL's design draws inspiration from modern GPU architecture and APIs; so implementing a HAL driver using modern GPU APIs is generally straightforward. This applies to the Metal HAL driver.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#overall-design-choices","title":"Overall Design Choices","text":"","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#metal-versions","title":"Metal Versions","text":"<p>Currently the Metal HAL driver expects Metal 3 capabilities. Metal 3 was released late 2022 and are supported since macOS Ventura and iOS 16. It covers recent Apple silicon GPUs including A13+ and M1+ chips and others.</p> <p>In the future, we expect to increase the support to cover Metal 2 capabilities. Metal 2 introduces useful features like argument buffer and others that are necessary for performance and make IREE HAL implementation simpler. Metal 2 was released late 2017 and are supported since macOS High Sierra and iOS 11. It is already dominant (macOS, iOS).</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#programming-languages-and-libraries","title":"Programming Languages and Libraries","text":"<p>The Metal framework only exposes Objective-C or Swift programming language APIs. Metal HAL driver needs to inherit from common HAL abstraction definitions, which are in C. To minimize dependency and binary size and increase performance, we use Metal's Objective-C API for implementing the Metal HAL driver. Header (<code>.h</code>) and implementation (<code>.m</code>) files are put adjacent to each other.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#object-lifetime-management","title":"Object Lifetime Management","text":"<p>Objective-C uses refcount for tracking object lifetime and managing memory. This is traditionally done manually by sending <code>retain</code> and <code>release</code> messages to Objective-C objects. Modern Objective-C allows developers to opt in to use Automatic Reference Counting to let the compiler to automatically deduce and insert <code>retain</code>/<code>release</code> where possible to simplify the burdern of manual management.</p> <p>We don't use ARC in the Metal HAL driver given that IREE has its own object refcount and lifetime management mechanism. Metal HAL GPU objects are tracked with that to be consistent with others. Each Metal HAL GPU object <code>retain</code>s the underlying Metal <code>id&lt;MTL*&gt;</code> object on construction and <code>release</code>s on destruction.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#gpu-objects","title":"GPU Objects","text":"<p>Metal is one of the main modern GPU APIs that provide more explicit control over the hardware. The mapping between IREE HAL classes and Metal protocols are relatively straightforward:</p> IREE HAL Class Metal Protocol <code>iree_hal_driver_t</code> N/A <code>iree_hal_device_t</code> <code>MTLDevice</code> <code>iree_hal_command_buffer_t</code> <code>MTLCommandBuffer</code> <code>iree_hal_semaphore_t</code> <code>MTLSharedEvent</code> <code>iree_hal_allocator_t</code> N/A <code>iree_hal_buffer_t</code> <code>MTLBuffer</code> <code>iree_hal_executable_t</code> <code>MTLLibrary</code> <code>iree_hal_executable_cache_t</code> N/A <p>In the following subsections, we go over each pair to provide more details.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#driver","title":"Driver","text":"<p>There is no native driver abstraction in Metal. IREE's Metal HAL driver still provides a <code>iree_hal_metal_driver_t</code> struct to implement the common <code>iree_hal_driver_t</code> struct. <code>iree_hal_metal_driver_t</code> just <code>retain</code>s all available Metal devices in the system during its lifetime, to guarantee that we have the same <code>id&lt;MTLDevice&gt;</code> for device querying and creation.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#device","title":"Device","text":"<p><code>iree_hal_metal_device_t</code> implements <code>iree_hal_device_t</code> to provide the interface to Metal GPU device by wrapping a <code>id&lt;MTLDevice&gt;</code>. Upon construction, <code>iree_hal_metal_device_t</code> creates and retains one queue for both dispatch and transfer during its lifetime. In the future we expect to spport multiple queues for better concurrency.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#command-buffer-submission","title":"Command buffer submission","text":"<p>In IREE HAL, command buffers are directly created from the <code>iree_hal_device_t</code>. It's also directly submitted there via <code>iree_hal_device_queue_execute()</code>. Each execution takes a batch of command buffers, together with a list of waiting <code>iree_hal_semaphore_t</code>s and a list signaling <code>iree_hal_semaphore_t</code>s. There is no direct mapping of such structure in Metal; so we performs the submission in three steps:</p> <ol> <li>Create a new <code>MTLCommandBuffer</code> to <code>encodeWaitForEvent:value</code> for all    waiting <code>iree_hal_semaphore_t</code>s and commit this command buffer.</li> <li>Commit all command buffers in the submmision batch.</li> <li>Create a new <code>MTLCommandBuffer</code> to <code>encodeSignalEvent:value</code> for all    signaling <code>iree_hal_semaphore_t</code>s and commit this command buffer.</li> </ol> <p>Such submission enables asynchronous execution of the workload on the GPU.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#queue-ordered-allocation","title":"Queue-ordered allocation","text":"<p>Queue-ordered asynchronous allocations via <code>iree_hal_device_queue_alloc</code> is not fully supported yet; it just translates to blocking wait and allocation.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#collectives","title":"Collectives","text":"<p>Collectives suppport is not yet implemented.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#profiling","title":"Profiling","text":"<p>The Metal HAL driver supports profiling via <code>MTLCaptureManager</code>. We can either capture to a trace file or XCode.</p> <p>To perform profiling in the command line, attach <code>--device_profiling_mode=queue --device_profiling_file=/path/to/metal.gputrace</code> to IREE binaries.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#command-buffer","title":"Command buffer","text":"<p>Command buffers are where IREE HAL and Metal API have a major difference.</p> <p>IREE HAL command buffers follow the flat Vulkan recording model, where all memory or dispatch commands are recorded into a command buffer directly. Unlike Vulkan, Metal adopts a multi-level command recording model--memory/dispatch commands are not directly recorded into a command buffer; rather, they must go through the additional level of blit/compute encoders. Implementing IREE's HAL using Metal would require switching encoders for interleaved memory and dispatch commands. Additionally, certain IREE HAL API features do not have direct mapping in Metal APIs, e.g., various forms of IREE HAL execution/memory barriers. Translating them would require looking at both previous and next commands to decide the proper mapping.</p> <p>Due to these reasons, it's beneficial to have a complete view of the full command buffer and extra flexibility during recording, in order to fixup past commands, or inspect future commands.</p> <p>Therefore, to implement IREE HAL command buffers using Metal, we perform two steps using a linked list of command segments: First we create segments to keep track of all IREE HAL commands and the associated data. And then, when finalizing the command buffer, we iterate through all the segments and record their contents into a proper <code>MTLCommandBuffer</code>. A linked list gives us the flexibility to organize command sequence in low overhead; and a deferred recording gives us the complete picture of the command buffer when really started recording.</p> <p>The Metal HAL driver right now only support one-shot command buffers, by mapping to <code>MTLCommandBuffer</code>s.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#fillcopyupdate-buffer","title":"Fill/copy/update buffer","text":"<p>Metal APIs for fill and copy buffers have alignment restrictions on the offset and length. <code>iree_hal_command_buffer_{fill|copy|update}_buffer()</code> is more flexible regarding that. So for cases aren't directly supported by Metal APIs, we use polyfill compute kernels to perform the memory operation using GPU threads.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#semaphore","title":"Semaphore","text":"<p><code>iree_hal_semaphore_t</code> allows host-&gt;device, device-&gt;host, host-&gt;host, and device-&gt;device synchronization. It maps to Vulkan timeline semaphore. In Metal world, the counterpart would be <code>MTLSharedEvent</code>. Most of the <code>iree_hal_semaphore_t</code> APIs are simple to implement in <code>MetalSharedEvent</code>, with <code>iree_hal_semaphore_wait()</code> as an exception. A listener is registered on the <code>MTLSharedEvent</code> with <code>notifyListener:atValue:block:</code> to singal a semaphore to wake the current thread, which is put into sleep by waiting on the semaphore.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#allocator","title":"Allocator","text":"<p>At the moment the Metal HAL driver just has a very simple <code>iree_hal_allocator_t</code> implementation. It just wraps a <code>MTLDevice</code> and redirects all allocation requests to the <code>MTLDevice</code>. No page/pool/slab or whatever. This is meant to be used together with common allocator layers like the caching allocator.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#buffer","title":"Buffer","text":"<p>IREE <code>iree_hal_buffer_t</code> maps Metal <code>MTLBuffer</code>. See Object Lifetime Management for more details.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#executable","title":"Executable","text":"<p>IREE <code>iree_hal_executable_t</code> represents a GPU program archive with a driver-defined format. It maps naturally to Metal <code>MTLLibrary</code>. An entry point in a <code>MTLLibrary</code> is a <code>MTLFunction</code>. We define <code>iree_hal_metal_executable_t</code> to wrap around a <code>MTLLibrary</code>, its <code>MTLFunction</code>s, and also <code>MTLComputePipelineState</code> objects constructed from <code>MTLFunction</code>s.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#executable-cache","title":"Executable cache","text":"<p>IREE <code>iree_hal_executable_cache_t</code> is modeling a cache of preprared GPU executables for a particular device. At the moment the Metal HAL driver does not peforming any caching on GPU programs; it simply reads the program from the FlatBuffer and hands it over to Metal driver.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#descriptor-set-pipeline-layout","title":"Descriptor set / pipeline layout","text":"<p>See Resource descriptors for more details.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#compute-pipeline","title":"Compute Pipeline","text":"","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#shaderkernel-compilation","title":"Shader/kernel compilation","text":"<p>Metal has Metal Shading Language (MSL) for authoring graphics shaders and compute kernels. MSL source code can be directly consumed by the Metal framework at run-time; it can also be compiled first into an opaque library using command-line tools at build-time.</p> <p>IREE uses compilers to compile ML models expressed with high-level op semantics down to GPU native source format. This is also the case for the Metal HAL driver. Metal does not provide an open intermediate language; we reuse the SPIR-V code generation pipeline and then cross compile the generated SPIR-V into MSL source with SPIRV-Cross. This is actually a fair common practice for targeting multiple GPU APIs in graphics programming world. For example, the Vulkan implmenation in macOS/iOS, MoltenVK, is also doing the same for shaders/kernels. The path is quite robust, as demonstrated by various games on top of MoltenVK.</p> <p>Therefore, in IREE, we have a <code>MetalSPIRVTargetBackend</code>, which pulls in the common SPIR-V passes to form the compilation pipeline. The difference would be to provide a suitable SPIR-V target environment to drive the compilation, which one can derive from the Metal GPU families to target. The serialization step differs from <code>VulkanSPIRVTargetBackend</code> too: following the normal SPIR-V serialization step, we additionally need to invoke SPRIV-Cross to cross compile the generated SPIR-V into MSL, and then compile and/or serialize the MSL source/library.</p> <p>IREE uses FlatBuffer to encode the whole workload module, including both GPU shader/kernel (called executable in IREE terminology) and CPU scheduling logic. The GPU executables are embedded as part of the module's FlatBuffer, which are <code>mmap</code>ped when IREE runs.</p> <p>For the Metal HAL driver, it means we need to embed the MSL kernels inside the module FlatBuffer. Right now we can either encode the MSL source strings and compile them at Metal run-time, or directly encoding the library instead.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#workgroupthreadgroup-size","title":"Workgroup/threadgroup size","text":"<p>When dispatching a compute kernel in Metal, we need to specify the number of thread groups in grid and the number of threads in thread group. Both are 3-D vectors. IREE HAL, which follows Vulkan, calls them workgroup count and workgroup size, respectively.</p> <p>In Vulkan programming model, workgroup count and workgroup size are specified at different places: the former is given when invoking <code>vkCmdDispatch()</code>, while the later is encoded in the dispatched SPIR-V code. This split does not match the Metal model, where we specify both in the API with <code>dispatchThreads:threadsPerThreadgroup:</code>.</p> <p>As said in shader/kernel compilation, MSL kernels are cross compiled from SPIR-V code and then embeded in the module FlatBuffer. The module FlatBuffer provides us a way to convey the threadgroup/workgroup size information extracted from the SPIR-V code. We encode an additional 3-D vector for each entry point and use it as the threadgroup size when later dispatching the <code>MTLFunction</code> corresponding to the entry point.</p>","tags":["GPU","Metal"]},{"location":"developers/design-docs/metal-hal-driver/#command-buffer-dispatch","title":"Command buffer dispatch","text":"<p>Metal HAL driver command buffer dispatch recording performs the following steps with the current active <code>MTLComputeCommandEncoder</code>:</p> <ol> <li>Bind the <code>MTLComputePipelineState</code> for the current entry function.</li> <li>Encode the push constants using <code>setBytes:length:atIndex</code>.</li> <li>For each bound descriptor set at set #<code>S</code>:</li> <li>Create a <code>MTLArgumentEncoder</code> for encoding an       associated argument <code>MTLBuffer</code>.</li> <li>For each bound resource buffer at binding #<code>B</code> in this descriptor set,       encode it to the argument buffer index #<code>B</code> with       <code>setBuffer::offset::atIndex:</code> and inform the <code>MTLComputeCommandEncoder</code>       that the dispatch will use this resource with <code>useResource:usage:</code>.</li> <li>Set the argument <code>MTLBuffer</code> to buffer index #<code>S</code>.</li> <li>Dispatch with <code>dispatchThreadgroups:threadsPerThreadgroup:</code>.</li> </ol>","tags":["GPU","Metal"]},{"location":"developers/design-docs/vm/","title":"Virtual machine (VM)","text":""},{"location":"developers/design-docs/vm/#overview","title":"Overview","text":"<p>The VM is an abstract machine that defines a type system of primitive and reference objects, module machinery, and a fairly involved mechanic for calls and dynamically binding extern funcs to their defs.</p> <p>It comes with a bytecode module type, which implements the module interface and exposes a CFG based instruction set (sans pointers, as there are some security and portability to device scheduler goals in play) with an infinite number of registers. A VMFB, which the compiler produces by default is a serialization of this. The bytecode module has an interpreter for it.</p>"},{"location":"developers/design-docs/vm/#vm-modules","title":"VM modules","text":"<p>There are multiple module types provided by default in the runtime:</p> <ul> <li>HAL for interacting with devices</li> <li>io_params for external data</li> <li>check for testing</li> </ul> <p>There are also Python bindings to create a module object dynamically and define exports in Python. Since the module interface is just natively defined in C, IREE also lets you load a .so dynamically which exports a function to create a new named module (this is what emitc produces for example).</p> <p>When the tools are creating an <code>iree_vm_context</code> for execution, this is primarily about instantiating modules and adding them. Each module resolved its imports from the exports of the priors. In practice, an io_params module is added to access parameter providers, a hal module for devices, one bytecode module for each vmfb listed, and a native .so module for any .so listed.</p> <p>That's all it is at the runtime. There's a lot of machinery on the compiler side for producing these modules and their interplay. The lowest level there to get a feel for what the compiler can emit, either a bytecode or a C based export, look at the vm dialect.</p>"},{"location":"developers/design-docs/vm/#lowering-from-the-vm-to-c","title":"Lowering from the VM to C","text":"<p>There has been talk for years of having a direct lowering of VM to LLVM without going through C. While desirable in theory, it's just never become a priority... The C based export is what embedded folks want (because you never want to pin your system toolchain to a random LLVM like that). And the bytecode side has never been the bottleneck for others. It's also an annoying, maintenance prone bit of code to write and just never got done.</p> <p>The high \"it just works\" quotient on the bytecode side has probably helped drive that too. \"vmfb\" has become a bit synonymous with \"IREE\" and teams using it think that is the main thing. But it is just one serialization of a VM module defining a program... But it has the best tools and debugging experience.</p>"},{"location":"developers/design-docs/vm/#call-interface","title":"Call interface","text":"<p>The VM call interface is modeled as a coroutine, and the bytecode interpreter supports multi task suspend/resume on a single thread. This is used for a lot of things (i.e. multi batch, async submissive, interfacing to io fabric, etc). Most of what people think of as \"async\" in the context of device interactions comes down to this and the cooperation of the hal module which provides device based synchronization and scheduling primitives.</p> <p>The way it is structured, the VM was not designed to block, but it can suspend.</p>"},{"location":"developers/general/contributing/","title":"Contributing to IREE","text":"<p>We'd love to accept your patches and contributions to this project.</p> <p>Note - coordinating efforts</p> <p>Please file issues or reach out on any of our other communication channels before doing substantial work; this will ensure that others don't duplicate the work and that there's a chance to discuss any design issues.</p>"},{"location":"developers/general/contributing/#developer-policies","title":"Developer policies","text":""},{"location":"developers/general/contributing/#code-of-conduct","title":"Code of conduct","text":"<p>This project follows the LF Projects code of conduct.</p>"},{"location":"developers/general/contributing/#developer-certificate-of-origin","title":"Developer Certificate of Origin","text":"<p>Contributors must certify that they wrote or otherwise have the right to submit the code they are contributing to the project.</p> Expand to read the full DCO agreement text <p>By making a contribution to this project, I certify that:</p> <ol> <li> <p>The contribution was created in whole or in part by me and I have the   right to submit it under the open source license indicated in the file; or</p> </li> <li> <p>The contribution is based upon previous work that, to the best of my   knowledge, is covered under an appropriate open source license and I have   the right under that license to submit that work with modifications, whether   created in whole or in part by me, under the same open source license   (unless I am permitted to submit under a different license), as indicated   in the file; or</p> </li> <li> <p>The contribution was provided directly to me by some other person who   certified 1., 2. or 3. and I have not modified it.</p> </li> <li> <p>I understand and agree that this project and the contribution are public   and that a record of the contribution (including all personal information   I submit with it, including my sign-off) is maintained indefinitely and   may be redistributed consistent with this project or the open source   license(s) involved.</p> </li> </ol> <p>Signing is enforced by the DCO GitHub App (see also the dcoapp/app repository).</p> <p>The DCO check requires that all commits included in pull requests either are cryptographically signed by a member of the repository's organization or include a <code>Signed-off-by</code> message as a git trailer.</p>"},{"location":"developers/general/contributing/#crypographically-signing-commits","title":"Crypographically signing commits","text":"<p>This is the recommended approach for frequent contributors!</p> <p>For members of the repository's organization (see obtaining commit access), commits that are signed do not require the <code>Signed-off-by</code> text. See these references:</p> <ul> <li>Signing commits     (generate key, add to https://github.com/settings/keys, <code>git commit -S</code>)</li> <li> <p>SSH commit signature verification     (recommended if you already use SSH keys with GitHub) and     Signing Git Commits with SSH Keys     (streamlined version of the previous page).</p> <p>SSH keys can be added at https://github.com/settings/ssh/new (Note that even if you have added your SSH key as an authorized key, you need to add it again as a signing key).</p> <p>Then,</p> <pre><code># Sign commits automatically\ngit config --global commit.gpgsign true\ngit config --global tag.gpgsign true\n\n# Sign using SSH, not GPG\ngit config --global user.signingkey ~/.ssh/id_rsa.pub\ngit config --global gpg.format ssh\n\n# Create an \"allowed_signers\" file\necho your@email `cat ~/.ssh/id_rsa.pub` &gt; ~/.ssh/allowed_signers\ngit config --global gpg.ssh.allowedSignersFile ~/.ssh/allowed_signers\n</code></pre> </li> <li> <p>Generating GPG keys     (alternative to using SSH keys)</p> <p>GPG keys can be added at https://github.com/settings/gpg/new, then:</p> <pre><code># Sign commits automatically\ngit config --global commit.gpgsign true\ngit config --global tag.gpgsign true\n</code></pre> </li> </ul>"},{"location":"developers/general/contributing/#adding-signed-off-by-to-commits","title":"Adding <code>Signed-off-by</code> to commits","text":"<p>This requires less setup and is suitable for first time contributors.</p> <p>Contributors sign-off their agreement by adding a <code>Signed-off-by</code> line to commit messages:</p> <pre><code>This is my commit message\n\nSigned-off-by: Random J Developer &lt;random@developer.example.org&gt;\n</code></pre> <ul> <li> <p>Git will automatically append this message if you use the <code>-s</code> option:</p> <pre><code>git commit -s -m 'This is my commit message'\n</code></pre> </li> <li> <p>Users of Visual Studio Code can add   <code>\"git.alwaysSignOff\": true,</code> in their settings</p> </li> <li> <p>See <code>.git/hooks/prepare-commit-msg.sample</code> for how to automatically   add this using a git hook</p> </li> </ul>"},{"location":"developers/general/contributing/#authors-codeowners-and-maintainers","title":"AUTHORS, CODEOWNERS, and MAINTAINERS","text":"<p>The <code>AUTHORS</code> file keeps track of those who have made significant contributions to the project.</p> <ul> <li>If you would like additional recognition for your contributions, you may add   yourself or your organization (please add the entity who owns the copyright   for your contributions).</li> <li>The source control history remains the most accurate source for individual   contributions.</li> </ul> <p>The <code>.github/CODEOWNERS</code> file lets maintainers opt in to PR reviews modifying certain paths.</p> <ul> <li>Review is not required from a code owner, though it is recommended.</li> </ul> <p>The <code>MAINTAINERS.md</code> file documents official maintainers for project components.</p>"},{"location":"developers/general/contributing/#coding-policies","title":"Coding policies","text":""},{"location":"developers/general/contributing/#coding-style-guidelines","title":"Coding style guidelines","text":"<p>Most of the code style is derived from the Google Style Guides for the appropriate language. The C++ compiler portion of the project follows the MLIR/LLVM style guide.</p> <p>We use pre-commit to run assorted formatters and lint checks. The configuration file at <code>.pre-commit-config.yaml</code> defines which \"hooks\" run.</p> <ul> <li>To run these hooks on your local commits, follow the   pre-commit installation instructions.</li> <li>Individual formatters like   <code>clang-format</code> (C/C++) and   Black (Python) can also be set to   run automatically in your editor of choice.</li> </ul> <p>Note</p> <p>Improvements to code structure and clarity are welcome but please file issues to track such work first. Pure style changes are unlikely to be accepted unless they are applied consistently across the project.</p>"},{"location":"developers/general/contributing/#testing-policy","title":"Testing policy","text":"<p>With few exceptions, features should be accompanied by automated tests.</p> <p>We use a mix of in-tree and out-of-tree unit and integration tests. For more information about the types of tests used across the project, refer to the testing guide.</p>"},{"location":"developers/general/contributing/#github-policies","title":"GitHub policies","text":""},{"location":"developers/general/contributing/#code-reviews","title":"Code reviews","text":"<p>All submissions, including submissions by maintainers, require review. We use GitHub pull requests (PRs) for this purpose. Consult GitHub Help for more information on using pull requests.</p> <ul> <li>Please keep PRs small (focused on a single issue) to make reviews and later   culprit-finding easier.</li> <li>You may see trusted core contributors bending this rule for project   maintenance and major subsystem renovation. If you feel like the rules aren't   working for a certain situation, please ask as we bias towards pragmatism for   cases that require it.</li> </ul>"},{"location":"developers/general/contributing/#github-actions-workflows","title":"GitHub Actions workflows","text":"<p>We use GitHub Actions to automatically build and test various parts of the project.</p> <ul> <li>Most presubmit workflows will only run automatically on PRs if you are a   project collaborator. Otherwise a maintainer must   approve workflow runs.   If you are sending code changes to the project, please   request commit access, so that these can run   automatically.</li> <li>It is generally expected that PRs will only be merged when all checks are   passing. In some cases, pre-existing failures may be bypassed by a maintainer.</li> </ul> Tip - adjusting workflow behavior <p>Some workflows only run on commits after they are merged. See the CI behavior manipulation section below to learn how to customize this behavior.</p>"},{"location":"developers/general/contributing/#merging-approved-changes","title":"Merging approved changes","text":"<p>After review and presubmit checks, PRs should typically be merged using \"squash and merge\".</p> <ul> <li>The squashed commit summary should match the PR title and the commit   description should match the PR body (this is the default behavior).   Accordingly, please write these as you would a helpful commit message.</li> </ul> <p>It is assumed that the PR author will merge their change unless they ask someone else to merge it for them (e.g. because they don't have write access yet).</p>"},{"location":"developers/general/contributing/#obtaining-commit-access","title":"Obtaining commit access","text":"<p>Access to affiliated repositories is divided into tiers:</p> Tier Description Team link Triage New project members should typically start here Can be assigned issues Can apply labels to issues / PRs Can run workflows without approval iree-triage Write Established project contributors should request this access Can merge approved pull requests Can create branches Can re-run workflows iree-write Maintain/Admin  Can edit repository settings Can push to protected branches Added case-by-case <p>All access tiers first require joining the iree-org GitHub organization. To request membership in iree-org, send an email to iree-github-requests@lists.lfaidata.foundation with this template:</p> <pre><code>GitHub username:\n\nCompany/organization you are associated with:\n\nReason for requesting access:\n</code></pre> <p>Send this email template to request access </p> <p>If approved, an invitation will be sent to your GitHub account. You can also view the invitation link directly. Then, once you are a member of the organization, you can request to join any of the teams on https://github.com/orgs/iree-org/teams.</p>"},{"location":"developers/general/contributing/#branch-naming","title":"Branch naming","text":"<p>Most work should be done on repository forks. For developers with write access, when creating a branch in the common iree-org/iree repository, please follow these naming guidelines:</p> Branch type Naming scheme Example Single user <code>users/[username]/*</code> <code>users/cooldeveloper/my-awesome-feature</code> Shared feature branch <code>shared/*</code> <code>shared/pytorch-performance-sprint</code> Dependency updates <code>integrates/*</code> <code>integrates/llvm-20240501</code> <p>Branches that do not meet these guidelines may be deleted, especially if they appear to be stale.</p>"},{"location":"developers/general/contributing/#tips-for-contributors","title":"Tips for contributors","text":""},{"location":"developers/general/contributing/#tool-recommendations","title":"Tool recommendations","text":"Program or tool Description  Visual Studio Code (VSCode) The most commonly used editor amongst IREE developers  Ccache A fast C/C++ compiler cache. See the CMake with <code>ccache</code> page  GitHub CLI A CLI for interacting with GitHub  \"Refined GitHub\" browser extensions Extension that add features to the GitHub UI"},{"location":"developers/general/contributing/#build-systems","title":"Build systems","text":"<p>IREE supports building from source with both Bazel and CMake.</p> <ul> <li>CMake is the preferred build system and offers the most flexible   configuration options</li> <li>Bazel is a stricter build system and helps with usage in Google's downstream   source repository</li> <li>Certain dependencies (think large/complex projects like CUDA, TensorFlow,   PyTorch, etc.) may be difficult to support with one build system or the   other, so the project may configure these as optional</li> </ul>"},{"location":"developers/general/contributing/#continuous-integration-ci","title":"Continuous integration (CI)","text":"<p>IREE uses GitHub Actions for CI. See our GitHub Actions documentation for full details.</p>"},{"location":"developers/general/contributing/#ci-behavior-manipulation","title":"CI behavior manipulation","text":"<p>The setup step of the CI determines which CI jobs to run. This is controlled by the configure_ci.py script. It will generally run a pre-determined set of jobs on presubmit with some jobs kept as post-submit only. If changes are only to a certain set of excluded files that we know don't affect CI (e.g. Markdown files), then it will skip the jobs.</p> <p>You can customize which jobs run using git trailers in the PR description.</p> <p>The available options are</p> <pre><code>ci-skip: jobs,to,skip\nci-extra: extra,jobs,to,run\nci-exactly: exact,set,of,jobs,to,run\nskip-ci: free form reason\n</code></pre> Using <code>skip-ci</code> <p><code>skip-ci</code> skips all jobs. It is mutually exclusive with the other <code>ci-*</code> options and is synonomous with <code>ci-skip: all</code>.</p> <pre><code>skip-ci: free form reason\n</code></pre> Using <code>ci-skip</code>, <code>ci-extra</code>, <code>ci-exactly</code> <p>The <code>ci-*</code> options instruct the setup script on which jobs to include or exclude from its run. They take a comma-separated list of jobs which must be from the set of top-level job identifiers in the <code>ci.yml</code> file or the special keyword \"all\" to indicate all jobs.</p> <pre><code>ci-skip: jobs,to,skip\nci-extra: extra,jobs,to,run\nci-exactly: exact,set,of,jobs,to,run\n</code></pre> <ul> <li><code>ci-skip</code> removes jobs that would otherwise be included, though it is not an error to list jobs that would not be included by default.</li> <li><code>ci-extra</code> adds additional jobs that would not have otherwise been run, though it is not an error to list jobs that would have been included anyway. It is an error to list a job in both \"skip\" and \"extra\".</li> <li><code>ci-exactly</code> provides an exact list of jobs that should run. It is mutually exclusive with both \"skip\" and \"extra\".</li> </ul> <p>In all these cases, the setup does not make any effort to ensure that job dependencies are satisfied. Thus, if you request skipping the <code>build_packages</code> job, all the jobs that depend on it will fail, not be skipped.</p>"},{"location":"developers/general/contributing/#ci-configuration-recipes","title":"CI configuration recipes","text":"<p>Copy/paste any of these at the bottom of a PR description to change what the CI runs.</p> <ul> <li> <p>Skip all CI builds and tests, e.g. for comment-only changes:</p> <pre><code>skip-ci: Comment-only change.\n</code></pre> </li> <li> <p>Only run runtime builds:</p> <pre><code>ci-exactly: runtime\n</code></pre> </li> <li> <p>Only run ONNX tests:</p> <pre><code>ci-exactly: build_packages,test_onnx\n</code></pre> </li> <li> <p>Only run Bazel builds, e.g. for changes only affecting Bazel rules:</p> <pre><code>ci-exactly: linux_x64_bazel\n</code></pre> </li> </ul> <p>For example, this PR opted in to running the <code>build_test_all_windows</code> job:</p> <p></p> <p>The enabled jobs can be viewed from the Summary page of an action run:</p> <p></p>"},{"location":"developers/general/developer-overview/","title":"Developer overview","text":"<p>This guide provides an overview of IREE's project structure and main tools for developers.</p>"},{"location":"developers/general/developer-overview/#project-code-layout","title":"Project code layout","text":"<ul> <li>/compiler/:   MLIR dialects, LLVM compiler passes, module translation code, etc.<ul> <li>bindings/: Python and other language bindings</li> </ul> </li> <li>/runtime/:   Standalone runtime code including the VM and HAL drivers<ul> <li>bindings/: Python and other language bindings</li> </ul> </li> <li>/integrations/:   Integrations between IREE and other frameworks, such as TensorFlow</li> <li>/tests/:   Tests for full compiler-&gt;runtime workflows</li> <li>/tools/:   Developer tools (<code>iree-compile</code>, <code>iree-run-module</code>, etc.)</li> <li>/samples/: Also see the   separate https://github.com/iree-org/iree-experimental repository</li> </ul>"},{"location":"developers/general/developer-overview/#iree-compiler-code-layout","title":"IREE compiler code layout","text":"<ul> <li>API/:   Public C API</li> <li>Codegen/:   Code generation for compute kernels</li> <li>Dialect/:   MLIR dialects (<code>Flow</code>, <code>HAL</code>, <code>Stream</code>, <code>VM</code>, etc.)</li> <li>InputConversion/:   Conversions from input dialects and preprocessing</li> </ul>"},{"location":"developers/general/developer-overview/#iree-runtime-code-layout","title":"IREE runtime code layout","text":"<ul> <li>base/:   Common types and utilities used throughout the runtime</li> <li>hal/:   Hardware Abstraction Layer for IREE's runtime, with   implementations for hardware and software backends</li> <li>schemas/:   Data storage format definitions, primarily using   FlatBuffers</li> <li>task/:   System for running tasks across multiple CPU threads</li> <li>tooling/:   Utilities for tests and developer tools, not suitable for use as-is in   downstream applications</li> <li>vm/:   Bytecode Virtual Machine used to work with IREE modules and invoke   IREE functions</li> </ul>"},{"location":"developers/general/developer-overview/#developer-tools","title":"Developer tools","text":"<p>IREE's core compiler accepts programs in supported input MLIR dialects (e.g. <code>stablehlo</code>, <code>tosa</code>, <code>linalg</code>). Import tools and APIs may be used to convert from framework-specific formats like TensorFlow SavedModel to MLIR modules. While programs are ultimately compiled down to modules suitable for running on some combination of IREE's target deployment platforms, IREE's developer tools can run individual compiler passes, translations, and other transformations step by step.</p>"},{"location":"developers/general/developer-overview/#iree-opt","title":"iree-opt","text":"<p><code>iree-opt</code> is a tool for testing IREE's compiler passes. It is similar to mlir-opt and runs sets of IREE's compiler passes on <code>.mlir</code> input files. See \"conversion\" in MLIR's Glossary for more information. Transformations performed by <code>iree-opt</code> can range from individual passes performing isolated manipulations to broad pipelines that encompass a sequence of steps.</p> <p>Test <code>.mlir</code> files that are checked in typically include a <code>RUN</code> block at the top of the file that specifies which passes should be performed and if <code>FileCheck</code> should be used to test the generated output.</p> <p>Here's an example of a small compiler pass running on a test file:</p> <pre><code>$ ../iree-build/tools/iree-opt \\\n  --split-input-file \\\n  --mlir-print-ir-before-all \\\n  --iree-util-drop-compiler-hints \\\n  $PWD/compiler/src/iree/compiler/Dialect/Util/Transforms/test/drop_compiler_hints.mlir\n</code></pre> <p>For a more complex example, here's how to run IREE's complete transformation pipeline targeting the VMVX backend on the fullyconnected.mlir model file:</p> <pre><code>$ ../iree-build/tools/iree-opt \\\n  --iree-transformation-pipeline \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  $PWD/tests/e2e/stablehlo_models/fullyconnected.mlir\n</code></pre>"},{"location":"developers/general/developer-overview/#iree-compile","title":"iree-compile","text":"<p><code>iree-compile</code> is IREE's main compiler driver for generating binaries from supported input MLIR assembly.</p> <p>For example, to translate <code>simple.mlir</code> to an IREE module:</p> <pre><code>$ ../iree-build/tools/iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  $PWD/samples/models/simple_abs.mlir \\\n  -o /tmp/simple_abs_vmvx.vmfb\n</code></pre>"},{"location":"developers/general/developer-overview/#iree-run-module","title":"iree-run-module","text":"<p>The <code>iree-run-module</code> program takes an already translated IREE module as input and executes an exported function using the provided inputs.</p> <p>This program can be used in sequence with <code>iree-compile</code> to translate a <code>.mlir</code> file to an IREE module and then execute it. Here is an example command that executes the simple <code>simple_abs_vmvx.vmfb</code> compiled from <code>simple_abs.mlir</code> above on IREE's local-task CPU device:</p> <pre><code>$ ../iree-build/tools/iree-run-module \\\n  --module=/tmp/simple_abs_vmvx.vmfb \\\n  --device=local-task \\\n  --function=abs \\\n  --input=f32=-2\n</code></pre> <p>Input scalars are passed as <code>value</code> and input buffers are passed as <code>[shape]xtype=[value]</code>.</p> <ul> <li>Input buffers may also be read from raw binary files or Numpy npy files.</li> </ul> MLIR type Description Input example <code>i32</code> Scalar <code>--input=1234</code> <code>tensor&lt;i32&gt;</code> 0-D tensor <code>--input=i32=1234</code> <code>tensor&lt;1xi32&gt;</code> 1-D tensor (shape [1]) <code>--input=1xi32=1234</code> <code>tensor&lt;2xi32&gt;</code> 1-D tensor (shape [2]) <code>--input=\"2xi32=12 34\"</code> <code>tensor&lt;2x3xi32&gt;</code> 2-D tensor (shape [2, 3]) <code>--input=\"2x3xi32=[1 2 3][4 5 6]\"</code> Other usage examples <p>See these test files for advanced usage examples:</p> Basic testsInputsOutputsExpected <p>Source file: <code>tools/test/iree-run-module.mlir</code></p> tools/test/iree-run-module.mlir<pre><code>// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-task --module=- --function=abs --input=\"2xf32=-2 3\") | FileCheck %s\n// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=llvm-cpu %s | \\\n// RUN:  iree-run-module --device=local-task --module=- --function=abs --input=\"2xf32=-2 3\") | FileCheck %s\n\n// CHECK-LABEL: EXEC @abs\nfunc.func @abs(%input : tensor&lt;2xf32&gt;) -&gt; (tensor&lt;2xf32&gt;) {\n  %result = math.absf %input : tensor&lt;2xf32&gt;\n  return %result : tensor&lt;2xf32&gt;\n}\n  // INPUT-BUFFERS: result[1]: hal.buffer_view\n  // INPUT-BUFFERS-NEXT: 2xf32=-2.0 3.0\n</code></pre> <p>Source file: <code>tools/test/iree-run-module-inputs.mlir</code></p> tools/test/iree-run-module-inputs.mlir<pre><code>// Passing no inputs is okay.\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-sync --module=- --function=no_input) | \\\n// RUN: FileCheck --check-prefix=NO-INPUT %s\n// NO-INPUT-LABEL: EXEC @no_input\nfunc.func @no_input() {\n  return\n}\n\n// -----\n\n// Scalars use the form `--input=value`. Type (float/int) should be omitted.\n//   * The VM does not use i1/i8 types, so i32 VM types are returned instead.\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=- \\\n// RUN:                  --function=scalars \\\n// RUN:                  --input=1 \\\n// RUN:                  --input=5 \\\n// RUN:                  --input=1234 \\\n// RUN:                  --input=-3.14) | \\\n// RUN: FileCheck --check-prefix=INPUT-SCALARS %s\n// INPUT-SCALARS-LABEL: EXEC @scalars\nfunc.func @scalars(%arg0: i1, %arg1: i8, %arg2 : i32, %arg3 : f32) -&gt; (i1, i8, i32, f32) {\n  // INPUT-SCALARS: result[0]: i32=1\n  // INPUT-SCALARS: result[1]: i32=5\n  // INPUT-SCALARS: result[2]: i32=1234\n  // INPUT-SCALARS: result[3]: f32=-3.14\n  return %arg0, %arg1, %arg2, %arg3 : i1, i8, i32, f32\n}\n\n// -----\n\n// Buffers (\"tensors\") use the form `--input=[shape]xtype=[value]`.\n//   * If any values are omitted, zeroes will be used.\n//   * Quotes should be used around values with spaces.\n//   * Brackets may also be used to separate element values.\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=- \\\n// RUN:                  --function=buffers \\\n// RUN:                  --input=i32=5 \\\n// RUN:                  --input=2xi32 \\\n// RUN:                  --input=\"2x3xi32=1 2 3 4 5 6\") | \\\n// RUN: FileCheck --check-prefix=INPUT-BUFFERS %s\n// INPUT-BUFFERS-LABEL: EXEC @buffers\nfunc.func @buffers(%arg0: tensor&lt;i32&gt;, %arg1: tensor&lt;2xi32&gt;, %arg2: tensor&lt;2x3xi32&gt;) -&gt; (tensor&lt;i32&gt;, tensor&lt;2xi32&gt;, tensor&lt;2x3xi32&gt;) {\n  // INPUT-BUFFERS: result[0]: hal.buffer_view\n  // INPUT-BUFFERS-NEXT: i32=5\n  // INPUT-BUFFERS: result[1]: hal.buffer_view\n  // INPUT-BUFFERS-NEXT: 2xi32=0 0\n  // INPUT-BUFFERS: result[2]: hal.buffer_view\n  // INPUT-BUFFERS-NEXT: 2x3xi32=[1 2 3][4 5 6]\n  return %arg0, %arg1, %arg2 : tensor&lt;i32&gt;, tensor&lt;2xi32&gt;, tensor&lt;2x3xi32&gt;\n}\n\n// -----\n\n// Buffer values can be read from binary files with `@some/file.bin`.\n//   * numpy npy files from numpy.save or previous tooling output can be read to\n//     provide 1+ values.\n//   * Some data types may be converted (i32 -&gt; si32 here) - bug?\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx \\\n// RUN:               -o=%t.vmfb %s &amp;&amp; \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=%t.vmfb \\\n// RUN:                  --function=npy_round_trip \\\n// RUN:                  --input=2xi32=11,12 \\\n// RUN:                  --input=3xi32=1,2,3 \\\n// RUN:                  --output=@%t.npy \\\n// RUN:                  --output=+%t.npy &amp;&amp; \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=%t.vmfb \\\n// RUN:                  --function=npy_round_trip \\\n// RUN:                  --input=*%t.npy) | \\\n// RUN: FileCheck --check-prefix=INPUT-NUMPY %s\n\n// INPUT-NUMPY-LABEL: EXEC @npy_round_trip\nfunc.func @npy_round_trip(%arg0: tensor&lt;2xi32&gt;, %arg1: tensor&lt;3xi32&gt;) -&gt; (tensor&lt;2xi32&gt;, tensor&lt;3xi32&gt;) {\n  // INPUT-NUMPY: result[0]: hal.buffer_view\n  // INPUT-NUMPY-NEXT: 2xsi32=11 12\n  // INPUT-NUMPY: result[1]: hal.buffer_view\n  // INPUT-NUMPY-NEXT: 3xsi32=1 2 3\n  return %arg0, %arg1 : tensor&lt;2xi32&gt;, tensor&lt;3xi32&gt;\n}\n</code></pre> <p>Source file: <code>tools/test/iree-run-module-outputs.mlir</code></p> tools/test/iree-run-module-outputs.mlir<pre><code>// Tests that execution providing no outputs is ok.\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-sync --module=- --function=no_output) | \\\n// RUN: FileCheck --check-prefix=NO-OUTPUT %s\n// NO-OUTPUT-LABEL: EXEC @no_output\nfunc.func @no_output() {\n  return\n}\n\n// -----\n\n// Tests the default output printing to stdout.\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-sync --module=- --function=default) | \\\n// RUN: FileCheck --check-prefix=OUTPUT-DEFAULT %s\n// OUTPUT-DEFAULT-LABEL: EXEC @default\nfunc.func @default() -&gt; (i32, tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;) {\n  // OUTPUT-DEFAULT: result[0]: i32=123\n  %0 = arith.constant 123 : i32\n  // OUTPUT-DEFAULT: result[1]: hal.buffer_view\n  // OUTPUT-DEFAULT-NEXT: f32=4\n  %1 = arith.constant dense&lt;4.0&gt; : tensor&lt;f32&gt;\n  // OUTPUT-DEFAULT: result[2]: hal.buffer_view\n  // OUTPUT-DEFAULT-NEXT: 2x4xi32=[0 1 2 3][4 5 6 7]\n  %2 = flow.tensor.dynamic_constant dense&lt;[[0,1,2,3],[4,5,6,7]]&gt; : tensor&lt;2x4xi32&gt; -&gt; tensor&lt;?x4xi32&gt;\n  return %0, %1, %2 : i32, tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;\n}\n\n// -----\n\n// Tests explicit output to npy files by producing a concatenated .npy and then\n// printing the results in python. This also verifies our npy files can be\n// parsed by numpy.\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-sync --module=- --function=numpy \\\n// RUN:                  --output= \\\n// RUN:                  --output=@%t.npy \\\n// RUN:                  --output=+%t.npy) &amp;&amp; \\\n// RUN:  \"%PYTHON\" %S/echo_npy.py %t.npy | \\\n// RUN: FileCheck --check-prefix=OUTPUT-NUMPY %s\nfunc.func @numpy() -&gt; (i32, tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;) {\n  // Output skipped:\n  %0 = arith.constant 123 : i32\n  // OUTPUT-NUMPY{LITERAL}: 4.0\n  %1 = arith.constant dense&lt;4.0&gt; : tensor&lt;f32&gt;\n  // OUTPUT-NUMPY-NEXT{LITERAL}: [[0 1 2 3]\n  // OUTPUT-NUMPY-NEXT{LITERAL}:  [4 5 6 7]]\n  %2 = flow.tensor.dynamic_constant dense&lt;[[0,1,2,3],[4,5,6,7]]&gt; : tensor&lt;2x4xi32&gt; -&gt; tensor&lt;?x4xi32&gt;\n  return %0, %1, %2 : i32, tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;\n}\n\n// -----\n\n// Tests output to binary files by round-tripping the output of a function into\n// another invocation reading from the binary files. Each output is written to\n// its own file (optimal for alignment/easier to inspect).\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx %s -o=%t.vmfb &amp;&amp; \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=%t.vmfb \\\n// RUN:                  --function=write_binary \\\n// RUN:                  --output=@%t.0.bin \\\n// RUN:                  --output=@%t.1.bin &amp;&amp; \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=%t.vmfb \\\n// RUN:                  --function=echo_binary \\\n// RUN:                  --input=f32=@%t.0.bin \\\n// RUN:                  --input=2x4xi32=@%t.1.bin) | \\\n// RUN: FileCheck --check-prefix=OUTPUT-BINARY %s\n\n// Tests output to binary files by round-tripping the output of a function into\n// another invocation reading from the binary files. The values are appended to\n// a single file and read from the single file.\n\n// RUN: (iree-compile --iree-hal-target-device=local \\\n// RUN:               --iree-hal-local-target-device-backends=vmvx \\\n// RUN:               -o=%t.vmfb %s &amp;&amp; \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=%t.vmfb \\\n// RUN:                  --function=write_binary \\\n// RUN:                  --output=@%t.bin \\\n// RUN:                  --output=+%t.bin &amp;&amp; \\\n// RUN:  iree-run-module --device=local-sync \\\n// RUN:                  --module=%t.vmfb \\\n// RUN:                  --function=echo_binary \\\n// RUN:                  --input=f32=@%t.bin \\\n// RUN:                  --input=2x4xi32=+%t.bin) | \\\n// RUN: FileCheck --check-prefix=OUTPUT-BINARY %s\n\nfunc.func @write_binary() -&gt; (tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;) {\n  %0 = arith.constant dense&lt;4.0&gt; : tensor&lt;f32&gt;\n  %1 = flow.tensor.dynamic_constant dense&lt;[[0,1,2,3],[4,5,6,7]]&gt; : tensor&lt;2x4xi32&gt; -&gt; tensor&lt;?x4xi32&gt;\n  return %0, %1 : tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;\n}\nfunc.func @echo_binary(%arg0: tensor&lt;f32&gt;, %arg1: tensor&lt;?x4xi32&gt;) -&gt; (tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;) {\n  // OUTPUT-BINARY{LITERAL}: f32=4\n  // OUTPUT-BINARY{LITERAL}: 2x4xi32=[0 1 2 3][4 5 6 7]\n  return %arg0, %arg1 : tensor&lt;f32&gt;, tensor&lt;?x4xi32&gt;\n}\n</code></pre> <p>Source file: <code>tools/test/iree-run-module-expected.mlir</code></p> tools/test/iree-run-module-expected.mlir<pre><code>// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-task --module=- --function=abs --input=f32=-2 --expected_output=f32=-2 --expected_output=f32=2.0) | \\\n// RUN:  FileCheck %s --check-prefix=SUCCESS-MATCHES\n// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-task --module=- --function=abs --input=f32=-2 --expected_output=f32=-2 --expected_output=\"(ignored)\") | \\\n// RUN:  FileCheck %s --check-prefix=SUCCESS-IGNORED\n// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  iree-run-module --device=local-task --module=- --function=abs --input=f32=-2 --expected_output=f32=-2 --expected_output=f32=2.1 --expected_f32_threshold=0.1) | \\\n// RUN:  FileCheck %s --check-prefix=SUCCESS-THRESHOLD\n// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  not iree-run-module --device=local-task --module=- --function=abs --input=f32=-2 --expected_output=f32=123 --expected_output=f32=2.0) | \\\n// RUN:  FileCheck %s --check-prefix=FAILED-FIRST\n// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  not iree-run-module --device=local-task --module=- --function=abs --input=f32=-2 --expected_output=f32=-2 --expected_output=f32=4.5) | \\\n// RUN:  FileCheck %s --check-prefix=FAILED-SECOND\n// RUN: (iree-compile --iree-hal-target-device=local --iree-hal-local-target-device-backends=vmvx %s | \\\n// RUN:  not iree-run-module --device=local-task --module=- --function=abs --input=f32=-2 --expected_output=f32=-2 --expected_output=4xf32=2.0) | \\\n// RUN:  FileCheck %s --check-prefix=FAILED-SHAPE\n\n// SUCCESS-MATCHES: [SUCCESS]\n// SUCCESS-THRESHOLD: [SUCCESS]\n// SUCCESS-IGNORED: [SUCCESS]\n// FAILED-FIRST: [FAILED] result[0]: element at index 0 (-2) does not match the expected (123)\n// FAILED-SECOND: [FAILED] result[1]: element at index 0 (2) does not match the expected (4.5)\n// FAILED-SHAPE: [FAILED] result[1]: metadata is f32; expected that the view matches 4xf32\n\nfunc.func @abs(%input: tensor&lt;f32&gt;) -&gt; (tensor&lt;f32&gt;, tensor&lt;f32&gt;) {\n  %result = math.absf %input : tensor&lt;f32&gt;\n  return %input, %result : tensor&lt;f32&gt;, tensor&lt;f32&gt;\n}\n</code></pre>"},{"location":"developers/general/developer-overview/#iree-check-module","title":"iree-check-module","text":"<p>The <code>iree-check-module</code> program takes an already translated IREE module as input and executes it as a series of googletest tests. This is the test runner for the IREE check framework.</p> <pre><code>$ ../iree-build/tools/iree-compile \\\n  --iree-input-type=stablehlo \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  $PWD/tests/e2e/stablehlo_ops/abs.mlir \\\n  -o /tmp/abs.vmfb\n</code></pre> <pre><code>$ ../iree-build/tools/iree-check-module \\\n  --device=local-task \\\n  --module=/tmp/abs.vmfb\n</code></pre>"},{"location":"developers/general/developer-overview/#iree-run-mlir","title":"iree-run-mlir","text":"<p>The <code>iree-run-mlir</code> program takes a <code>.mlir</code> file as input, translates it to an IREE bytecode module, and executes the module.</p> <p>It is designed for testing and debugging, not production uses, and therefore does some additional work that usually must be explicit, like marking every function as exported by default and running all of them.</p> <p>For example, to execute the contents of samples/models/simple_abs.mlir:</p> <pre><code># iree-run-mlir &lt;compiler flags&gt; [input.mlir] &lt;runtime flags&gt;\n$ ../iree-build/tools/iree-run-mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  $PWD/samples/models/simple_abs.mlir \\\n  --input=f32=-2\n</code></pre>"},{"location":"developers/general/developer-overview/#iree-dump-module","title":"iree-dump-module","text":"<p>The <code>iree-dump-module</code> program prints the contents of an IREE module FlatBuffer file.</p> <p>For example, to inspect the module translated above:</p> <pre><code>../iree-build/tools/iree-dump-module /tmp/simple_abs_vmvx.vmfb\n</code></pre>"},{"location":"developers/general/developer-overview/#useful-generic-flags","title":"Useful generic flags","text":""},{"location":"developers/general/developer-overview/#read-inputs-from-a-file","title":"Read inputs from a file","text":"<p>All the IREE tools support reading input values from a file. This is quite useful for debugging. Use <code>--help</code> for each tool to see what the flag to set. The inputs are expected to be newline-separated. Each input should be either a scalar or a buffer. Scalars should be in the format <code>type=value</code> and buffers should be in the format <code>[shape]xtype=[value]</code>. For example:</p> <pre><code>1x5xf32=1,-2,-3,4,-5\n1x5x3x1xf32=15,14,13,12,11,10,9,8,7,6,5,4,3,2,1\n</code></pre>"},{"location":"developers/general/developer-overview/#-iree-flow-trace-dispatch-tensors","title":"<code>--iree-flow-trace-dispatch-tensors</code>","text":"<p>This flag will enable tracing inputs and outputs for each dispatch function. It is easier to narrow down test cases, since IREE breaks a ML workload into multiple dispatch function. When the flag is on, IREE will insert trace points before and after each dispatch function. The first trace op is for inputs, and the second trace op is for outputs. There will be two events for one dispatch function.</p>"},{"location":"developers/general/developer-tips/","title":"Developer tips and tricks","text":"<p>The IREE compiler is built using MLIR, so it naturally supports the common MLIR debugging workflows. For areas where IREE differentiates itself, this page lists other helpful tips and tricks.</p>"},{"location":"developers/general/developer-tips/#setting-compiler-options","title":"Setting compiler options","text":"<p>Tools such as <code>iree-compile</code> take options via command-line flags. Pass <code>--help</code> to see the full list:</p> <pre><code>$ iree-compile --help\n\nOVERVIEW: IREE compilation driver\n\nUSAGE: iree-compile [options] &lt;input file or '-' for stdin&gt;\n\nOPTIONS:\n  ...\n</code></pre> <p>Tip - Options and the Python bindings</p> <p>If you are using the Python bindings, options can be passed via the <code>extra_args=[\"--flag\"]</code> argument:</p> <pre><code>import iree.compiler as ireec\n\ninput_mlir = \"\"\"\nfunc.func @abs(%input : tensor&lt;f32&gt;) -&gt; (tensor&lt;f32&gt;) {\n  %result = math.absf %input : tensor&lt;f32&gt;\n  return %result : tensor&lt;f32&gt;\n}\"\"\"\n\ncompiled_module = ireec.tools.compile_str(\n    input_mlir,\n    target_backends=[\"llvm-cpu\"],\n    extra_args=[\"--mlir-timing\"])\n</code></pre>"},{"location":"developers/general/developer-tips/#inspecting-vmfb-files","title":"Inspecting <code>.vmfb</code> files","text":"<p>The IREE compiler generates FlatBuffer files using the <code>.vmfb</code> file extension, short for \"Virtual Machine FlatBuffer\", which can then be loaded and executed using IREE's runtime.</p> Info - other output formats <p>The IREE compiler can output different formats with the <code>`--output-format=</code> flag:</p> Flag value Output <code>--output-format=vm-bytecode</code> (default) VM Bytecode (<code>.vmfb</code>) files <code>--output-format=vm-c</code> C source modules <p>VM Bytecode files are usable across a range of deployment scenarios, while C source modules provide low level connection points for constrained environments like bare metal platforms.</p> <p>By default, <code>.vmfb</code> files can be opened as zip files: (1)</p> <ol> <li>Setting <code>--iree-vm-emit-polyglot-zip=false</code> will disable this feature and    decrease file size slightly</li> </ol> <pre><code>$ unzip -d simple_abs_cpu ./simple_abs_cpu.vmfb\n\nArchive:  ./simple_abs_cpu.vmfb\n  extracting: simple_abs_cpu/module.fb\n  extracting: simple_abs_cpu/abs_dispatch_0_system_elf_x86_64.so\n</code></pre> <p>The embedded binary (here an ELF shared object with CPU code) can be parsed by standard tools:</p> <pre><code>$ readelf -Ws ./simple_abs_cpu/abs_dispatch_0_system_elf_x86_64.so\n\nSymbol table '.dynsym' contains 2 entries:\n  Num:    Value          Size Type    Bind   Vis      Ndx Name\n    0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n    1: 0000000000001760    17 FUNC    GLOBAL DEFAULT    7 iree_hal_executable_library_query\n\nSymbol table '.symtab' contains 42 entries:\n  Num:    Value          Size Type    Bind   Vis      Ndx Name\n    0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND\n    1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS abs_dispatch_0\n    2: 0000000000001730    34 FUNC    LOCAL  DEFAULT    7 abs_dispatch_0_generic\n    3: 00000000000034c0    80 OBJECT  LOCAL  DEFAULT    8 iree_hal_executable_library_query_v0\n    4: 0000000000001780   111 FUNC    LOCAL  DEFAULT    7 iree_h2f_ieee\n    5: 00000000000017f0   207 FUNC    LOCAL  DEFAULT    7 iree_f2h_ieee\n    ...\n</code></pre> <p>The <code>iree-dump-module</code> tool can also be used to see information about a given <code>.vmfb</code> file:</p> <pre><code>$ iree-dump-module simple_abs.vmfb\n\n//===---------------------------------------------------------------------===//\n// @module : version 0\n//===---------------------------------------------------------------------===//\n\nRequired Types:\n  [  0] i32\n  [  1] i64\n  [  2] !hal.allocator\n  [  3] !hal.buffer\n  ...\n\nModule Dependencies:\n  hal, version &gt;= 0, required\n\nImported Functions:\n  [  0] hal.allocator.allocate(!vm.ref&lt;?&gt;, i32, i32, i64) -&gt; (!vm.ref&lt;?&gt;)\n  [  1] hal.devices.get(i32) -&gt; (!vm.ref&lt;?&gt;)\n  ...\n\nExported Functions:\n  [  0] abs(!vm.ref&lt;?&gt;) -&gt; (!vm.ref&lt;?&gt;)\n  [  1] __init() -&gt; ()\n\n...\n</code></pre>"},{"location":"developers/general/developer-tips/#dumping-executable-files","title":"Dumping executable files","text":"<p>The <code>--iree-hal-dump-executable-*</code> flags instruct the compiler to save files related to \"executable translation\" (code generation for a specific hardware target) into a directory of your choosing. If you are interested in seeing which operations in your input program were fused into a compute kernel or what device code was generated for a given program structure, these flags are a great starting point.</p> Flag Files dumped <code>iree-hal-dump-executable-files-to</code> All files (meta-flag) <code>iree-hal-dump-executable-sources-to</code> Source <code>.mlir</code> files prior to HAL compilation <code>iree-hal-dump-executable-intermediates-to</code> Intermediate files (e.g. <code>.o</code> files, <code>.mlir</code> stages) <code>iree-hal-dump-executable-binaries-to</code> Binary files (e.g. <code>.so</code>, <code>.spv</code>, <code>.ptx</code>), as used in the <code>.vmfb</code> <code>iree-hal-dump-executable-benchmarks-to</code> Standalone benchmark files for <code>iree-benchmark-module</code> CPUGPU - VulkanGPU - CUDA <pre><code>$ mkdir -p /tmp/iree/simple_abs/\n\n$ iree-compile simple_abs.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-llvmcpu-link-embedded=false \\\n  --iree-hal-dump-executable-files-to=/tmp/iree/simple_abs \\\n  -o /tmp/iree/simple_abs/simple_abs_cpu.vmfb\n\n$ ls /tmp/iree/simple_abs\n\nmodule_abs_dispatch_0.mlir\nmodule_abs_dispatch_0_system_elf_x86_64_benchmark.mlir\nmodule_abs_dispatch_0_system_elf_x86_64.codegen.ll\nmodule_abs_dispatch_0_system_elf_x86_64.codegen.bc\nmodule_abs_dispatch_0_system_elf_x86_64.linked.ll\nmodule_abs_dispatch_0_system_elf_x86_64.linked.bc\nmodule_abs_dispatch_0_system_elf_x86_64.optimized.ll\nmodule_abs_dispatch_0_system_elf_x86_64.optimized.bc\nmodule_abs_dispatch_0_system_elf_x86_64.o\nmodule_abs_dispatch_0_system_elf_x86_64.s\nmodule_abs_dispatch_0_system_elf_x86_64.so\nsimple_abs_cpu.vmfb\n</code></pre> <p>Tip - Embedded and system linking</p> <p>The default value of <code>--iree-llvmcpu-link-embedded=true</code> generates embedded ELF files. By disabling that flag, the compiler will produce platform-standard <code>.so</code> files for Linux, <code>.dll</code> files for Windows, etc. While embedded ELF files can be smaller and more portable, inspection of artifacts is easier with platform-standard shared object files.</p> Tip - Disassembling <code>.bc</code> files with <code>llvm-dis</code> <p>This section can be skipped if the .ll files are already in the directory you choose. The <code>.bc</code> intermediate files use the LLVM BitCode format, which can be disassembled using <code>llvm-dis</code>:</p> <pre><code>// Build `llvm-dis` from source as needed:\n$ cmake --build iree-build/ --target llvm-dis\n$ iree-build/llvm-project/bin/llvm-dis --help\n\n$ cd /tmp/iree/simple_abs/\n$ llvm-dis module_abs_dispatch_0_system_elf_x86_64.codegen.bc\n$ cat module_abs_dispatch_0_system_elf_x86_64.codegen.ll\n\n; ModuleID = 'module_abs_dispatch_0_system_elf_x86_64.codegen.bc'\nsource_filename = \"abs_dispatch_0\"\ntarget triple = \"x86_64-linux-gnu\"\n\n%iree_hal_executable_library_header_t = type { i32, ptr, i32, i32 }\n%iree_hal_executable_dispatch_attrs_v0_t = type { i16, i16 }\n\n...\n\ndefine internal i32 @abs_dispatch_0_generic(\n    ptr noalias nonnull align 16 %0,\n    ptr noalias nonnull align 16 %1,\n    ptr noalias nonnull align 16 %2) #0 {\n  %4 = load %iree_hal_executable_dispatch_state_v0_t, ptr %1, align 8,\n  %5 = extractvalue %iree_hal_executable_dispatch_state_v0_t %4, 10,\n  %6 = load ptr, ptr %5, align 8,\n  %7 = ptrtoint ptr %6 to i64,\n  %8 = and i64 %7, 63,\n  %9 = icmp eq i64 %8, 0,\n  call void @llvm.assume(i1 %9),\n  %10 = load %iree_hal_executable_dispatch_state_v0_t, ptr %1, align 8,\n  %11 = extractvalue %iree_hal_executable_dispatch_state_v0_t %10, 10,\n  %12 = getelementptr ptr, ptr %11, i32 1,\n  %13 = load ptr, ptr %12, align 8,\n  %14 = ptrtoint ptr %13 to i64,\n  %15 = and i64 %14, 63,\n  %16 = icmp eq i64 %15, 0,\n  call void @llvm.assume(i1 %16),\n  %17 = load float, ptr %6, align 4,\n  %18 = call float @llvm.fabs.f32(float %17),\n  store float %18, ptr %13, align 4,\n  ret i32 0,\n}\n\n...\n</code></pre> <pre><code>$ mkdir -p /tmp/iree/simple_abs/\n\n$ iree-compile simple_abs.mlir \\\n  --iree-hal-target-device=vulkan \\\n  --iree-hal-dump-executable-files-to=/tmp/iree/simple_abs \\\n  -o /tmp/iree/simple_abs/simple_abs_vulkan.vmfb\n\n$ ls /tmp/iree/simple_abs\n\nmodule_abs_dispatch_0.mlir\nmodule_abs_dispatch_0_vulkan_spirv_fb_benchmark.mlir\nmodule_abs_dispatch_0_vulkan_spirv_fb.mlir\nmodule_abs_dispatch_0_vulkan_spirv_fb.spv\nsimple_abs_vulkan.vmfb\n</code></pre> Tip - Disassembling <code>.spv</code> files with <code>spirv-dis</code> <p>The <code>.spv</code> files use the SPIR-V binary format, which can be disassembled using <code>spirv-dis</code> from SPIR-V Tools:</p> <pre><code>$ cd /tmp/iree/simple_abs/\n$ spirv-dis module_abs_dispatch_0_vulkan_spirv_fb.spv\n\n; SPIR-V\n; Version: 1.0\n; Generator: Khronos; 22\n; Bound: 20\n; Schema: 0\n              OpCapability Shader\n              OpExtension \"SPV_KHR_storage_buffer_storage_class\"\n        %18 = OpExtInstImport \"GLSL.std.450\"\n              OpMemoryModel Logical GLSL450\n              OpEntryPoint GLCompute %abs_dispatch_0_generic \"abs_dispatch_0_generic\"\n              OpExecutionMode %abs_dispatch_0_generic LocalSize 1 1 1\n              OpName %__resource_var_0_0_ \"__resource_var_0_0_\"\n              OpName %__resource_var_0_1_ \"__resource_var_0_1_\"\n              OpName %abs_dispatch_0_generic \"abs_dispatch_0_generic\"\n              OpDecorate %_arr_float_uint_1 ArrayStride 4\n              OpMemberDecorate %_struct_2 0 Offset 0\n              OpDecorate %_struct_2 Block\n              OpDecorate %__resource_var_0_0_ Binding 0\n              OpDecorate %__resource_var_0_0_ DescriptorSet 0\n              OpDecorate %__resource_var_0_1_ Binding 1\n              OpDecorate %__resource_var_0_1_ DescriptorSet 0\n      %float = OpTypeFloat 32\n      %uint = OpTypeInt 32 0\n    %uint_1 = OpConstant %uint 1\n%_arr_float_uint_1 = OpTypeArray %float %uint_1\n  %_struct_2 = OpTypeStruct %_arr_float_uint_1\n%_ptr_StorageBuffer__struct_2 = OpTypePointer StorageBuffer %_struct_2\n%__resource_var_0_0_ = OpVariable %_ptr_StorageBuffer__struct_2 StorageBuffer\n%__resource_var_0_1_ = OpVariable %_ptr_StorageBuffer__struct_2 StorageBuffer\n      %void = OpTypeVoid\n          %9 = OpTypeFunction %void\n    %uint_0 = OpConstant %uint 0\n%_ptr_StorageBuffer_float = OpTypePointer StorageBuffer %float\n%abs_dispatch_0_generic = OpFunction %void None %9\n        %12 = OpLabel\n        %15 = OpAccessChain %_ptr_StorageBuffer_float %__resource_var_0_0_ %uint_0 %uint_0\n        %16 = OpLoad %float %15\n        %17 = OpExtInst %float %18 FAbs %16\n        %19 = OpAccessChain %_ptr_StorageBuffer_float %__resource_var_0_1_ %uint_0 %uint_0\n              OpStore %19 %17\n              OpReturn\n              OpFunctionEnd\n</code></pre> <pre><code>$ mkdir -p /tmp/iree/simple_abs/\n\n$ iree-compile simple_abs.mlir \\\n  --iree-hal-target-device=cuda \\\n  --iree-hal-dump-executable-files-to=/tmp/iree/simple_abs \\\n  -o /tmp/iree/simple_abs/simple_abs_cuda.vmfb\n\n$ ls /tmp/iree/simple_abs\n\nmodule_abs_dispatch_0_cuda_nvptx_fb_benchmark.mlir\nmodule_abs_dispatch_0_cuda_nvptx_fb.codegen.ll\nmodule_abs_dispatch_0_cuda_nvptx_fb.codegen.bc\nmodule_abs_dispatch_0_cuda_nvptx_fb.linked.ll\nmodule_abs_dispatch_0_cuda_nvptx_fb.linked.bc\nmodule_abs_dispatch_0_cuda_nvptx_fb.optimized.ll\nmodule_abs_dispatch_0_cuda_nvptx_fb.optimized.bc\nmodule_abs_dispatch_0_cuda_nvptx_fb.ptx\nmodule_abs_dispatch_0.mlir\nsimple_abs_cuda.vmfb\n</code></pre> Tip - Disassembling <code>.bc</code> files with <code>llvm-dis</code> <p>This section can be skipped if the .ll files are already in the directory you choose. The <code>.bc</code> intermediate files use the LLVM BitCode format, which can be disassembled using <code>llvm-dis</code>:</p> <pre><code>// Build `llvm-dis` from source as needed:\n$ cmake --build iree-build/ --target llvm-dis\n$ iree-build/llvm-project/bin/llvm-dis --help\n\n$ cd /tmp/iree/simple_abs/\n$ llvm-dis module_abs_dispatch_0_cuda_nvptx_fb.codegen.bc\n$ cat module_abs_dispatch_0_cuda_nvptx_fb.codegen.ll\n\n; ModuleID = 'module_abs_dispatch_0_cuda_nvptx_fb.codegen.bc'\nsource_filename = \"abs_dispatch_0\"\n\ndeclare ptr @malloc(i64)\n\ndeclare void @free(ptr)\n\ndeclare float @__nv_fabsf(float)\n\ndefine void @abs_dispatch_0_generic(ptr noalias readonly align 16 %0, ptr noalias align 16 %1) {\n  %3 = ptrtoint ptr %0 to i64\n  %4 = and i64 %3, 63\n  %5 = icmp eq i64 %4, 0\n  call void @llvm.assume(i1 %5)\n  %6 = ptrtoint ptr %1 to i64\n  %7 = and i64 %6, 63\n  %8 = icmp eq i64 %7, 0\n  call void @llvm.assume(i1 %8)\n  %9 = load float, ptr %0, align 4\n  %10 = call float @__nv_fabsf(float %9)\n  store float %10, ptr %1, align 4\n  ret void\n}\n\n!nvvm.annotations = !{!0, !1, !2, !3}\n\n!0 = !{ptr @abs_dispatch_0_generic, !\"kernel\", i32 1}\n!1 = !{ptr @abs_dispatch_0_generic, !\"maxntidx\", i32 1}\n!2 = !{ptr @abs_dispatch_0_generic, !\"maxntidy\", i32 1}\n!3 = !{ptr @abs_dispatch_0_generic, !\"maxntidz\", i32 1}\n</code></pre>"},{"location":"developers/general/developer-tips/#module-level-executable-benchmarks","title":"Module level executable benchmarks","text":"<p>The benchmark files produced by <code>--iree-hal-dump-executable-benchmarks-to</code> can be compiled in isolation and passed to <code>iree-benchmark-module</code>, where they exercise the full IREE runtime for a single executable:</p> <pre><code>$ iree-compile simple_abs.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-hal-dump-executable-benchmarks-to=/tmp/iree/simple_abs/ \\\n  -o /dev/null\n\n$ iree-compile \\\n  /tmp/iree/simple_abs/module_abs_dispatch_0_embedded_elf_x86_64_benchmark.mlir \\\n  -o /tmp/iree/simple_abs/module_abs_dispatch_0_benchmark.vmfb\n\n$ iree-benchmark-module \\\n  /tmp/iree/simple_abs/module_abs_dispatch_0_benchmark.vmfb\n</code></pre>"},{"location":"developers/general/developer-tips/#low-level-executable-binary-benchmarks","title":"Low level executable binary benchmarks","text":"<p>The binary files produced by <code>--iree-hal-dump-executable-binaries-to</code> can be passed to <code>iree-benchmark-executable</code> where they are benchmarked directly, without using the IREE VM, HAL APIs, task system, etc. Note that this interface is much lower level and you must specify all push constants / binding parameters manually:</p> <pre><code>$ iree-compile \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-hal-dump-executable-binaries-to=/tmp/iree/simple_abs/ \\\n  -o /dev/null\n\n$ iree-benchmark-executable \\\n  --device=local-sync \\\n  --executable_format=embedded-elf-x86_64 \\\n  --executable_file=/tmp/iree/simple_abs/module_abs_dispatch_0_embedded_elf_x86_64.so \\\n  --entry_point=0 \\\n  --binding=f32=-2.5 \\\n  --binding=f32=0 \\\n  --workgroup_count=1,1,1\n</code></pre> <p>See the comments in <code>tools/iree-benchmark-executable-main.c</code> and the test file at <code>tools/test/iree-benchmark-executable.mlir</code> for more information and examples.</p>"},{"location":"developers/general/developer-tips/#compiling-phase-by-phase","title":"Compiling phase by phase","text":"<p>IREE compiles programs through a series of broad phases:</p> <pre><code>graph LR\n  accTitle: Compilation phases overview\n  accDescr: Input to ABI to Flow to Stream to HAL to VM\n\n  A([Input])\n  A --&gt; B([ABI])\n  B --&gt; C([Flow])\n  C --&gt; D([Stream])\n  D --&gt; E([HAL])\n  E --&gt; F([VM])</code></pre> Tip - available phases <p>These are the phase names available for use with the <code>--compile-to</code> and <code>--compile-from</code> flags described below:</p> Phase name Description <code>start</code> Entry point to the compilation pipeline <code>input</code> Performs input processing and lowering into core IREE input dialects (linalg/etc) <code>abi</code> Adjusts the program ABI for the specified execution environment <code>preprocessing</code> Applies customizable <code>preprocessing</code> prior to FLow/Stream/HAL/VM <code>global-optimization</code> Performs global program optimization <code>dispatch-creation</code> Fuses operations and forms dispatch regions <code>flow</code> Models execution data flow and partitioning using the <code>flow</code> dialect <code>stream</code> Models execution partitioning and scheduling using the <code>stream</code> dialect <code>executable-sources</code> Prepares <code>hal</code> dialect executables for translation, prior to codegen <code>executable-configurations</code> Selects translation strategies for code generation <code>executable-targets</code> Runs code generation for <code>hal</code> dialect executables <code>hal</code> Finishes <code>hal</code> dialect processing <code>vm</code> Lowers to IREE's abstract virtual machine using the <code>vm</code> dialect <code>end</code> Completes the full compilation pipeline <p>For an accurate list of phases, see the source code or check the help output with a command such as:</p> <pre><code>iree-compile --help | sed -n '/--compile-to/,/--/p' | head -n -1\n</code></pre> <p>You can output a program snapshot at intermediate phases with the <code>--compile-to=&lt;phase name&gt;</code> flag:</p> <pre><code>$ cat simple_abs.mlir\n\nfunc.func @abs(%input : tensor&lt;f32&gt;) -&gt; (tensor&lt;f32&gt;) {\n  %result = math.absf %input : tensor&lt;f32&gt;\n  return %result : tensor&lt;f32&gt;\n}\n\n$ iree-compile simple_abs.mlir --compile-to=abi\n\nmodule {\n  func.func @abs(%arg0: !hal.buffer_view) -&gt; !hal.buffer_view attributes {iree.abi.stub} {\n    %0 = hal.tensor.import %arg0 \"input 0\" : !hal.buffer_view -&gt; tensor&lt;f32&gt;\n    %1 = math.absf %0 : tensor&lt;f32&gt;\n    %2 = hal.tensor.export %1 \"output 0\" : tensor&lt;f32&gt; -&gt; !hal.buffer_view\n    return %2 : !hal.buffer_view\n  }\n}\n</code></pre> <p>This is similar to the <code>--mlir-print-ir-after=</code> flag, but at clearly defined pipeline phases.</p> <p>Compilation can be continued from any intermediate phase. This allows for interative workflows - compile to a phase, make edits to the <code>.mlir</code> file, then resume compilation and continue through the pipeline:</p> <pre><code>$ iree-compile simple_abs.mlir --compile-to=abi -o simple_abs_abi.mlir\n\n$ sed \\\n  -e 's/math.absf/math.exp/' \\\n  -e 's/@abs/@exp/' \\\n  simple_abs_abi.mlir &gt; simple_exp_abi.mlir\n\n$ iree-compile simple_exp_abi.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  -o simple_exp_cpu.vmfb\n</code></pre> <p>or explicitly resume from an intermediate phase with <code>--compile-from=&lt;phase name&gt;</code>:</p> <pre><code>$ iree-compile simple_exp_abi.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --compile-from=abi \\\n  -o simple_exp_cpu.vmfb\n</code></pre>"},{"location":"developers/general/developer-tips/#dumping-compilation-phases","title":"Dumping compilation phases","text":"<p>The <code>--dump-compilation-phases-to</code> flag can be used to dump program IR after each phase, much like <code>--compile-to</code> but without exiting early:</p> <pre><code>$ iree-compile simple_abs.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --dump-compilation-phases-to=/tmp/iree/simple_abs \\\n  -o /tmp/iree/simple_abs/simple_abs_cpu.vmfb\n\n$ ls /tmp/iree/simple_abs -1v\n\nsimple_abs.1.input.mlir\nsimple_abs.2.abi.mlir\nsimple_abs.3.preprocessing.mlir\nsimple_abs.4.global-optimization.mlir\nsimple_abs.5.dispatch-creation.mlir\nsimple_abs.6.flow.mlir\nsimple_abs.7.stream.mlir\nsimple_abs.8.executable-sources.mlir\nsimple_abs.9.executable-configurations.mlir\nsimple_abs.10.executable-targets.mlir\nsimple_abs.11.hal.mlir\nsimple_abs.12.vm.mlir\n</code></pre> <p>As with <code>--compile-to</code>, these files can be used together with <code>--compile-from</code>:</p> <pre><code>$ iree-compile simple_abs.2.abi.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --compile-from=abi \\\n  -o simple_exp_cpu.vmfb\n</code></pre> <p>All together, these passes can be used to, for example:</p> <ul> <li>speed up triage (\"at which phase do we go wrong\")</li> <li>allow for faster development iteration (snapshot all phases at some baseline,   modify the compiler source, then resume from just before where those changes   impact a pipeline)</li> </ul>"},{"location":"developers/general/github-actions/","title":"GitHub Actions","text":""},{"location":"developers/general/github-actions/#overview","title":"Overview","text":"<p>We use GitHub Actions for continuous automation (CI) and continuous delivery (CD) workflows:</p> <ul> <li>Code formating and linting.</li> <li>Building from source and running tests.</li> <li>Building packages for testing and releases.</li> <li>Testing packages across a variety of platforms.</li> <li>Publishing the https://iree.dev website.</li> <li>Updating dependencies.</li> </ul> <p>Workflows are defined directly in the repository at <code>.github/workflows/</code>. We use a mix of GitHub-hosted runners and self-hosted runners to get automated build and test coverage across a variety of platforms and hardware accelerators.</p>"},{"location":"developers/general/github-actions/#terminology-primer","title":"Terminology primer","text":"<p>(Read more on https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions)</p> <ul> <li>Workflows are configurable automated processes that run one or more jobs.</li> <li>Jobs are a set of steps in a workflow that are executed on the same   runner.</li> <li>Steps are lists of commands or meta actions to run in a shell environment.</li> <li>Runners are servers (physical or virtual machines) that run workflows   when triggered.</li> <li>Events are specific activities in a repository that trigger a   workflow run.</li> </ul> <pre><code>graph\n  accTitle: Example workflow run diagram\n  accDescr {\n    An event runs two jobs - job 1 on runner 1 and job 2 on runner.\n    Job 1 runs four steps, each either an action or script.\n    Job 2 runs three other steps.\n  }\n\n  event(\"Event\")\n\n  event --&gt; runner_1\n  event --&gt; runner_2\n\n  subgraph runner_1[\"Runner 1\"]\n    job_1(\"Job 1\n    \u2022 Step 1: Run action\n    \u2022 Step 2: Run script\n    \u2022 Step 3: Run script\n    \u2022 Step 4: Run action\n    \")\n  end\n\n  subgraph runner_2[\"Runner 2\"]\n    job_2(\"Job 2\n    \u2022 Step 1: Run action\n    \u2022 Step 2: Run script\n    \u2022 Step 3: Run script\n    \")\n  end</code></pre>"},{"location":"developers/general/github-actions/#workflow-descriptions-and-status","title":"Workflow descriptions and status","text":""},{"location":"developers/general/github-actions/#ci-core-builds-and-tests","title":"\"CI\" - Core builds and tests","text":"<p>These workflows build the project from source then run unit tests.</p> <ul> <li>To keep these workflows focused, they should not need any special hardware   (e.g. GPUs).</li> <li>Some workflows in this category use sanitizers, debug builds, alternate   compilers, and other features that maintainers want automated coverage for.</li> </ul> Workflow file Build status Event triggers <code>ci.yml</code> <code>pull_request</code>, <code>push</code> <code>ci_linux_arm64_clang.yml</code> <code>schedule</code> <code>ci_macos_x64_clang.yml</code> <code>schedule</code> <code>ci_macos_arm64_clang.yml</code> <code>schedule</code> <code>ci_windows_x64_msvc.yml</code> <code>schedule</code> <code>ci_linux_x64_clang_byollvm.yml</code> <code>schedule</code> <code>ci_linux_x64_clang_debug.yml</code> <code>schedule</code> <code>ci_linux_x64_clang_tsan.yml</code> <code>schedule</code> <code>ci_linux_x64_gcc.yml</code> <code>schedule</code>"},{"location":"developers/general/github-actions/#pkgci-package-builds-and-tests","title":"\"PkgCI\" - Package builds and tests","text":"<p>These workflows build packages from source then run test suites using them.</p> <pre><code>graph LR\n  accTitle: Package tests\n  accDescr {\n    Package tests start with a build_package step.\n    After build_package, individual jobs are run in parallel for NVIDIA t4\n    tests, AMD mi300 tests, etc.\n  }\n\n  build_packages --&gt; test_nvidia_t4\n  build_packages --&gt; test_amd_mi300\n  build_packages --&gt; test_etc</code></pre> <ul> <li>Treat test workflows as code that downstream users would write - the   packages used in workflows should be interchangeable with packages   installed directly from PyPI or GitHub Releases.</li> <li>Test workflows can build the IREE runtime from source (possibly   cross-compiling) but they should use <code>iree-compile</code> and any other host tools   from the built packages.</li> <li>Test workflows can install other packages (e.g. <code>tensorflow</code>, <code>torch</code>) and   fetch from model repositories like   Hugging Face as needed to run test suites.</li> </ul> <p>Tip</p> <p>PkgCI workflows can be triggered directly to skip the 5-10 minute build \"build packages\" job when testing workflows. See the faster iteration on PkgCI workflows section below for details.</p> Workflow file Build status Event triggers Package tests <code>pkgci.yml</code> <code>pull_request</code>, <code>push</code>"},{"location":"developers/general/github-actions/#other-workflows","title":"Other workflows","text":"Workflow file Build status Event triggers <code>build_package.yml</code> <code>schedule</code> <code>publish_website.yml</code> <code>push</code>, <code>release</code>, <code>schedule</code> <code>samples.yml</code> <code>schedule</code>"},{"location":"developers/general/github-actions/#writing-and-editing-workflows","title":"Writing and editing workflows","text":""},{"location":"developers/general/github-actions/#docker-and-dependencies","title":"Docker and dependencies","text":"<p>Workflow files typically require some external dependencies in the form of software packages, environment settings, and sometimes even system/hardware drivers. One way to manage these dependencies is to bundle them into a container using a tool like Docker.</p> <p>Tip</p> <p>We recommend only using Docker containers within workflow files in specific cicumstances and with moderation.</p> <p>IREE contains a cross-compiler and minimal runtime, both of which are designed to run on a wide range of systems. Using carefully constructed containers for basic development risks the project only working within such containers.</p> <p>These sorts of dependencies may be a good fit for using Docker containers:</p> <ul> <li>Infrequently changing large dependencies like compiler toolchains.</li> <li>Dependencies with complicated installs (e.g. building from source, moving   files to specific paths).</li> <li>System dependencies like GPU drivers.</li> <li>Environment settings like disk partitions.</li> </ul> <p>Here are alternative ways to fetch and configure workflow/job dependencies:</p> <ul> <li>Install from a package manager like <code>pip</code> or <code>apt</code>.</li> <li>Use an action like   actions/setup-python to install   packages and add them to <code>PATH</code>.</li> <li>Use GitHub-hosted runners and their   installed software.</li> </ul>"},{"location":"developers/general/github-actions/#workflow-triggers","title":"Workflow triggers","text":"<p>Of the events that trigger workflows, we most commonly use:</p> <ul> <li><code>pull_request</code><ul> <li>Jobs most representative of core developer workflows should aim to run   here. Jobs can be marked required or   opt-in on presubmit on a case-by-case basis.</li> </ul> </li> <li><code>push</code><ul> <li>Jobs running here should be a superset of jobs running on <code>pull_request</code>.</li> </ul> </li> <li><code>schedule</code><ul> <li>Jobs designed to run nightly (e.g. nightly releases), jobs for non-core   configurations (like certain sanitizers/fuzzers), and jobs using   self-hosted runners in low supply can run on a schedule instead of on   every commit.</li> </ul> </li> <li><code>workflow_dispatch</code><ul> <li>This trigger is mostly used for manual workflow debugging.</li> <li>Where possible, jobs should allow this trigger so maintainers can test   workflows without needing to send pull requests.</li> </ul> </li> </ul> <p>\"Presubmit\" and \"postsubmit\"</p> <p>We use the terminology \"presubmit\" and \"postsubmit\" to differentiate between stages when checks run:</p> <ul> <li>\"Presubmit\" checks run on code that has not yet been   reviewed/approved/merged with either of the <code>pull_request</code> or   <code>workflow_dispatch</code> triggers.</li> <li>\"Postsubmit\" checks run on code that has been merged to a common branch   like <code>main</code> with either of the <code>push</code> or <code>schedule</code> triggers.</li> </ul> <p>In an ideal world every check would run on presubmit, but some operating system or hardware runners are in short supply and some workflows are slow even with sufficient resources (e.g. benchmark suites). We try to strike a balance between utility and economics.</p> <p>Example workflow triggers</p> <ul> <li><code>ci_linux_x64_clang_asan.yml</code>   runs on presubmit (<code>pull_request</code> trigger) and postsubmit (<code>push</code>   trigger). Even though this workflow builds the compiler and needs to use   large build machines because, it is generally useful for all C/C++   compiler and runtime changes.</li> <li><code>ci_linux_x64_clang_tsan.yml</code>   is similar to the ASan build but it runs on the <code>schedule</code> event because   it is only situationally useful and we want to limit use of large build   machines. It would run on GitHub-hosted runners if they could handle it   without running out of disk space.</li> <li><code>ci_linux_arm64_clang.yml</code>   uses the <code>schedule</code> event since GitHub does not offer free Linux arm64   runners.</li> </ul>"},{"location":"developers/general/github-actions/#required-and-optional-checks","title":"Required and optional checks","text":"<p>Any workflow that runs on the <code>pull_request</code> event can be either optional (the default) or required.</p> <ul> <li>All required checks must be passing for a pull request to be merged.</li> <li>Pull requests can be merged with optional checks pending or even failing.</li> <li>The auto-merge feature   will wait for required reviews to be met and required status checks to pass.</li> </ul> <p>Note</p> <p>Required checks must use only either standard GitHub-hosted runners or runners from the CPU builder pool.</p>"},{"location":"developers/general/github-actions/#opt-in-for-presubmit-jobs","title":"Opt-in for presubmit jobs","text":"<p>GitHub supports <code>paths</code> and <code>paths-ignore</code> filters for <code>push</code> and <code>pull_request</code> events that can be used to configure which workflows run based on paths modified. This mechanism is simple but somewhat limited in what it can express, so we have a custom mechanism for marking certain jobs as conditionally enabled:</p> <ul> <li>Always run on <code>push</code> events, after pull requests are merged (postsubmit).</li> <li> <p>Jobs may be marked as opt-in for <code>pull_request</code> events (presubmit) by editing   <code>build_tools/github_actions/configure_ci.py</code>.   That script runs as part of the   <code>setup.yml</code>   action, which jobs can depend on like so:</p> <pre><code>jobs:\n  setup:\n    uses: ./.github/workflows/setup.yml\n\n  test:\n    needs: [setup]\n    if: contains(fromJson(needs.setup.outputs.enabled-jobs), 'test')\n    steps:\n      - ...\n</code></pre> </li> <li> <p>Opt-in jobs can also be set up to run automatically if specific file paths   are modified, much like GitHub's <code>paths</code> and <code>paths-ignore</code> filters.</p> </li> </ul> <p>To bypass the computed configuration of workflows to run, see the CI behavior manipulation section of our contributing guide.</p>"},{"location":"developers/general/github-actions/#using-github-hosted-and-self-hosted-runners","title":"Using GitHub-hosted and self-hosted runners","text":"<p>We group runners into categories:</p> <ol> <li>GitHub-hosted runners: standard (free)<ul> <li>Workflow jobs should use these GitHub-hosted runners when at all possible.</li> </ul> </li> <li>GitHub-hosted runners: large (paid)<ul> <li>We aren't currently using these, but they have been useful where   self-hosting is difficult.</li> </ul> </li> <li>Self-hosted runners: CPU builders<ul> <li>The core project maintainers sponsor a pool of powerful CPU build machines   used to build the core project and packages. To limit the load on this   pool, we restrict jobs using these runners to only the most essential.</li> </ul> </li> <li>Self-hosted runners: special hardware<ul> <li>Project contributors can offer their own hardware as self-hosted runners,   allowing tests to be run on that hardware at whatever frequency they   have the capacity to support.</li> <li>Due to how difficult it can be to keep self-hosted runners operating   reliably, and how access is limited to the group that maintains the   hardware, any jobs using these self-hosted runners must be optional and   easy to disable.</li> <li>Self-hosted runners can either be ephemeral (one job per runner,   compatible with   autoscaling),   or persistent. Persistent runners can retain local build and artifact   caches to improve workflow time substantially.</li> </ul> </li> </ol> <p>Contributing self-hosted runners</p> <p>Want to run tests on your own hardware as part of IREE's upstream CI? Get in touch with us on one of our communication channels and we'd be happy to discuss the options available.</p>"},{"location":"developers/general/github-actions/#faster-iteration-on-pkgci-workflows","title":"Faster iteration on PkgCI workflows","text":"<p>Each pkgci workflow can be triggered directly with <code>workflow_dispatch</code> to run tests using a previous run of the build_packages job.</p> <ol> <li>Find the <code>artifact_run_id</code> from a prior run to use packages from. You can    go through the history at    https://github.com/iree-org/iree/actions/workflows/pkgci.yml for this. For    example, https://github.com/iree-org/iree/actions/runs/13723791082 has    run id <code>13723791082</code>.</li> <li>Choose which workflow you want to run and navigate to its control page on    https://github.com/iree-org/iree/actions, like    https://github.com/iree-org/iree/actions/workflows/pkgci_unit_test.yml    for    <code>pkgci_unit_test.yml</code>.</li> <li> <p>Run the workflow using the <code>workflow_dispatch</code> trigger, selecting the branch    you want to test and providing the <code>artifact_run_id</code> from step 1:</p> <p></p> </li> </ol>"},{"location":"developers/general/github-actions/#maintenance-tips","title":"Maintenance tips","text":"<ul> <li>Certain workflow failures are posted in the <code>#github-ci</code> channel in IREE's   Discord server.</li> <li>GitHub supports   notifications for workflow runs   but only for the user that last modified a workflow.</li> <li>GitHub sometimes experiences incidents outside of our control. Monitor   https://www.githubstatus.com/ to see if issues are widespread.</li> <li>Repository admins can monitor repository runners at   https://github.com/iree-org/iree/settings/actions/runners.</li> <li>Organization admins can monitor organization runners at   https://github.com/organizations/iree-org/settings/actions/runners.</li> </ul>"},{"location":"developers/general/github-actions/#useful-resources","title":"Useful resources","text":"<p>Official:</p> <ul> <li>Guides for GitHub Actions: https://docs.github.com/en/actions/guides.</li> <li>Events that trigger workflows:   https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows.</li> <li>About GitHub-hosted runners:   https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners.</li> <li>About large runners:   https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners.</li> <li>GitHub Actions Runner application: https://github.com/actions/runner.</li> <li>GitHub Actions Runner Images with included software:   https://github.com/actions/runner-images.</li> </ul> <p>Community:</p> <ul> <li>A curated list of awesome things related to GitHub Actions:   https://github.com/sdras/awesome-actions.</li> </ul>"},{"location":"developers/general/release-management/","title":"Release management","text":""},{"location":"developers/general/release-management/#overview","title":"Overview","text":"<p>Releases are the process by which we build and deliver software to our users. We use a mix of automation and operational practices as part of our continuous delivery (CD) efforts.</p> <p>Releases have the following goals (among others):</p> <ul> <li>Produce and publish easily installable packages to common package managers   for users.</li> <li>Introduce checkpoints with predictable versions around which release notes,   testing efforts, and other related activities can align.</li> <li>Improve project and ecosystem velocity and stability.</li> </ul>"},{"location":"developers/general/release-management/#stable-and-nightly-releases","title":"Stable and nightly releases","text":"<p>In addition to stable releases, we build and publish nightly releases too. Nightly releases are less tested and may not include all configurations at all times, but they are convenient to install as a preview for what the next stable release will contain.</p> <p> </p> <ul> <li>Stable releases are published to GitHub releases, are pushed to PyPI, and are installable via <code>pip install</code> using default options.</li> <li>Nightly releases are published to only GitHub releases as \"pre-releases\" and are installable via <code>pip install</code> using non-default options like <code>--find-links</code> and our hosted index page at https://iree.dev/pip-release-links.html.</li> </ul>"},{"location":"developers/general/release-management/#projects-in-scope","title":"Projects in scope","text":"<p>The IREE release process currently considers packages in these projects to be in scope:</p> <ul> <li>iree-org/iree</li> <li>iree-org/iree-turbine</li> <li>nod-ai/shark-ai</li> </ul> <p>Info</p> <p>If you maintain a project that you would like to connect with this release process, please reach out on one of our communication channels. The current project list is driven by the priorities of the core project maintainers and we would be happy to adapt the process to include other projects too.</p> <p>The dependency graph looks like this:</p> <pre><code>graph TD\n  accTitle: Dependency graph between in-scope packages\n\n  subgraph iree[\"iree-org/iree\"]\n    iree-base-compiler\n    iree-base-runtime\n    iree-tools-tf\n    iree-tools-tflite\n  end\n\n  subgraph turbine[\"iree-org/iree-turbine\"]\n    iree-turbine\n  end\n\n  iree-base-compiler --&gt; iree-turbine\n  iree-base-runtime --&gt; iree-turbine\n\n  subgraph sharkai[\"nod-ai/shark-ai\"]\n    sharktank\n    shortfin\n    shark-ai\n  end\n\n  iree-base-compiler --&gt; sharktank\n  iree-turbine --&gt; sharktank\n  iree-base-runtime -. source dependency .-&gt; shortfin\n  sharktank --&gt; shark-ai\n  shortfin --&gt; shark-ai</code></pre>"},{"location":"developers/general/release-management/#types-of-dependency-links","title":"Types of dependency links","text":"<p>Most dependencies are loose requirements, not imposing strict limitations on the versions installed. This allows users to freely install similar versions of each package without risking issues during pip dependency resolution. This is important for libraries near the root or middle of a dependency graph.</p> iree-turbine METADATA snippet<pre><code>Requires-Dist: numpy\nRequires-Dist: iree-base-compiler\nRequires-Dist: iree-base-runtime\nRequires-Dist: Jinja2&gt;=3.1.3\nRequires-Dist: ml_dtypes&gt;=0.5.0\n</code></pre> <p>The shark-ai package is special in that it is a leaf project acting as a full solution for ML model development that does specify precise versions. By installing this package, users will receive packages that have been more rigorously tested together:</p> shark-ai METADATA snippet<pre><code>Requires-Dist: iree-base-compiler==3.2.*\nRequires-Dist: iree-base-runtime==3.2.*\nRequires-Dist: iree-turbine==3.2.*\nRequires-Dist: sharktank==3.2.0\nRequires-Dist: shortfin==3.2.0\n</code></pre> <p>This feeds back into the release process - while release candidate selection typically flows from the base projects outwards, leaf projects are responsible for testing regularly and ensuring that the entire collective continues to work as expected.</p>"},{"location":"developers/general/release-management/#release-timeline","title":"Release timeline","text":"<p>Over the course of a release cycle there are several milestones to look out for:</p> <ul> <li>Week 0<ul> <li>Release <code>X.Y.0</code> is published (see also   Versioning scheme)</li> <li>Versions in source code are updated to <code>X.{Y+1}.0</code> (see also   Creating a patch release)</li> <li>The next release date target is set for ~6 weeks later</li> <li>Subprojects set goals for the release</li> </ul> </li> <li>~1 week before the release date<ul> <li>Any unstable build/test/release workflows must be stabilized</li> <li>Calls for release note contributions are sent out</li> <li>Release notes are drafted</li> <li>Release candidates are selected</li> <li>Release candidates are tested</li> </ul> </li> <li>Release day<ul> <li>Release candidates are promoted, release notes are published</li> <li>The cycle repeats</li> </ul> </li> </ul> <p>Downstream projects are encouraged to test as close to HEAD as possible leading up to each release, so there are multiple high quality candidates to choose from and release candidate testing processes require minimal manual effort.</p> <p>Note</p> <p>We do not yet have a process for creating release branches. Instead, we choose a release candidate from nightly builds of the <code>main</code> branch. We also do not choose a cutoff point in advance for the release candidate selection.</p> <p>This process will likely need to evolve for future releases.</p>"},{"location":"developers/general/release-management/#release-status","title":"Release status","text":"<p>Stable release history: https://github.com/iree-org/iree/releases?q=prerelease%3Afalse.</p>"},{"location":"developers/general/release-management/#iree-org-projects","title":"iree-org projects","text":"Project Package Release status iree-org/iree GitHub release (stable) GitHub release (nightly) <code>iree-base-compiler</code> <code>iree-base-runtime</code> <code>iree-tools-tf</code> <code>iree-tools-tflite</code> iree-org/iree-turbine GitHub release (stable) <code>iree-turbine</code>"},{"location":"developers/general/release-management/#community-projects","title":"Community projects","text":"Project Package Release status nod-ai/shark-ai GitHub release (stable) <code>shark-ai</code> <code>sharktank</code> <code>shortfin</code>"},{"location":"developers/general/release-management/#deprecated-packages","title":"Deprecated packages","text":"Project Package Release status Notes iree-org/iree <code>iree-compiler</code> Renamed to <code>iree-base-compiler</code> <code>iree-runtime</code> Renamed to <code>iree-base-runtime</code> <code>iree-runtime-instrumented</code> Merged into <code>iree[-base]-runtime</code> <code>iree-tools-xla</code> Merged into <code>iree-tools-tf</code> nod-ai/SHARK-Turbine <code>shark-turbine</code> Renamed to <code>iree-turbine</code>"},{"location":"developers/general/release-management/#release-mechanics","title":"Release mechanics","text":"<p>IREE cuts automated releases via a workflow that is triggered daily. The only constraint placed on the commit that is released is that it has passed certain CI checks. These are published on GitHub with the \"pre-release\" status. For debugging this process, see the Release debugging playbook.</p> <p>We periodically promote one of these candidates to a \"stable\" release.</p>"},{"location":"developers/general/release-management/#running-a-release","title":"Running a release","text":"<p>A pinned issue tracking the next release should be filed like https://github.com/iree-org/iree/issues/18380. Developers authoring patches that include major or breaking changes should coordinate merge timing and contribute release notes on those issues.</p>"},{"location":"developers/general/release-management/#picking-a-candidate-to-promote","title":"Picking a candidate to promote","text":"<p>After approximately one month since the previous release, a new release should be promoted from nightly release candidates.</p> <p>When selecting a candidate we aim to meet the following criteria:</p> <ol> <li>Includes packages for all platforms, including macOS and Windows</li> <li>\u2a862 days old so that problems with it may have been spotted</li> <li>Contains no major regressions vs the previous stable release</li> </ol> <p>When you've identified a potential candidate, comment on the tracking issue with the proposal and solicit feedback. People may point out known regressions or request that some feature make the cut.</p>"},{"location":"developers/general/release-management/#promoting-a-candidate-to-stable","title":"Promoting a candidate to stable","text":"<ol> <li> <p>(Authorized users only) Push to PyPI using     pypi_deploy.sh</p> </li> <li> <p>Create a new release on GitHub:</p> <ul> <li> <p>Set the tag to be created and select a target commit. For example, if the     candidate release was tagged <code>iree-3.1.0rc20241119</code> at commit <code>3ed07da</code>,     set the new release tag <code>v3.1.0</code> and use the same commit.</p> <p></p> <p>If the commit does not appear in the list, create and push a tag manually:</p> <pre><code>git checkout iree-3.1.0rc20250107\ngit tag -a v3.1.0 -m \"Version 3.1.0 release.\"\ngit push upstream v3.1.0\n</code></pre> </li> <li> <p>Set the title to <code>Release vX.Y.Z</code>.</p> </li> <li> <p>Paste the release notes from the release tracking issue.</p> </li> <li> <p>Upload the <code>.whl</code> files produced by the <code>pypy_deploy.sh</code> script (look for     them in your <code>/tmp/</code> directory). These have the stable release versions     in them.</p> </li> <li> <p>Download the <code>iree-dist-.*.tar.xz</code> files from the candidate release and     upload them to the new stable release.</p> </li> <li> <p>Uncheck the option for \"pre-release\", and check the option for \"latest\".</p> <p></p> </li> </ul> </li> <li> <p>Complete any remaining checkbox items on the release tracking issue then    close it and open a new one for the next release.</p> </li> </ol>"},{"location":"developers/general/release-management/#creating-a-patch-release","title":"Creating a patch release","text":"<ol> <li> <p>Create a new branch.</p> <p>Checkout the corresponding stable release and create a branch for the patch release:</p> <pre><code>git checkout v3.0.0\ngit checkout -b v3.0.1\n</code></pre> </li> <li> <p>Apply and commit the patches.</p> </li> <li> <p>Set the patch level:</p> <ul> <li> <p>Adjust <code>compiler/version.json</code> if patches are applied to the compiler.</p> </li> <li> <p>Adjust <code>runtime/version.json</code> if patches are applied to the runtime.</p> </li> </ul> </li> <li> <p>Push all changes to the new branch.</p> </li> <li> <p>Trigger the     Oneshot candidate release workflow     to create a release.</p> <ul> <li> <p>Select to run the workflow from the patch branch.</p> </li> <li> <p>Set the type of build version to produce to \"stable\".</p> <p></p> </li> </ul> </li> <li> <p>Follow the documentation above to promote to stable.    The step to create a new tag can be skipped.</p> </li> </ol>"},{"location":"developers/general/release-management/#useful-references","title":"Useful references","text":"<ul> <li>Chapter 24: Continuous Delivery   in the   Software Engineering at Google Book</li> <li>Chapter 8: Release Engineering   in the   Site Reliability Engineering at Google Book</li> <li>RELEASE.md in the   PyTorch repository</li> <li>ONNX Releases for the   ONNX project</li> </ul>"},{"location":"developers/general/testing-guide/","title":"Testing guide","text":"<p>Like the IREE project in general, IREE tests are divided into a few different components and use different tooling depending on the needs of that component.</p> Test type Test Build system Supported platforms Compiler tests iree_lit_test Bazel/CMake Host Runtime tests iree_cc_test Bazel/CMake Host/Device iree_native_test Bazel/CMake Host/Device iree_hal_cts_test_suite CMake Host/Device Core E2E tests iree_check_test Bazel/CMake Host/Device iree_static_linker_test CMake Host/Device <p>There are also more <code>*_test_suite</code> targets that groups test targets with the same configuration together.</p>"},{"location":"developers/general/testing-guide/#compiler-tests","title":"Compiler tests","text":"<p>Tests for the IREE compilation pipeline are written as lit tests in the same style as MLIR.</p> <p>By convention, IREE includes tests for</p> <ul> <li>printing and parsing of ops in <code>.../IR/test/{OP_CATEGORY}_ops.mlir</code> files</li> <li>folding and canonicalization in <code>.../IR/test/{OP_CATEGORY}_folding.mlir</code> files</li> <li>compiler passes and pipelines in other <code>.../test/*.mlir</code> files</li> </ul>"},{"location":"developers/general/testing-guide/#running-a-test","title":"Running a test","text":"<p>For the test <code>iree/compiler/Dialect/VM/Conversion/MathToVM/test/arithmetic_ops.mlir</code></p> <p>With CMake, run this from the build directory:</p> <pre><code>ctest -R iree/compiler/Dialect/VM/Conversion/MathToVM/test/arithmetic_ops.mlir.test\n</code></pre> <p>With Bazel, run this from the repo root:</p> <pre><code>bazel test //compiler/src/iree/compiler/Dialect/VM/Conversion/MathToVM/test:arithmetic_ops.mlir.test\n</code></pre>"},{"location":"developers/general/testing-guide/#writing-a-test","title":"Writing a test","text":"<p>For advice on writing MLIR compiler tests, see the MLIR testing guide. Tests should be <code>.mlir</code> files in <code>test</code> directory adjacent to the functionality they are testing. Instead of <code>mlir-opt</code>, use <code>iree-opt</code>, which registers IREE dialects and passes and doesn't register some unnecessary core ones.</p> <p>As with most parts of the IREE compiler, these should not have a dependency on the runtime.</p>"},{"location":"developers/general/testing-guide/#configuring-the-build-system","title":"Configuring the build system","text":"<p>In the Bazel BUILD file, create a <code>iree_lit_test_suite</code> rule. We usually create a single suite that globs all <code>.mlir</code> files in the directory and is called \"lit\".</p> <pre><code>load(\"//iree/build_tools/bazel:iree_lit_test.bzl\", \"iree_lit_test_suite\")\n\niree_lit_test_suite(\n    name = \"lit\",\n    srcs = glob([\"*.mlir\"]),\n    tools = [\n        \"@llvm-project//llvm:FileCheck\",\n        \"//tools:iree-opt\",\n    ],\n)\n</code></pre> <p>There is a corresponding CMake function, calls to which will be generated by our Bazel to CMake converter.</p> <pre><code>iree_lit_test_suite(\n  NAME\n    lit\n  SRCS\n    \"arithmetic_ops.mlir\"\n  DATA\n    FileCheck\n    iree-opt\n)\n</code></pre> <p>You can also create a test for a single file with <code>iree_lit_test</code>.</p>"},{"location":"developers/general/testing-guide/#runtime-tests","title":"Runtime tests","text":"<p>Tests for the runtime C++ code use the GoogleTest testing framework. They should generally follow the style and best practices of that framework.</p>"},{"location":"developers/general/testing-guide/#running-a-test_1","title":"Running a test","text":"<p>For the test <code>/runtime/src/iree/base/bitfield_test.cc</code>:</p> <p>With CMake, run this from the build directory:</p> <pre><code>ctest -R iree/base/bitfield_test\n</code></pre> <p>With Bazel, run this from the repo root:</p> <pre><code>bazel test //runtime/src/iree/base:arena_test\n</code></pre>"},{"location":"developers/general/testing-guide/#setting-test-environments","title":"Setting test environments","text":"<p>Parallel testing for <code>ctest</code> can be enabled via the <code>CTEST_PARALLEL_LEVEL</code> environment variable. For example:</p> <pre><code>export CTEST_PARALLEL_LEVEL=$(nproc)\n</code></pre> <p>To use the Vulkan backend as test driver, you may need to select between a Vulkan implementation from SwiftShader and multiple Vulkan-capable hardware devices. This can be done via environment variables. See the generic Vulkan setup page for details regarding these variables.</p> <p>For Bazel, you can persist the configuration in <code>user.bazelrc</code> to save typing. For example:</p> <pre><code>test:vkswiftshader --test_env=\"LD_LIBRARY_PATH=...\"\ntest:vkswiftshader --test_env=\"VK_LAYER_PATH=...\"\ntest:vknative --test_env=\"LD_LIBRARY_PATH=...\"\ntest:vknative --test_env=\"VK_LAYER_PATH=...\"\n</code></pre> <p>Then you can use <code>bazel test --config=vkswiftshader</code> to select SwiftShader as the Vulkan implementation. Similarly for other implementations.</p>"},{"location":"developers/general/testing-guide/#writing-a-test_1","title":"Writing a test","text":"<p>For advice on writing tests in the GoogleTest framework, see the GoogleTest primer. Test files for source file <code>foo.cc</code> with build target <code>foo</code> should live in the same directory with source file <code>foo_test.cc</code> and build target <code>foo_test</code>. You should <code>#include</code> <code>iree/testing/gtest.h</code> instead of any of the gtest or gmock headers.</p> <p>As with all parts of the IREE runtime, these should not have a dependency on the compiler.</p>"},{"location":"developers/general/testing-guide/#configuring-the-build-system_1","title":"Configuring the build system","text":"<p>In the Bazel BUILD file, create a <code>cc_test</code> target with your test file as the source and any necessary dependencies. Usually, you can link in a standard gtest main function. Use <code>iree/testing:gtest_main</code> instead of the <code>gtest_main</code> that comes with gtest.</p> <pre><code>cc_test(\n    name = \"arena_test\",\n    srcs = [\"arena_test.cc\"],\n    deps = [\n        \":arena\",\n        \"//iree/testing:gtest_main\",\n    ],\n)\n</code></pre> <p>We have created a corresponding CMake function <code>iree_cc_test</code> that mirrors the Bazel rule's behavior. Our Bazel to CMake converter should generally derive the <code>CMakeLists.txt</code> file from the BUILD file:</p> <pre><code>iree_cc_test(\n  NAME\n    arena_test\n  SRCS\n    \"arena_test.cc\"\n  DEPS\n    ::arena\n    iree::testing::gtest_main\n)\n</code></pre> <p>There are other more specific test targets, such as <code>iree_hal_cts_test_suite</code>, which are designed to test specific runtime support with template configuration and is not supported by Bazel rules.</p>"},{"location":"developers/general/testing-guide/#iree-core-end-to-end-e2e-tests","title":"IREE core end-to-end (e2e) tests","text":"<p>Here \"end-to-end\" means from the input accepted by the IREE core compiler (dialects like TOSA, StableHLO, Linalg) to execution using the IREE runtime components. It does not include tests of the integrations with ML frameworks (e.g. TensorFlow, PyTorch) or bindings to other languages (e.g. Python).</p> <p>We avoid using the more traditional <code>lit</code> tests used elsewhere in the compiler for runtime execution tests. Lit tests require running the compiler tools on the test platform through shell or python scripts that act on files from a local file system. On platforms like Android, the web, and embedded systems, each of these features is either not available or is severely limited.</p> <p>Instead, to test these flows we use a custom framework called <code>check</code>. The check framework compiles test programs on the host machine into standalone test binary files that can be pushed to test devices (such as Android phones) where they run with gtest style assertions (e.g. <code>check.expect_almost_eq(lhs, rhs)</code>).</p>"},{"location":"developers/general/testing-guide/#building-e2e-tests","title":"Building e2e tests","text":"<p>The files needed by these tests are not built by default with CMake. You'll need to build the special <code>iree-test-deps</code> target to generate test files prior to running CTest (from the build directory):</p> <pre><code>cmake --build . --target iree-test-deps\n</code></pre>"},{"location":"developers/general/testing-guide/#running-a-test_2","title":"Running a Test","text":"<p>For the test <code>tests/e2e/stablehlo_ops/floor.mlir</code> compiled for the VMVX target backend and running on the VMVX driver (here they match exactly, but in principle there's a many-to-many mapping from backends to drivers).</p> <p>With CMake, run this from the build directory:</p> <pre><code>ctest -R tests/e2e/stablehlo_ops/check_vmvx_local-task_floor.mlir\n</code></pre> <p>With Bazel, run this from the repo root:</p> <pre><code>bazel test tests/e2e/stablehlo_ops:check_vmvx_local-task_floor.mlir\n</code></pre>"},{"location":"developers/general/testing-guide/#setting-test-environments_1","title":"Setting test environments","text":"<p>Similarly, you can use environment variables to select Vulkan implementations for running tests as explained in the Runtime tests section.</p>"},{"location":"developers/general/testing-guide/#writing-a-test_2","title":"Writing a test","text":"<p>These tests live in <code>tests/e2e</code>. A single test consists of a <code>.mlir</code> source file specifying an IREE module where each exported function takes no inputs and returns no results and corresponds to a single test case.</p> <p>As an example, here are some tests for the MHLO floor operation:</p> <pre><code>func.func @tensor() {\n  %input = util.unfoldable_constant dense&lt;[0.0, 1.1, 2.5, 4.9]&gt; : tensor&lt;4xf32&gt;\n  %result = \"mhlo.floor\"(%input) : (tensor&lt;4xf32&gt;) -&gt; tensor&lt;4xf32&gt;\n  check.expect_almost_eq_const(%result, dense&lt;[0.0, 1.0, 2.0, 4.0]&gt; : tensor&lt;4xf32&gt;): tensor&lt;4xf32&gt;\n  return\n}\n\nfunc.func @scalar() {\n  %input = util.unfoldable_constant dense&lt;101.3&gt; : tensor&lt;f32&gt;\n  %result = \"mhlo.floor\"(%input) : (tensor&lt;f32&gt;) -&gt; tensor&lt;f32&gt;\n  check.expect_almost_eq_const(%result, dense&lt;101.0&gt; : tensor&lt;f32&gt;): tensor&lt;f32&gt;\n  return\n}\n\nfunc.func @negative() {\n  %input = util.unfoldable_constant dense&lt;-1.1&gt; : tensor&lt;f32&gt;\n  %result = \"mhlo.floor\"(%input) : (tensor&lt;f32&gt;) -&gt; tensor&lt;f32&gt;\n  check.expect_almost_eq_const(%result, dense&lt;-2.0&gt; : tensor&lt;f32&gt;): tensor&lt;f32&gt;\n  return\n}\n</code></pre> <p>Test cases are created in gtest for each public function exported by the module.</p> <p>Note the use of <code>util.unfoldable_constant</code> to specify test constants. If we were to use a regular constant the compiler would fold away everything at compile time and our test would not actually test the runtime. <code>unfoldable_constant</code> adds a barrier that prevents folding. To prevent folding/constant propagate on an arbitrary SSA-value you can use <code>util.optimization_barrier</code>.</p> <p>Next we use this input constant to exercise the runtime feature under test (in this case, just a single floor operation). Finally, we use a check dialect operation to make an assertion about the output. There are a few different assertion operations. Here we use the <code>expect_almost_eq_const</code> op: almost because we are comparing floats and want to allow for floating-point imprecision, and const because we want to compare it to a constant value. This last part is just syntactic sugar around</p> <pre><code>%expected = arith.constant dense&lt;101.0&gt; : tensor&lt;f32&gt;\ncheck.expect_almost_eq(%result, %expected) : tensor&lt;f32&gt;\n</code></pre> <p>The output of running this test looks like:</p> <pre><code>[==========] Running 4 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 4 tests from module\n[ RUN      ] module.tensor\n[       OK ] module.tensor (76 ms)\n[ RUN      ] module.scalar\n[       OK ] module.scalar (79 ms)\n[ RUN      ] module.double\n[       OK ] module.double (55 ms)\n[ RUN      ] module.negative\n[       OK ] module.negative (54 ms)\n[----------] 4 tests from module (264 ms total)\n\n[----------] Global test environment tear-down\n[==========] 4 tests from 1 test suite ran. (264 ms total)\n[  PASSED  ] 4 tests.\n</code></pre> <p>The \"module\" name for the test suite comes from the default name for an implicit MLIR module. To give the test suite a more descriptive name, use an explicit named top-level module in this file.</p>"},{"location":"developers/general/testing-guide/#configuring-the-build-system_2","title":"Configuring the build system","text":"<p>A single <code>.mlir</code> source file can be turned into a test target with the <code>iree_check_test</code> Bazel macro (and corresponding CMake function).</p> <pre><code>load(\"//build_tools/bazel:iree_check_test.bzl\", \"iree_check_test\")\n\niree_check_test(\n    name = \"check_vmvx_local-task_floor.mlir\",\n    src = \"floor.mlir\",\n    driver = \"local-task\",\n    target_backend = \"vmvx\",\n)\n</code></pre> <p>The target naming convention is \"check_backend_driver_src\". The generated test will automatically be tagged with a \"driver=vmvx\" tag, which can help filter tests by backend (especially when many tests are generated, as below).</p> <p>Usually we want to create a suite of tests across many backends and drivers. This can be accomplished with additional macros. For a single backend/driver pair:</p> <pre><code>load(\"//build_tools/bazel:iree_check_test.bzl\", \"iree_check_single_backend_test_suite\")\n\niree_check_single_backend_test_suite(\n    name = \"check_vmvx_local-task\",\n    srcs = glob([\"*.mlir\"]),\n    driver = \"local-task\",\n    target_backend = \"vmvx\",\n)\n</code></pre> <p>This will generate a separate test target for each file in <code>srcs</code> with a name following the convention above as well as a Bazel test_suite called \"check_vmvx_local-task\" that will run all the generated tests.</p> <p>You can also generate suites across multiple pairs:</p> <pre><code>load(\"//build_tools/bazel:iree_check_test.bzl\", \"iree_check_test_suite\")\n\niree_check_test_suite(\n    name = \"check\",\n    srcs = [\"success.mlir\"],\n    # Leave this argument off to run on all supported backend/driver pairs.\n    target_backends_and_drivers = [\n        (\"vmvx\", \"local-task\"),\n        (\"vulkan-spirv\", \"vulkan\"),\n    ],\n)\n</code></pre> <p>This will create a test per source file and backend/driver pair, a test suite per backend/driver pair, and a test suite, \"check\", that will run all the tests.</p> <p>The CMake functions follow a similar pattern. The calls to them are generated in our <code>CMakeLists.txt</code> file by bazel_to_cmake.</p> <p>There are other test targets that generate tests based on template configuraton and platform detection, such as <code>iree_static_linker_test</code>. Those targets are not supported by Bazel rules at this point.</p>"},{"location":"developers/general/testing-guide/#external-test-suites","title":"External test suites","text":""},{"location":"developers/general/testing-guide/#iree-test-suites","title":"iree-test-suites","text":"<p>Multiple test suites are under development in the iree-org/iree-test-suites repository.</p> <ul> <li>Many program, input, and output files are too large to store directly in Git,   especially in a monorepo, so test suites may use   Git LFS, cloud storage, and persistent caches on   test machines as needed.</li> <li>Keeping tests out of tree forces them to use public project APIs and allows   the core project to keep its infrastructure simpler.</li> </ul>"},{"location":"developers/general/testing-guide/#linalg-operator-tests","title":"linalg operator tests","text":"<p>Tests for operators in the MLIR linalg dialect like <code>matmul</code>, and <code>convolution</code> are being migrated from folders like <code>tests/e2e/matmul/</code> in the iree-org/iree repository to <code>linalg_ops/</code> in the iree-org/iree-test-suites repository.</p>"},{"location":"developers/general/testing-guide/#onnx-operator-tests","title":"ONNX operator tests","text":"<p>Tests for individual ONNX operators are included at <code>onnx_ops/</code> in the iree-org/iree-test-suites repository. These tests are generated from the upstream tests at <code>onnx/backend/test/data/node/</code> in the onnxx/onnx repository.</p> <p>Testing ONNX programs follows several stages:</p> <pre><code>graph LR\n  Import -. \"(offline)\" .-&gt; Compile\n  Compile --&gt; Run</code></pre> <p>This particular test suite treats importing as an offline step and contains test cases organized into folders of programs, inputs, and expected outputs:</p> Sample test case directory<pre><code>test_case_name/\n  model.mlir\n  input_0.bin\n  output_0.bin\n  run_module_io_flags.txt\n</code></pre> Sample run_module_io_flags.txt<pre><code>--input=2x3xf32=@input_0.bin\n--expected_output=2x3xf32=@output_0.bin\n</code></pre> <p>Each test case can be run using a sequence of commands like:</p> <pre><code>iree-compile model.mlir {flags} -o model.vmfb\niree-run-module --module=model.vmfb --flagfile=run_module_io_flags.txt\n</code></pre> <p>To run slices of the test suite, a pytest runner is included that can be configured using JSON files. The JSON files tested in the IREE repo itself are stored in <code>tests/external/iree-test-suites/onnx_ops/</code>. For example, here is part of a config file for running ONNX operator tests on CPU:</p> tests/external/iree-test-suites/onnx_ops/onnx_ops_cpu_llvm_sync.json<pre><code>{\n  \"config_name\": \"cpu_llvm_sync\",\n  \"iree_compile_flags\": [\n    \"--iree-hal-target-device=local\",\n    \"--iree-hal-local-target-device-backends=llvm-cpu\",\n    \"--iree-input-demote-f64-to-f32=false\"\n  ],\n  \"iree_run_module_flags\": [\n    \"--device=local-sync\"\n  ],\n  \"skip_compile_tests\": [\n    \"onnx/node/generated/test_dequantizelinear\",\n    \"onnx/node/generated/test_einsum_inner_prod\",\n    \"onnx/node/generated/test_group_normalization_epsilon_expanded\",\n    \"onnx/node/generated/test_group_normalization_example_expanded\"\n  ],\n  \"skip_run_tests\": [\n    \"onnx/node/generated/test_gridsample_zeros_padding\"\n  ],\n  \"expected_compile_failures\": [\n</code></pre>"},{"location":"developers/general/testing-guide/#updating-config-files","title":"Updating config files","text":"<p>If the ONNX operator tests fail on a GitHub Actions workflow, check the logs for the nature of the failure. Often, a test is newly passing, with logs like this:</p> <pre><code>=================================== FAILURES ===================================\n_ IREE compile and run: test_mod_uint64::model.mlir::model.mlir::cpu_llvm_sync _\n[gw1] linux -- Python 3.11.9 /home/runner/work/iree/iree/venv/bin/python\n[XPASS(strict)] Expected run to fail (included in 'expected_run_failures')\n</code></pre> <p>The workflow job that failed should then upload a new config file as an \"Artifact\", which can be downloaded from the action run summary page and then committed:</p> <p></p>"},{"location":"developers/general/testing-guide/#onnx-model-tests","title":"ONNX model tests","text":"<p>Tests for ONNX models are included at <code>onnx_models/</code> in the iree-org/iree-test-suites repository. These tests use models from the upstream onnx/models repository.</p> <p>Like the ONNX operator tests, the ONNX model tests use configuration files to control which flags are used and which tests are run. The config files tested in the IREE repo itself are stored in <code>tests/external/iree-test-suites/onnx_models/</code>. For example, here is part of a config file for running ONNX model tests on CPU:</p> tests/external/iree-test-suites/onnx_models/onnx_models_cpu_llvm_task.json<pre><code>{\n  \"config_name\": \"cpu_llvm_task\",\n  \"iree_compile_flags\": [\n    \"--iree-hal-target-device=local\",\n    \"--iree-hal-local-target-device-backends=llvm-cpu\",\n    \"--iree-llvmcpu-target-cpu=host\"\n  ],\n  \"iree_run_module_flags\": [\n    \"--device=local-task\"\n  ],\n  \"tests_and_expected_outcomes\": {\n    \"default\": \"skip\",\n    \"tests/model_zoo/validated/vision/body_analysis_models_test.py::test_models[age_gender/models/age_googlenet.onnx]\": \"pass\",\n    \"tests/model_zoo/validated/vision/body_analysis_models_test.py::test_models[age_gender/models/gender_googlenet.onnx]\": \"pass\",\n</code></pre> <p>Unlike the ONNX operator tests, we do not run the full set of tests on every commit to iree-org/iree. Instead, we run a curated list of small tests that are expected to pass in iree-org/iree and then run the full set of tests nightly in iree-org/iree-test-suites.</p>"},{"location":"developers/general/testing-guide/#sharktank-tests","title":"sharktank tests","text":"<p>Tests for small scale versions of Large Language Models (LLMs) and other Generative AI (GenAI) programs exported using the sharktank package built as part of the shark-ai project are included at <code>sharktank_models/</code> in the iree-org/iree-test-suites repository.</p> <p>Types of Sharktank tests:</p> <ul> <li>Small scale versions of models</li> <li>Quality tests for full models</li> <li>Benchmarks for full models</li> </ul>"},{"location":"developers/general/testing-guide/#shark-testsuite","title":"SHARK-TestSuite","text":"<p>The nod-ai/SHARK-TestSuite repository also contains tests using IREE, llvm/torch-mlir, and nod-ai/shark-ai.</p> <p>Some test coverage may overlap between SHARK-TestSuite and iree-test-suites, though some tests are planned to be migrated into iree-org/iree-test-suites once they mature and have demonstrated general utility to the upstream developer community.</p> <p>Test reports for nightly runs in SHARK-TestSuite are uploaded to nod-ai/e2eshark-reports.</p>"},{"location":"developers/general/versioning-scheme/","title":"Versioning scheme","text":"<p>A shared version format is used for the packages</p> <ul> <li><code>iree-base-compiler</code> (formally named <code>iree-compiler</code>)</li> <li><code>iree-base-runtime</code> (formally named <code>iree-runtime</code>)</li> <li><code>iree-turbine</code></li> </ul>"},{"location":"developers/general/versioning-scheme/#overview","title":"Overview","text":"Type of build Version format Version example Stable release (PyPI) <code>X.Y.Z</code> <code>3.0.0</code> Nightly release (GitHub <code>schedule</code>) <code>X.Y.ZrcYYYYMMDD</code> <code>3.0.0rc20241029</code> Dev release (GitHub <code>pull_request</code>) <code>X.Y.Z.devNN</code> <code>3.0.0.dev+6d55a11</code> Local build <code>X.Y.Z.devNN</code> <code>3.0.0.dev+6d55a11</code>"},{"location":"developers/general/versioning-scheme/#key","title":"Key","text":"Identifier Explanation <code>X</code> Major version <code>Y</code> Minor version <code>Z</code> Patch version <code>rc</code> release candidate (<code>main</code> branch) <code>dev</code> developer build (code on pull request branches) <code>YYYY</code> Year, e.g. <code>2024</code> <code>MM</code> Month, e.g. <code>10</code> <code>DD</code> Day, e.g. <code>29</code> <code>NN</code> git commit hash, e.g. <code>6d55a11</code>"},{"location":"developers/general/versioning-scheme/#composition-of-version-numbers","title":"Composition of version numbers","text":"<p>A release number is in the format of <code>X.Y.Z</code> (MAJOR.MAJOR.PATCH)</p> <ul> <li><code>X</code> and <code>Y</code> are defined as shared version numbers between all packages.</li> <li>The patch level <code>Z</code> MAY be incremented individually.</li> <li>A PATCH release contains only bug fixes and the version <code>Z</code> (<code>x.y.Z</code>) MUST be   incremented. A bug fix is an internal change that fixes incorrect behavior   and MUST NOT introduce breaking changes.</li> <li>A MINOR release (unlike SemVer) as well as a MAJOR release MAY contain   backwards-incompatible, breaking changes, like API changes and removals and   furthermore bug fixes and new features.</li> </ul>"},{"location":"developers/general/versioning-scheme/#development-and-nightly-releases","title":"Development and nightly releases","text":"<ul> <li>Development builds (e.g. from a regular CI) MUST be released with a version   number defined as <code>X.Y.Z.dev+NN</code>, where <code>NN</code> is the git commit hash.</li> <li>Nightly releases MUST be released with a version number defined as <code>X.Y.ZrcYYYYMMDD</code>.</li> <li>The intent is to promote a recent, high quality release candidate to a final   version.</li> </ul> <p>Binary stamps and tools will continue to report the original release candidate version.</p>"},{"location":"developers/general/versioning-scheme/#semantics","title":"Semantics","text":"<p>The following semantics apply:</p> <ul> <li>If the version <code>X</code> (<code>X.y.z</code>) is increased for one package, the version number   change MUST be adopted by all (other) packages. The same applies for the   version <code>Y</code> (<code>x.Y.Z</code>).</li> <li>If the version <code>X</code> or <code>Y</code> are changed, <code>Z</code> MUST be set <code>0</code>.</li> <li>After a regular (non-patch) release, <code>Y</code> MUST be increased to ensure   precedence of nightly builds.   For example:<ul> <li>The latest stable release published on November 15th 2024 is versioned as   version <code>3.0.0</code>.</li> <li>The next nightly builds are released as <code>3.1.0rc20241116</code>.</li> <li>The next stable release is released as <code>3.1.0</code> or <code>4.0.0</code>.</li> </ul> </li> </ul>"},{"location":"developers/performance/benchmarking/","title":"Benchmarking","text":"<p>IREE uses benchmarks to inspect performance at varying levels of granularity. Benchmarking is implemented using the Google Benchmark library. To understand performance details and guide optimization, please refer to the IREE profiling documentation.</p>"},{"location":"developers/performance/benchmarking/#module-benchmarks","title":"Module Benchmarks","text":"<p><code>iree-benchmark-module</code> is a program accepting (almost) the same inputs as <code>iree-run-module</code> that will benchmark the invocation of a single entry function. It measures timing for the whole process of invoking a function through the VM, including allocating and freeing output buffers. This is a high-level benchmark of an entire invocation flow. It provides a big picture view, but depends on many different variables, like an integration test. For finer-grained measurements more akin to unit tests, see Executable Benchmarks.</p> <p>To use <code>iree-benchmark-module</code>, generate an IREE module for the target backend:</p> <pre><code>$ bazel run //tools:iree-compile -- \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  $PWD/samples/models/simple_abs.mlir \\\n  -o /tmp/module.fb\n</code></pre> <p>and then benchmark an exported function in that module:</p> <pre><code>$ bazel run //tools:iree-benchmark-module -- \\\n  --module=/tmp/module.fb \\\n  --device=local-task \\\n  --function=abs \\\n  --input=f32=-2\n</code></pre> <p>You'll see output like</p> <pre><code>Run on (12 X 4500 MHz CPU s)\nCPU Caches:\n  L1 Data 32K (x6)\n  L1 Instruction 32K (x6)\n  L2 Unified 1024K (x6)\n  L3 Unified 8448K (x1)\nLoad Average: 2.21, 1.93, 3.34\n***WARNING*** CPU scaling is enabled, the benchmark real time measurements may\n be noisy and will incur extra overhead.\n***WARNING*** Library was built as DEBUG. Timings may be affected.\n------------------------------------------------------------------------------\nBenchmark                                    Time             CPU   Iterations\n------------------------------------------------------------------------------\nBM_RunModule/process_time/real_time       0.22 ms         0.23 ms         3356\n</code></pre> <p>Notice that there are a few warnings in there (you may not see all of these). The benchmark library helpfully warns about some common issues that will affect benchmark timing. When trying to obtain real benchmark numbers, you should generally build an optimized build (<code>-c opt</code> in Bazel) and disable CPU scaling.</p> <pre><code>bazel build -c opt //tools:iree-benchmark-module\n</code></pre> <p>Another thing to consider is that depending on where you are running the benchmark you might want to avoid additional programs running at the same time. Bazel itself runs a server even when it's not being actively invoked that can be quite a memory hog, so we'll instead invoke the binary directly. Use your favorite process manager (e.g. htop or pkill on Linux) to kill heavy-weight programs such as Chrome and Bazel.</p> <p>Now we'll actually invoke the binary:</p> <pre><code>$ ./bazel-bin/tools/iree-benchmark-module \\\n  --module=/tmp/module.fb \\\n  --device=local-task \\\n  --function=abs \\\n  --input=f32=-2\n</code></pre> <pre><code>Run on (12 X 4500 MHz CPU s)\nCPU Caches:\n  L1 Data 32K (x6)\n  L1 Instruction 32K (x6)\n  L2 Unified 1024K (x6)\n  L3 Unified 8448K (x1)\nLoad Average: 1.49, 3.42, 3.49\n------------------------------------------------------------------------------\nBenchmark                                    Time             CPU   Iterations\n------------------------------------------------------------------------------\nBM_RunModule/process_time/real_time      0.011 ms        0.014 ms        61654\n</code></pre> <p>Remember to restore CPU scaling when you're done.</p>"},{"location":"developers/performance/benchmarking/#executable-benchmarks","title":"Executable Benchmarks","text":"<p>We also benchmark the performance of individual parts of the IREE system in isolation. IREE breaks a model down to dispatch functions. To benchmark all the dispatch functions, generate an IREE module with the <code>-iree-flow-export-benchmark-funcs</code> flag set:</p> <pre><code>$ build/tools/iree-compile \\\n  --iree-input-type=stablehlo \\\n  --iree-flow-export-benchmark-funcs \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=vmvx \\\n  tests/e2e/stablehlo_models/fullyconnected.mlir \\\n  -o /tmp/fullyconnected.vmfb\n</code></pre> <p>and then benchmark all exported dispatch functions (and all exported functions) in that module:</p> <pre><code>$ build/tools/iree-benchmark-module\n  --module=/tmp/fullyconnected.vmfb\n  --device=local-task\n</code></pre> <p>If no <code>entry_function</code> is specified, <code>iree-benchmark-module</code> will register a benchmark for each exported function that takes no inputs.</p> <p>You will see output like:</p> <pre><code>Run on (72 X 3700 MHz CPU s)\nCPU Caches:\n  L1 Data 32 KiB (x36)\n  L1 Instruction 32 KiB (x36)\n  L2 Unified 1024 KiB (x36)\n  L3 Unified 25344 KiB (x2)\nLoad Average: 4.39, 5.72, 6.76\n---------------------------------------------------------------------------------------------\nBenchmark                                                   Time             CPU   Iterations\n---------------------------------------------------------------------------------------------\nBM_main_ex_dispatch_0_benchmark/process_time/real_time  0.030 ms        0.037 ms        34065\nBM_main_ex_dispatch_1_benchmark/process_time/real_time  0.034 ms        0.042 ms        20567\nBM_main_ex_dispatch_2_benchmark/process_time/real_time  0.043 ms        0.051 ms        18576\nBM_main_ex_dispatch_3_benchmark/process_time/real_time  0.029 ms        0.036 ms        21345\nBM_main_ex_dispatch_4_benchmark/process_time/real_time  0.042 ms        0.051 ms        15880\nBM_main_ex_dispatch_5_benchmark/process_time/real_time  0.030 ms        0.037 ms        17854\nBM_main_ex_dispatch_6_benchmark/process_time/real_time  0.043 ms        0.052 ms        14919\nBM_main_benchmark/process_time/real_time                0.099 ms        0.107 ms         5892\n</code></pre>"},{"location":"developers/performance/benchmarking/#bytecode-module-benchmarks","title":"Bytecode Module Benchmarks","text":"<p>Normally, the IREE VM is expected to be integrated into applications and driving model execution. So its performance is of crucial importance. We strive to introduce as little overhead as possible and have several benchmark binaries dedicated for evaluating the VM's performance. These benchmark binaries are named as <code>*_benchmark</code> in the <code>iree/vm/</code> directory. They also use the Google Benchmark library as the above.</p>"},{"location":"developers/performance/benchmarking/#cpu-configuration","title":"CPU Configuration","text":"<p>When benchmarking, it's important to consider the configuration of your CPUs. Most notably, CPU scaling can give variable results, so you'll usually want to disable it. This can get pretty complex, but the most basic thing to do is to run all CPUs at maximum frequency. The other thing to consider is what CPU(s) your program is running on. Both of these get more complicated on mobile and in multithreaded workloads.</p>"},{"location":"developers/performance/benchmarking/#linux","title":"Linux","text":"<p>Google benchmark provides some instructions. Note that the library will print \"CPU scaling is enabled\" warnings for any configuration that doesn't have the quota governor set to performance. Similarly the CPU frequency it reports is the maximum frequency of cpu0, not the frequency of the processor it's actually running on. This means that more advanced configurations should ignore these messages.</p> <p>Turn off CPU scaling before benchmarking.</p> <pre><code>sudo cpupower frequency-set --governor performance\n</code></pre> <p>Restore CPU scaling after benchmarking:</p> <pre><code>sudo cpupower frequency-set --governor powersave\n</code></pre> <p>To learn more about different quota governor settings, see https://www.kernel.org/doc/Documentation/cpu-freq/governors.txt. To restrict which CPUs you run on, use the <code>taskset</code> command which takes a hexadecimal mask.</p> <p>To only run on the lowest-numbered CPU you can run</p> <pre><code>taskset 1 sleep 20 &amp;\n</code></pre> <p>You can confirm that the process is running on the given CPU:</p> <pre><code>ps -o psr $!\n</code></pre> <p>Note that <code>$!</code> indicates the process ID of the last executed background command, so you can only use this shorthand if you didn't run any commands after the sleep. For more info on taskset, see https://linux.die.net/man/1/taskset.</p>"},{"location":"developers/performance/benchmarking/#android","title":"Android","text":"<p>Read and understand the Linux instructions first.</p> <p>Android doesn't give us quite as nice tooling, but the principle is basically the same. One important difference is that thermal throttling is a much bigger concern on mobile. Without a cooling plate, it is likely that high clock speeds will overheat the device and engage thermal throttling, which will ignore whatever clock speeds you may have set to prevent things from catching on fire. Therefore the naive approach above is likely not a good idea.</p> <p>You will likely need to be root (use <code>su</code> or <code>adb root</code>). The commands will depend on your exact phone and number of cores. First play around and make sure you understand what everything means. Note that each CPU has its own files which are used to control its behavior, but changes to a single CPU will sometimes affect others (see <code>/sys/devices/system/cpu/cpu0/cpufreq/affected_cpus</code>).</p> <p>Some useful files:</p> <pre><code>/proc/cpuinfo\n/sys/devices/system/cpu/possible\n/sys/devices/system/cpu/present\n/sys/devices/system/cpu/cpu0/online\n/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\n/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies\n/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq\n/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq\n/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq\n/sys/devices/system/cpu/cpu0/cpufreq/affected_cpus\n/sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed\n</code></pre> <p>See the clockspeed of each CPU</p> <pre><code>$ for i in `cat /sys/devices/system/cpu/present | tr '-' ' ' | xargs seq`; do \\\n    paste \\\n      \"/sys/devices/system/cpu/cpu${i?}/cpufreq/cpuinfo_cur_freq\" \\\n      \"/sys/devices/system/cpu/cpu${i?}/cpufreq/cpuinfo_min_freq\" \\\n      \"/sys/devices/system/cpu/cpu${i?}/cpufreq/cpuinfo_max_freq\"; \\\ndone\n</code></pre> <p>Before changing things, make sure to check the current scaling governor settings first so you can put them back when you're done.</p> <pre><code>$ for i in `cat /sys/devices/system/cpu/present | tr '-' ' ' | xargs seq`; do \\\n    cat \"/sys/devices/system/cpu/cpu${i?}/cpufreq/scaling_governor\"; \\\ndone\n</code></pre>"},{"location":"developers/performance/benchmarking/#single-core-example","title":"Single-Core Example","text":"<p>Here's an example to run IREE in a single-threaded context on CPU 7 at its lowest clock speed.</p> <p>First we'll take control of the clockspeed by setting the governor to \"userspace\".</p> <pre><code>$ for i in `cat /sys/devices/system/cpu/present | tr '-' ' ' | xargs seq`; do \\\n  echo userspace &gt; \\\n    \"/sys/devices/system/cpu/cpu${i?}/cpufreq/scaling_governor\"; \\\ndone\n</code></pre> <p>We can now set individual clock speeds. We'll pin cpu7 to its minimum frequency. We choose the minimum instead of the maximum here to mitigate thermal throttling concerns</p> <pre><code>$ cat /sys/devices/system/cpu/cpu7/cpufreq/cpuinfo_min_freq &gt; \\\n/sys/devices/system/cpu/cpu7/cpufreq/scaling_setspeed\n</code></pre> <p>We can confirm the frequencies of all the CPUs by running the same command above. Now to run a command specifically on cpu7, use <code>taskset 80</code> (hex for 10000000):</p> <pre><code>taskset 80 sleep 20 &amp;\nps -o psr $!\n</code></pre> <p>Remember to cleanup when you're done! Here we'll set the scaling governor back to schedutil because that's what they were before on the particular device this, was tested on, but that may not exist on all devices.</p> <pre><code>$ for i in `cat /sys/devices/system/cpu/present | tr '-' ' ' | xargs seq`; do \\\n  echo schedutil &gt; \\\n    \"/sys/devices/system/cpu/cpu${i?}/cpufreq/scaling_governor\"; \\\ndone\n</code></pre>"},{"location":"developers/performance/profiling-cpu-events/","title":"Profiling CPUs","text":"<p>CPUs are able to record certain events that may be relevant when investigating the performance of a program. A common example of such an event is a \"cache miss\", when the program tries to access data in memory that isn't already in some CPU cache, causing that access to be slower than it could otherwise be.</p> <p>Querying and analyzing this data can be useful, but is hard in two distinct ways:</p> <ul> <li>Depending on the CPU and on the OS, both hardware and software limitations can   get in the way of obtaining accurate data.</li> <li>This data tends to be inherently difficult to interpret, even when it is   perfectly accurate. In practice it is often noisy and inaccurate, which makes   interpretation even more complicated.</li> </ul> <p>There are two parts to this page: platform-specific information about how to query this data, and, at the end, a platform-independent explanation of how to interpret it.</p>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#perf-and-simpleperf-on-linux-and-android","title":"Perf and Simpleperf, on Linux and Android","text":"","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#overview","title":"Overview","text":"<p>The Linux kernel exposes system event counters to user-space programs by means of the <code>perf_event_open</code> system call. This includes both hardware event counters (such as CPU cache events) and software events from the kernel (such as page faults and context switches). Anyone may use this system call to implement a profiler, but Linux readily offers one, <code>perf</code>.</p>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#preserving-artifacts","title":"Preserving artifacts","text":"<p>By default IREE cleans up any temporary files it creates while running. Tools like perf, however, require those files exist even after the process has exited. The environment variable <code>IREE_PRESERVE_DYLIB_TEMP_FILES</code> can be set to preserve the files. This is only needed for the CPU path when using the system loader.</p> <pre><code>export IREE_PRESERVE_DYLIB_TEMP_FILES=1\n</code></pre>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#desktop-linux","title":"Desktop linux","text":"<p>On desktop Linux we can use <code>perf</code>. It is provided on most Linux distributions, for instance on Debian-based distributions do:</p> <pre><code>sudo apt install linux-perf\n</code></pre> <p>Run the program to be profiled, prepending its command line with <code>perf record</code>. By default this will write the profile data to the current directory, <code>./perf.data</code>. Sometimes this isn't ideal, such as then the current directory is under version control. Explicit paths can be specified by <code>-o</code> flag to direct the output of <code>perf record</code>, and then by <code>-i</code> flags to select the input of subsequent commands analyzing the profile. Example:</p> <pre><code>perf record -o /tmp/perf.data \\\n  ./tools/iree-benchmark-module \\\n    --device=local-task \\\n    ... command-line arguments of iree-benchmark-module as usual ...\n</code></pre> <p>By default, this samples time spent. One may specify instead an event to sample by, with the <code>-e</code> flag. For instance, to sample by L1 cache misses, one may do:</p> <pre><code>perf record -o /tmp/perf.data -e L1-dcache-load-misses \\\n  ./tools/iree-benchmark-module \\\n    --device=local-task \\\n    ... command-line arguments of iree-benchmark-module as usual ...\n</code></pre> <p><code>perf list</code> dumps the list of event types.</p> <p>Once you have recorded a profile, there are two main ways to analyze it: <code>perf report</code> and <code>perf annotate</code>.</p> <p><code>perf report</code> breaks down the event counts by symbol. In the default case where what was sampled was time, this is just an ordinary profile by symbol name, no different than what could be viewed in other profilers such as Tracy. Where it gets really interesting is when the profile was recording a specific event type, as in the above <code>-e L1-dcache-load-misses</code> example:</p> <pre><code>perf report -i /tmp/perf.data\n\nSamples: 6K of event 'L1-dcache-load-misses', Event count (approx.): 362571861\nOverhead  Command          Shared Object              Symbol\n  61.53%  cpu0             dylib_executablenzpx2Q.so  [.] serving_default_ex_dispatch_31\n  13.30%  cpu0             dylib_executablenzpx2Q.so  [.] serving_default_ex_dispatch_11\n   2.11%  cpu0             dylib_executablenzpx2Q.so  [.] serving_default_ex_dispatch_13\n   1.90%  cpu0             dylib_executablenzpx2Q.so  [.] serving_default_ex_dispatch_19\n   1.54%  cpu0             dylib_executablenzpx2Q.so  [.] serving_default_ex_dispatch_25\n   1.49%  cpu0             dylib_executablenzpx2Q.so  [.] serving_default_ex_dispatch_5\n</code></pre> <p><code>perf annotate</code> breaks down the event counts by instruction. Again, in the default case where what was sampled was time, this is no different than what could be viewed in Tracy, and the real motivation to use <code>perf</code> is when profiling by specific event types as in the above <code>-e L1-dcache-load-misses</code> example:</p> <pre><code>perf annotate -i perf.data\n\nSamples: 6K of event 'L1-dcache-load-misses', 4000 Hz, Event count (approx.): 362571861\nserving_default_ex_dispatch_31  /tmp/dylib_executablenzpx2Q.so [Percent: local period]\n  1.66 \u2502        movups -0x1000(%rdi),%xmm10\n  0.48 \u2502        movups -0x800(%rdi),%xmm9\n  0.82 \u2502        movups (%rdi),%xmm8\n  0.49 \u2502        movaps %xmm1,%xmm4\n  0.12 \u2502        shufps $0x0,%xmm1,%xmm4\n  0.14 \u2502        mulps  %xmm5,%xmm4\n  0.28 \u2502        addps  %xmm6,%xmm4\n  0.60 \u2502        movaps %xmm3,%xmm6\n  0.34 \u2502        shufps $0x0,%xmm3,%xmm6\n</code></pre>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#warning","title":"Warning","text":"<p><code>perf annotate</code> is even noisier than <code>perf report</code> as it can be overly optimistic, depending on the CPU, to pin an event to a specific instruction. Typically, this works fairly well on x86 CPUs and less well on ARM CPUs and more generally on anything mobile. Even on a desktop x86 CPU, this is noisy, as the above example (recorded on a Skylake workstation) shows: it blamed a <code>mulps %xmm5,%xmm4</code> instruction for a cache miss, which doesn't make sense as that instruction only touches registers.</p>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#android","title":"Android","text":"<p>On Android we can use <code>simpleperf</code>. It's preinstalled on current Android <code>userdebug</code> images, and part of the Android NDK.</p> <p>In theory, as Android is Linux, it should be possible to use <code>perf</code>. Unfortunately, <code>perf</code> is difficult to build for Android. Fortunately, <code>simpleperf</code> is readily available: it is preinstalled in Android <code>userdebug</code> images, and it is part of the Android NDK.</p> <p>First, we record on the device:</p> <pre><code>adb shell \\\n  simpleperf record -e raw-l1d-cache-refill -o /data/local/tmp/perf.data \\\n    /data/local/tmp/iree-benchmark-module \\\n      --device=local-task \\\n      ... command-line arguments of iree-benchmark-module as usual ...\n</code></pre> <p>Then pull the recorded data from the device, and analyze on the desktop. We assume that <code>${ANDROID_NDK}</code> points to the local copy of the Android NDK.</p> <pre><code>adb pull /data/local/tmp/perf.data /tmp/perf.data\n${ANDROID_NDK}/simpleperf/report.py -i /tmp/perf.data\n</code></pre> <p>This prints a breakdown of <code>raw-l1d-cache-refill</code> events by symbol.</p> <p>Like with <code>perf</code>, a list of event types can be queried by the <code>list</code> subcommand:</p> <pre><code>adb shell simpleperf list\n</code></pre>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#no-support-for-annotate-by-cpu-event","title":"No support for <code>annotate</code> by CPU event","text":"<p>There is no <code>simpleperf annotate</code>. The <code>simpleperf</code> documentation lists a couple of ways of achieving the same thing.</p> <p>However:</p> <ul> <li>The common case of annotating by time, as opposed to annotating by CPU event,   is supported by Tracy.</li> <li>Annotating by CPU event is inherently not working due to hardware limitations   of the ARM CPUs found in Android devices. That is, the hardware is too   imprecise at pinning an event to a particular instruction.</li> </ul>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#interpreting-cpu-event-counts","title":"Interpreting CPU event counts","text":"","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#problems","title":"Problems","text":"<p>There are multiple layers of complexity in interpreting CPU event counts.</p>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#these-events-are-in-themselves-normal","title":"These events are in themselves normal","text":"<p>The first difficulty is in the fact that most of these events are normal. So just knowing that they happened is not in itself actionable.</p> <p>For example, if we learn that some code causes cache misses, that isn't big news: so does all code. Maybe this code has too many cache misses, but how many is too many? Maybe this code alone accounts for a large fraction of the overall total of the whole program, but maybe even that is normal, for instance if the code being studied is the 'hot' part of the program where a large fraction of overall time is spent?</p>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#these-events-are-hardware-dependent-and-under-documented","title":"These events are hardware-dependent and under-documented","text":"<p>Many of these events have a meaning that varies between CPUs and that is difficult to characterize on any CPU, let alone in a way that applies to all CPUs.</p> <p>For example, take the \"L2 data cache refill\". On ARM, with <code>simpleperf</code>, that would be <code>raw-l2d-cache-refill</code>. Questions:</p> <ul> <li>Is \u201cL2\u201d inclusive of   \u201cL1\u201d?</li> <li>How many bytes are transferred per \u201crefill\u201d?</li> <li>Are accesses induced by speculative execution or by automatic pre-fetching   counted in the same way as accesses induced by actual code execution?</li> </ul> <p>The answers to all of the above questions are CPU-dependent. They may even vary between the CPU cores of the same Android device.</p>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#these-events-are-imprecise-and-noisy-particularly-on-arm-cpus","title":"These events are imprecise and noisy, particularly on ARM CPUs","text":"<p>Expect noise levels above 10% in many CPU event counts on ARM CPUs. Moreover, on ARM, as discussed above, there is inaccuracy in which instruction is blamed for which event, which will increase inaccuracy of per-symbol breakdowns for very cheap symbols (and makes <code>perf annotate</code> impossible as noted above). Finally, be aware that some ARM CPUs may perform event count interpolation, so we may not have any access to true hardware counts.</p>","tags":["CPU"]},{"location":"developers/performance/profiling-cpu-events/#recommendations","title":"Recommendations","text":"<p>Here is a workflow pattern that allows to make significant use of CPU event counts, despite all the problems noted above:</p> <ul> <li>Hypothesize that some code diff might help performance, and might help   reducing the number of CPU events of a certain type, and that the two might be   related.</li> <li>Benchmark with and without the code diff, on the same device, everything else   being equal.<ul> <li>Let your benchmark perform a fixed number of iterations, or, if using a benchmark termination condition of the form \"run until at least N seconds have elapsed\", carefully divide event counts by the actual number of iterations that were run.</li> </ul> </li> <li>If the observed CPU event count difference is significant, go ahead and claim   that your code diff probably helps with that aspect of CPU behavior.</li> </ul> <p>Some things NOT to be done:</p> <ul> <li>Don\u2019t try to compare different metrics, not even when it seems obvious that   they should satisfy a simple relationship, not even on the same CPU (e.g. \u201cL1   accesses should be greater than L2 accesses\u201d).</li> <li>Don\u2019t divide by some \u201ctotal\u201d metric to get some kinds of ratios. For example,   don\u2019t try to compute a \u201ccache miss ratio\u201d as quotient of \u201ccache refill\u201d over   \u201call cache accesses\u201d metrics. The first problem with that (even before we get   to CPU-specific issues) is that that\u2019s rewarding increases to the \u201call cache   accesses\u201d metrics, so if something bad happens in your codegen and your kernel   ends up spilling a lot of register to the stack, that\u2019s going to be a lot more   accesses which will all be L1 hits so that\u2019ll help this ratio look better!  So   more generally, just try to minimize some CPU metrics (that count \u201ccostly\u201d   events), not some more complex math expression formed from arithmetic on CPU   metrics.</li> </ul>","tags":["CPU"]},{"location":"developers/performance/profiling-gpu-vulkan/","title":"Profiling GPUs using Vulkan","text":"<p>Tracy offers great insights into CPU/GPU interactions and Vulkan API usage details. However, information at a finer granularity, especially inside a particular shader dispatch, is missing. To supplement general purpose tools like Tracy, vendor-specific tools can be used.</p> <p>(TODO: add some pictures for each tool)</p>","tags":["GPU","Vulkan"]},{"location":"developers/performance/profiling-gpu-vulkan/#renderdoc","title":"RenderDoc","text":"<p>Support for RenderDoc can be enabled by configuring cmake with <code>-DIREE_ENABLE_RENDERDOC_PROFILING=ON</code>. When built in to IREE the profiling functionality is available for programmatic use via the <code>iree_hal_device_profiling_begin</code> and <code>iree_hal_device_profiling_end</code> APIs.</p> <p>When using one of the standard IREE tools (<code>iree-run-module</code>, <code>iree-benchmark-module</code>, etc) the <code>--device_profiling_mode=queue</code> flag can be passed to enable capture around the entire invocation (be careful when benchmarking as the recordings can be quite large!). The default capture file name can be specified with <code>--device_profiling_file=foo.rdc</code>.</p> <p>Capturing in the RenderDoc UI can be done by specifying the IREE tool or embedding application (<code>iree-run-module</code>, etc) as the launch executable and adding all arguments as normal.</p> <p>Capturing from the command line can be done using <code>renderdoccmd</code> with the specified file appearing (by default) in the executable directory:</p> <pre><code>renderdoccmd capture tools/iree-run-module --device_profiling_mode=queue --device_profiling_file=foo.rdc ...\nstat tools/foo.rdc\nrenderdoccmd capture tools/iree-run-module --device_profiling_mode=queue --device_profiling_file=/some/path/foo.rdc ...\nstat /some/path/foo.rdc\n</code></pre>","tags":["GPU","Vulkan"]},{"location":"developers/performance/profiling-gpu-vulkan/#android-gpus","title":"Android GPUs","text":"<p>There are multiple GPU vendors for the Android platforms, each offering their own tools. Android GPU Inspector (AGI) provides a cross-vendor solution. See the documentation for more details.</p>","tags":["GPU","Vulkan"]},{"location":"developers/performance/profiling-gpu-vulkan/#desktop-gpus","title":"Desktop GPUs","text":"<p>Vulkan supports both graphics and compute, but most tools in the Vulkan ecosystem focus on graphics. As a result, some Vulkan profiling tools expect commands to correspond to a sequence of frames presented to displays via framebuffers. This means additional steps for IREE and other Vulkan applications that solely rely on headless compute. For graphics-focused tools, we need to wrap IREE's logic inside a dummy rendering loop in order to provide the necessary markers for these tools to perform capture and analysis.</p>","tags":["GPU","Vulkan"]},{"location":"developers/performance/profiling-gpu-vulkan/#amd","title":"AMD","text":"<p>For AMD GPUs, Radeon GPU Profiler (RGP) is the tool to understand fine details of how IREE GPU performs. See the documentation for details.</p>","tags":["GPU","Vulkan"]},{"location":"developers/performance/profiling-gpu-vulkan/#nvidia","title":"NVIDIA","text":"<p>For NVIDIA GPUs, NVIDIA Nsight Graphics is the tool to understand fine details of how IREE GPU performs. See the documentation for details.</p>","tags":["GPU","Vulkan"]},{"location":"developers/performance/profiling-with-tracy/","title":"Profiling with Tracy","text":""},{"location":"developers/performance/profiling-with-tracy/#overview","title":"Overview","text":"<p>Tracy is a hybrid instrumentation and sampling profiler that IREE uses for performance analysis.</p> <p></p>"},{"location":"developers/performance/profiling-with-tracy/#instrumentation-and-sampling","title":"Instrumentation and sampling","text":"<ul> <li> <p>Instrumentation is generic code built into the program being profiled,     recording zone start and end timestamps where a developer requests them:</p> <p></p> <p>Most of IREE's runtime code is instrumented using the macros defined in iree/base/tracing.h:</p> <pre><code>void iree_sample_function() {\n  IREE_TRACE_ZONE_BEGIN(z0);\n  // All code here will be included in the zone for `iree_sample_function`.\n  IREE_TRACE_ZONE_END(z0);\n}\n</code></pre> </li> <li> <p>Sampling collects program state and information about the machine using     platform-specific APIs at a regular sampling frequency. Sampled data     includes callstacks, hardware counters, and more:</p> <p></p> <p>While recording instrumentation data requires no special setup, recording sampling data will need some configuration depending on your operating system. Refer to the \"Automated data collection\" section in the Tracy PDF manual for full details. Generally, sampling needs:</p> <ul> <li>Debug information from <code>-DCMAKE_BUILD_TYPE=RelWithDebInfo</code> or <code>Debug</code></li> <li>Privilege elevation from <code>sudo</code> on Unix or adminstrator on Windows</li> </ul> </li> </ul>"},{"location":"developers/performance/profiling-with-tracy/#remote-or-embedded-telemetry","title":"Remote or embedded telemetry","text":"<p>Tracy uses a client-server model with communication over a TCP socket:</p> <ul> <li>The \"client\" is the program being profiled.</li> <li>The \"server\" is either the Tracy profiler UI or the Tracy command-line   capture tool.</li> </ul> <pre><code>graph LR\n  tracyclient[\"Tracy Client\n  e.g. iree-run-module\"]\n  tracyserver[\"Tracy Server\"]\n  network([\"Network\"])\n\n  thread1[\"Thread 1\"] --&gt; tracyclient\n  thread2[\"Thread 2\"] --&gt; tracyclient\n  thread3[\"Thread 3\"] --&gt; tracyclient\n\n  tracyclient --&gt; network\n  network --&gt; tracyserver\n\n  tracyserver --&gt; display[\"Display\"]\n  tracyserver --&gt; storage[\"Storage\"]</code></pre> <p>This allows for remote capture, such as over SSH, as well as sharing of saved traces across machines.</p>"},{"location":"developers/performance/profiling-with-tracy/#the-tracy-manual","title":"The Tracy manual","text":"<p>The primary source of Tracy documentation, including how to build the profiler UI and CLI capture tool, is a PDF manual:</p> <p>Download tracy.pdf  View tracy.pdf in browser </p>"},{"location":"developers/performance/profiling-with-tracy/#capturing-a-trace","title":"Capturing a trace","text":"<p>You will need three things to capture a trace:</p> <ol> <li>The Tracy profiler UI or CLI capture tool</li> <li>A binary tool to trace, such as <code>iree-run-module</code>, built with tracing     support enabled</li> <li>A program to profile, e.g. a <code>.vmfb</code> file with parameters and input values</li> </ol> <p>The Tracy tools can either be downloaded from the official releases or they can be built from source by using either the upstream CMake build or IREE's downstream CMake build.</p>"},{"location":"developers/performance/profiling-with-tracy/#quickstart","title":"Quickstart","text":"<ol> <li> <p>Build <code>iree-run-module</code> (or other tools like <code>iree-benchmark-module</code>) with     tracing support:</p> <pre><code># Sampling needs debug info from the `RelWithDebInfo` or `Debug` build type.\n\ncmake -G Ninja -B ../iree-build/ -S . \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DIREE_ENABLE_RUNTIME_TRACING=ON\ncmake --build ../iree-build/ --target iree-run-module\n</code></pre> <p>For more information about building from source, follow the Getting started page.</p> Tip - Instrumented Python packages <p>The <code>iree-base-runtime</code> Python package includes prebuilt instrumented tools. Set the <code>IREE_PY_RUNTIME=tracy</code> environment variable to use them:</p> <pre><code>python -m pip install iree-base-runtime\nIREE_PY_RUNTIME=tracy iree-run-module ...\n</code></pre> <p>You should see the following message printed to stderr:</p> <p><code>-- Using Tracy runtime (IREE_PY_RUNTIME=tracy)</code></p> <p>See this section in the Python bindings documentation for more details.</p> </li> <li> <p>Compile a program to profile:</p> <pre><code># The --iree-hal-executable-debug-level=3 flag embeds source information\n# about each executable into the .vmfb file for the runtime to pass to\n# Tracy. Without this flag, source locations are included on a best-effort\n# basis, typically coming from the input .mlir or .py file.\n\niree-compile program_input.mlir \\\n  --iree-hal-target-device={target} \\\n  --iree-hal-executable-debug-level=3 \\\n  -o program.vmfb\n</code></pre> </li> <li> <p>Run the program using the instrumented <code>iree-run-module</code>:</p> <pre><code># Set the TRACY_NO_EXIT environment variable to keep short-running programs\n# from exiting before connecting.\n#\n# Some platforms need elevated permissions (root / sudo / administrator)\n# to collect sampling data using kernel facilities. If you only want to\n# collect instrumentation data or your platform does not require it, you\n# can run with more limited permissions.\n\nTRACY_NO_EXIT=1 sudo iree-run-module \\\n  --module=program.vmfb \\\n  --device={device} \\\n  --entry_function={entry} \\\n  --parameters={parameters} \\\n  --input={arg0} \\\n  --input={arg1} \\\n  ...\n</code></pre> </li> <li> <p>While the program is running, connect using the Tracy profiler UI or capture     tool:</p> Tracy profiler UITracy capture tool <p>The profiler UI lists available clients or can be set to connect to the next instrumented process:</p> <p></p> <p>The capture tool can be used programmatically and over SSH:</p> <pre><code>$ capture -o /tmp/capture.tracy\n\nConnecting to 127.0.0.1:8086...\n</code></pre> </li> <li> <p>View the captured trace once it finishes collecting events. Traces captured     by the profiler UI can also be saved to <code>.tracy</code> files for sharing and     archival.</p> </li> </ol>"},{"location":"developers/performance/profiling-with-tracy/#including-more-information-in-traces","title":"Including more information in traces","text":""},{"location":"developers/performance/profiling-with-tracy/#changing-iree_tracing_mode","title":"Changing <code>IREE_TRACING_MODE</code>","text":"<p>Set IREE's <code>IREE_TRACING_MODE</code> value (defined in iree/base/tracing.h) to adjust which tracing features are enabled. Each feature adds tracing overhead and increases the size of trace files, so adjust this setting with care.</p> <p>For example, to track memory allocations with callstacks:</p> <pre><code>cmake -G Ninja -B ../iree-build/ -S . \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DIREE_ENABLE_RUNTIME_TRACING=ON \\\n    -DIREE_TRACING_MODE=4\ncmake --build ../iree-build/ --target iree-run-module\n</code></pre> <p>The Memory window in the Tracy profiler should then show callstacks for each allocation:</p> <p></p>"},{"location":"developers/performance/profiling-with-tracy/#options-for-the-llvm-cpu-backend","title":"Options for the <code>llvm-cpu</code> backend","text":"<p>When using the <code>llvm-cpu</code> backend (<code>--iree-hal-target-device=local</code> and <code>--iree-hal-local-target-device-backends=llvm-cpu</code> with <code>--device=local-task</code> or <code>--device=local-sync</code>), these options are available:</p> <ul> <li> <p>The <code>--iree-llvmcpu-link-embedded=false</code> flag uses the \"system\" linker     (.so/.dylib/.dll) instead of the generic     \"embedded\" ELF linker, allowing Tracy to look more deeply at generated code:</p> <p></p> </li> <li> <p>The <code>IREE_PRESERVE_DYLIB_TEMP_FILES</code> environment variable can be used on     Posix platforms to ensure that Tracy can view IREE's generated native code.</p> </li> <li> <p>Ensure that <code>--iree-llvmcpu-debug-symbols=true</code> is set (it is by default).</p> </li> </ul> <p>Putting those flags and environment variables together in an example:</p> <pre><code>iree-compile program_input.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-hal-executable-debug-level=3 \\\n  --iree-llvmcpu-link-embedded=false \\\n  --iree-llvmcpu-debug-symbols=true \\\n  -o program_full_info.vmfb\n\nTRACY_NO_EXIT=1 IREE_PRESERVE_DYLIB_TEMP_FILES=1 sudo iree-run-module \\\n  --device=local-task \\\n  --module=program_full_info.vmfb \\\n  ...\n</code></pre>"},{"location":"developers/performance/profiling-with-tracy/#remote-capture-eg-ssh-android","title":"Remote capture (e.g. SSH, Android)","text":"<p>Tracy's client/server connection uses TCP port 8086 by default. If the Tracy-instrumented program is running on a separate machine, this port needs to be forwarded.</p> <p>In particular, when profiling on Android, this is needed:</p> <pre><code>adb forward tcp:8086 tcp:8086\n</code></pre> <p>You can also pass <code>-p &lt;port&gt;</code> to the capture tool to override the default port to connect to, or use the Tracy GUI which scans other ports too.</p> <p>The <code>TRACY_PORT</code> environment variable can be used to change the port used by the client application. For example, to run <code>iree-benchmark-module</code> on port 1234:</p> <pre><code>TRACY_PORT=1234 iree-benchmark-module \\\n  --device=local-task \\\n  --module=out.vmfb \\\n  ...\n</code></pre>"},{"location":"developers/performance/profiling-with-tracy/#touring-the-tracy-profiler-ui","title":"Touring the Tracy profiler UI","text":"<p>The initial view should look like this:</p> <p></p> <p>Before going further, take a second to check that your recorded profile data has all the data that it should have. Permissions issues could cause it to lack \"sampling\" or \"CPU data\" information. For example, here is what he initial view looks like when one forgot to run the profiled program as root on Desktop Linux (where running as root is required):</p> <p></p> <p>Notice how the latter screenshot is lacking the following elements:</p> <ul> <li>No 'CPU data' header in the top left, with the list of all CPU cores.</li> <li>No 'ghost' icon next to the 'Main thread' header.</li> </ul> <p>Click the 'Statistics' button at the top. It will open a window like this:</p> <p></p> <p>See how the above screenshot has two radio buttons at the top: 'Instrumentation' and 'Sampling'. At this point, if you don't see the 'Sampling' radio button, you need to resolve that first, as discussed above about possible permissions issues.</p> <p>These 'Instrumentation' and 'Sampling' statistics correspond the two kinds of data that Tracy collects about your program. In the Tracy main view, they correspond, respectively, to 'instrumentation' and 'ghost' zones. Refer to the Tracy PDF manual for a general introduction to these concepts. For each thread, the ghost icon toggles the view between these two kinds of zones.</p> <p>Back to the main view, look for the part of the timeline that is of interest to you. Your area of interest might not be on the Main thread. In fact, it might be on a thread that's not visible in the initial view at all. To pan around with the mouse, hold the right mouse button down (or its keyboard equivalent on macOS). Alternatively, look for the 'Frame' control at the top of the Tracy window. Use the 'next frame' arrow button until more interesting threads appear.</p> <p>IREE module code tends to run on a thread whose name contains the word <code>worker</code>.</p> <p>Once you have identified the thread of interest, you typically want to click its ghost icon to view its \"ghost\" (i.e. sampling) zones. Here is what you should get when clicking on a ghost zone:</p> <p></p> <p>The percentages column to the left of the disassembly shows where time is being spent. This is unique to the sampling data (ghost zones) and has no equivalent in the instrumentation data (instrumentation zones). Here is what we get clicking on the corresponding instrumentation zone:</p> <p></p> <p>This still has a 'Source' button but that only shows the last C++ caller that had explicit Tracy information, so here we see a file under <code>iree/hal</code> whereas the Ghost zone saw into the IREE compiled module that that calls into, with the source view pointing to the <code>.mlir</code> file.</p>"},{"location":"developers/performance/profiling-with-tracy/#tracing-iree-compile","title":"Tracing <code>iree-compile</code>","text":"<p>Tracing <code>iree-compile</code> is much like tracing the runtime tools, except that both of these options need to be set with CMake: <code>-DIREE_ENABLE_RUNTIME_TRACING=ON -DIREE_ENABLE_COMPILER_TRACING=ON</code>:</p> <pre><code>cmake -G Ninja -B ../iree-build/ -S . \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DIREE_ENABLE_RUNTIME_TRACING=ON \\\n    -DIREE_ENABLE_COMPILER_TRACING=ON\ncmake --build ../iree-build/ --target iree-compile\n</code></pre> <p>The steps for collecting traces are the same: run the instrumented program and connect using the Tracy profiler UI or capture tool.</p> <p></p> <ul> <li>MLIR passes are instrumented using   Pass Instrumentation,   (see   <code>TracingUtils.h</code>)</li> <li>Zones are annotated with op breadcrumbs indicating which root op was processed</li> <li>Each compilation phase (e.g. Flow, Stream, HAL) is tagged as a \"frame\", so   you can jump between them, limit statistics to them, and see how much time   each took</li> </ul> Caution - Tracy sampling with <code>iree-compile</code> <p>When tracing the compiler, the LLVM/MLIR code can easily generate millions of trace events. Traces captured with sampling can thus take hours to collect, require 40GB+ of RAM to view, and take 1GB+ on disk to store.</p> <p></p> <p>However, sampling is especially useful in diagnosing long compile times, since only the MLIR passes are instrumentated, unlike in IREE's runtime where most functions are covered.</p> <p>For more tips on profiling the compiler, see the Compile time regression debugging page.</p>"},{"location":"developers/performance/profiling-with-tracy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developers/performance/profiling-with-tracy/#resource_exhausted-failed-to-open-file-issue","title":"\"RESOURCE_EXHAUSTED; failed to open file\" issue","text":"<p>This is a known issue with how tracy operates. One way to workaround it is to manually increase the total number of files that can be kept opened simultaneously and run the command with that setting:</p> <pre><code>sudo sh -c \"ulimit -n &lt;bigNum&gt; &amp;&amp; &lt;myTracyInstrumentedProgram&gt;\"\n</code></pre> <p>Info</p> <p>Tracy keeps a number of file descriptors open that, depending on the machine and its settings, may exceed the limit allowed by the system resulting in IREE failing to open more files. In particular, it is commom to have a relatively low limit when running with <code>sudo</code>.</p>"},{"location":"developers/performance/profiling-with-tracy/#appendix","title":"Appendix","text":""},{"location":"developers/performance/profiling-with-tracy/#building-tracy-from-source","title":"Building Tracy from source","text":"<p>First, refer to the upstream build instructions at either the https://github.com/wolfpld/tracy/ repository itself or the Tracy PDF manual.</p>"},{"location":"developers/performance/profiling-with-tracy/#building-the-tracy-profiler-gui","title":"Building the tracy-profiler GUI","text":"<p>To build the profiler GUI from an IREE checkout:</p> <pre><code># Build using CMake:\ncd third_party/tracy\ncmake -B profiler/build -S profiler -DCMAKE_BUILD_TYPE=Release\ncmake --build profiler/build --parallel --config Release\n\n# Now launch the profiler:\n./profiler/build/tracy-profiler\n</code></pre>"},{"location":"developers/performance/profiling-with-tracy/#building-the-tracy-capture-cli-tool","title":"Building the tracy-capture CLI tool","text":"<p>To build <code>tracy-capture</code> from an IREE checkout:</p> <pre><code># Build using CMake:\ncd third_party/tracy\ncmake -B capture/build -S capture -DCMAKE_BUILD_TYPE=Release\ncmake --build capture/build --parallel --config Release\n\n# Run the capture tool:\n./capture/build/tracy-capture --help\n</code></pre> <p>IREE also maintains a downstream build for <code>tracy-capture</code>, renamed as <code>iree-tracy-capture</code>, that is bundled along with the <code>iree-base-runtime</code> Python package on Linux. To build this yourself, set the <code>-DIREE_BUILD_TRACY=ON</code> CMake option in your IREE CMake build or set the <code>IREE_RUNTIME_BUILD_TRACY_TOOLS=1</code> environment variable when building Python packages (see <code>runtime/setup.py</code>).</p>"},{"location":"developers/performance/profiling-with-tracy/#building-the-tracy-csvexport-tool","title":"Building the <code>tracy-csvexport</code> tool","text":"<p>To build <code>tracy-csvexport</code> from an IREE checkout:</p> <pre><code># Build using CMake:\ncd third_party/tracy\ncmake -B csvexport/build -S csvexport -DCMAKE_BUILD_TYPE=Release\ncmake --build csvexport/build --parallel --config Release\n\n# Run the csvexport tool:\n./csvexport/build/tracy-csvexport --help\n</code></pre>"},{"location":"developers/performance/profiling-with-tracy/#android-system-settings-required-for-sampling-and-systrace","title":"Android system settings required for Sampling and SysTrace","text":"<p>When profiling on an Android device, in order to get the most useful information in the trace, tweak system permissions as follows before profiling. This needs to be done again after every reboot of the Android device.</p> <p>From your desktop, get a shell on the Android device:</p> <pre><code>adb shell\n</code></pre> <p>The following commands are meant to be run from that Android device shell. First, get root access:</p> <pre><code>su\n</code></pre> <p>Now run the following commands as root on the Android device:</p> <pre><code>setenforce 0\nmount -o remount,hidepid=0 /proc\necho 0 &gt; /proc/sys/kernel/perf_event_paranoid\necho 0 &gt; /proc/sys/kernel/kptr_restrict\n</code></pre> <p>Note: in order for this to work, the device needs to be rooted, which means that the above <code>su</code> command must succeed. This is sometimes confused with the <code>adb root</code> command, but that's not the same. <code>adb root</code> restarts the <code>adbd</code> daemon as root, which causes device shells to be root shells by default. This is unnecessary here and we don't recommend it: real Android applications never run as root, so Tracy/Android has to support running benchmarks as regular user and it's best to stick to this for the sake of realistic benchmarks. Internally, Tracy executes <code>su</code> commands to perform certain actions, so it too relies on the device being rooted without relying on the benchmark process being run as root.</p>"},{"location":"developers/performance/profiling/","title":"Profiling overview","text":"<p>IREE benchmarking gives us an accurate and reproducible view of program performance at specific levels of granularity. To analyze system behavior in more depth, there are various ways to profile IREE.</p>"},{"location":"developers/performance/profiling/#cpu-cache-and-other-cpu-event-profiling","title":"CPU cache and other CPU event profiling","text":"<p>For some advanced CPU profiling needs such as querying CPU cache and other events, one may need to use some OS-specific profilers. See Profiling CPUs.</p>"},{"location":"developers/performance/profiling/#vulkan-gpu-profiling","title":"Vulkan GPU Profiling","text":"<p>Tracy offers great insights into CPU/GPU interactions and Vulkan API usage details. However, information at a finer granularity, especially inside a particular shader dispatch, is missing. To supplement general purpose tools like Tracy, vendor-specific tools can be used. Refer to Profiling GPUs using Vulkan.</p>"},{"location":"developers/performance/profiling/#tracy","title":"Tracy","text":"<p>Tracy is a profiler that's been used for a wide range of profiling tasks on IREE. Refer to Profiling with Tracy.</p>"},{"location":"guides/","title":"Guides","text":""},{"location":"guides/#ml-frameworks","title":"ML frameworks","text":"<p>Start here: ML frameworks overview</p> <p>Guides for specific frameworks:</p> <ul> <li> JAX</li> <li> ONNX</li> <li> PyTorch</li> <li> TensorFlow and    TensorFlow Lite</li> </ul>"},{"location":"guides/#deployment-configurations","title":"Deployment configurations","text":"<p>Start here: Deplyment configurations overview</p> <p>Guides for specific configurations:</p> <ul> <li> CPU for general   purpose CPU deployment</li> <li> CPU - Bare-Metal   with minimal platform dependencies</li> <li> GPU - Vulkan   for cross-platform usage and interop with graphics applications</li> <li> GPU - ROCm   for AMD-specific solutions</li> <li> GPU - CUDA   for NVIDIA-specific solutions</li> <li> GPU - Metal   for running on Apple hardware</li> </ul>"},{"location":"guides/#general-topics","title":"General topics","text":"<ul> <li> Parameters for managing   large chunks of program data</li> </ul>"},{"location":"guides/parameters/","title":"Parameters","text":""},{"location":"guides/parameters/#overview","title":"Overview","text":"<p>Parameters in IREE are externalized storage for resources that are asynchronously accessible and device-aware. Parameters offer efficient ways to store, manipulate, and load data for large resources like the weights in a machine learning model.</p> <p>Without using parameters, compiled programs include both code and data:</p> <pre><code>graph LR\n  accTitle: .vmfb file without using parameters\n  accDescr {\n    Without using parameters, .vmfb files contain host code, device code,\n    small data, and large resources all in the same file.\n  }\n\n  subgraph VMFB[\".vmfb file\"]\n    HostCode(Host code)\n    DeviceCode(Device code)\n    SmallData(Small data)\n    LargeResources(Large resources)\n  end</code></pre> <p>Using parameters, data can be stored, transmitted, and loaded from separate sources:</p> <pre><code>graph BT\n  accTitle: .vmfb file using parameters\n  accDescr {\n    Using parameters, .vmfb files contain host code, device code, small\n    constants, and parameters. External .irpa, .safetensors, and .gguf files\n    can be linked to these parameters.\n  }\n\n  subgraph VMFB[\".vmfb file using parameters\"]\n    HostCode(Host code)\n    DeviceCode(Device code)\n    SmallData(Small data)\n    Parameters(\"Parameters\n    \u2022 scope_1::key_1\n    \u2022 scope_1::key_2\n    \u2022 scope_2::key_1\n    \u2022 scope_2::key_2\")\n  end\n\n  subgraph IRPA[\".irpa file\"]\n    key_1\n    key_2\n  end\n\n  subgraph Safetensors[\".safetensors file\"]\n    key_1a[key_1]\n  end\n\n  subgraph GGUF[\".gguf file\"]\n    key_2a[key_2]\n  end\n\n  IRPA -. \"scope_1\" .-&gt; Parameters\n  Safetensors -. \"scope_2\" .-&gt; Parameters\n  GGUF -. \"scope_2\" .-&gt; Parameters</code></pre> <p>Note</p> <p>Notice that parameters are identified by a scope and a unique key within that scope, not strong references to specific file paths. Data from any supported file format or \"parameter index provider\" can be loaded.</p>"},{"location":"guides/parameters/#supported-formats","title":"Supported formats","text":""},{"location":"guides/parameters/#irpa","title":"IRPA","text":"<p>The IREE Parameter Archive (IRPA) file format (<code>iree/schemas/parameter_archive.h</code>) is IREE's own format optimized for deployment. Formats like GGUF and safetensors can be converted to IRPA.</p> <ul> <li>Data is always aligned in IRPA files for efficient loading</li> <li>IRPA files contain minimal metadata and are fully hermetic. Buffers are   stored as opaque byte range blobs, not as tensors with explicit types and   shapes</li> <li>For testing and benchmarking workflows, IRPA files may include a mix of real   data and splatted values (repeating patterns with no storage requirements on   disk)</li> </ul>"},{"location":"guides/parameters/#gguf","title":"GGUF","text":"<p>The GGUF format is used by the GGML project and other projects in that ecosystem like llama.cpp.</p> <ul> <li>GGUF files are non-hermetic - using them requires knowledge about the settings   used to compile GGML in order to interpret the contents of each file   (particularly for various quantization formats)</li> <li>GGUF files are aligned, so they should have matching performance with IRPA   files</li> </ul>"},{"location":"guides/parameters/#safetensors","title":"Safetensors","text":"<p>The safetensors format is used by the Hugging Face community.</p> <ul> <li>Safetensors files are not naturally aligned to support efficient loading, so   using them across runtime devices comes with (possibly severe) performance   penalties</li> </ul>"},{"location":"guides/parameters/#extensibility-and-other-formats","title":"Extensibility and other formats","text":"<p>The core IREE tools are written in C and aim to be simple and pragmatic, with minimal dependencies. Other formats could be converted into supported file types:</p> <ul> <li>PyTorch <code>.pt</code> and <code>.pth</code> files (serialized state dictionaries produced with   <code>torch.save</code>)</li> <li>TensorFlow checkpoint (<code>.ckpt</code>, <code>.h5</code>) files or SavedModel /   <code>model.keras</code>   archives (see the TensorFlow guide)</li> </ul> <p>In-tree formats for file-backed parameters are defined in the <code>iree/io/formats/</code> folder. Additional formats could be defined out-of-tree to make use of external libraries as needed.</p> <p>Parameter loading from memory (or a cache, or some other location) is possible by adding new providers implementing <code>iree_io_parameter_provider_t</code>. The default parameter index provider operates on files on local disk.</p>"},{"location":"guides/parameters/#working-with-parameter-files","title":"Working with parameter files","text":""},{"location":"guides/parameters/#creating-parameter-files","title":"Creating parameter files","text":"<p>The <code>iree-create-parameters</code> tool can create IREE Parameter Archive (.irpa) files. Each parameter in the archive can be created with either a real data value (taking up storage space in the final archive) or a splatted value (zeroed contents or a repeated value, taking up no storage space on disk).</p> Tip: <code>--help</code> output <p>For a detailed list of options, pass <code>--help</code>:</p> <pre><code>$ iree-create-parameters --help\n\n# ============================================================================\n# \ud83d\udc7b IREE: iree-create-parameters\n# ============================================================================\n\nCreates IREE Parameter Archive (.irpa) files. Provide zero or more\nparameter value declarations and an output file with\n`--output=file.irpa` to produce a new file with zeroed or patterned\ncontents.\n\n...\n</code></pre> <ul> <li> <p>Example creating a file with two zeroed embedded parameters and one with a   repeating pattern:</p> <pre><code>$ iree-create-parameters \\\n    --data=my.zeroed_param_1=4096xf32 \\\n    --data=my.zeroed_param_2=2x4096xi16 \\\n    --data=my.pattern_param_2=8x2xf32=2.1 \\\n    --output=output_with_storage.irpa\n</code></pre> </li> <li> <p>Example creating a file with splatted values (no storage on disk):</p> <pre><code>$ iree-create-parameters \\\n    --splat=my.splat_param_1=4096xf32=4.1 \\\n    --splat=my.splat_param_2=2x4096xi16=123 \\\n    --output=output_without_storage.irpa\n</code></pre> </li> </ul> <p>Parameter archives can also be created using IREE's Python bindings:</p> <pre><code>import iree.runtime as rt\nimport numpy as np\n\nparameter_index = rt.ParameterIndex()\nparameter_index.add_buffer(\"weight\", np.zeros([32, 16]) + 2.0)\nparameter_index.add_buffer(\"bias\", np.zeros([32, 16]) + 0.5)\nparameter_index.create_archive_file(\"parameters.irpa\")\n</code></pre> <p>See the <code>runtime/bindings/python/tests/io_test.py</code> file for more usage examples.</p>"},{"location":"guides/parameters/#converting-to-the-irpa-format","title":"Converting to the IRPA format","text":"<p>The <code>iree-convert-parameters</code> tool converts supported files into IREE Parameter Archives (.irpa) files.</p> Tip: <code>--help</code> output <p>For a detailed list of options, pass <code>--help</code>:</p> <pre><code>$ iree-convert-parameters --help\n\n# ============================================================================\n# \ud83d\udc7b IREE: iree-convert-parameters\n# ============================================================================\n\nConverts supported parameter file formats into IREE Parameter Archives\n(.irpa) files. Provide one or more input parameter files in the same\nform as expected by the iree-run-module tool (`--parameters=foo.gguf`)\nand an output file with `--output=file.irpa`.\n\n...\n</code></pre> <ul> <li> <p>Example converting from safetensors to IRPA:</p> <pre><code>$ iree-convert-parameters \\\n    --parameters=input.safetensors \\\n    --output=output.irpa\n</code></pre> </li> <li> <p>Example mutating parameters:</p> <pre><code>$ iree-convert-parameters \\\n    --parameters=a.gguf \\\n    --parameters=b.safetensors \\\n    --exclude=unneeded_param \\\n    --rename=old_name=new_name \\\n    --splat=some_name=f32=4.2 \\\n    --output=ab.irpa\n</code></pre> </li> <li> <p>Example stripping parameters and replacing them with zeros except for one   with special handling:</p> <pre><code>$ iree-convert-parameters \\\n    --parameters=input.irpa \\\n    --strip \\\n    --splat=special_param=f32=1.0 \\\n    --output=output.irpa\n</code></pre> </li> </ul>"},{"location":"guides/parameters/#inspecting-parameter-files","title":"Inspecting parameter files","text":"<p>The <code>iree-dump-parameters</code> tool outputs information about parsed parameter files.</p> Tip: <code>--help</code> output <p>For a detailed list of options, pass <code>--help</code>:</p> <pre><code>$ iree-dump-parameters --help\n\n# ============================================================================\n# \ud83d\udc7b IREE: iree-dump-parameters\n# ============================================================================\n\nDumps information about parsed parameter files.\n\n...\n</code></pre> <ul> <li> <p>Example listing all available parameters and their index information:</p> <pre><code>$ iree-dump-parameters \\\n    --parameters=my_scope=my_file.gguf \\\n    [--parameters=...]\n</code></pre> </li> <li> <p>Example extracting parameter binary contents from a file:</p> <pre><code>$ iree-dump-parameters ... \\\n    --extract=scope::key0=file0.bin \\\n    [--extract=...]\n</code></pre> </li> </ul>"},{"location":"guides/parameters/#loading-parameters-from-files","title":"Loading parameters from files","text":""},{"location":"guides/parameters/#on-the-command-line","title":"On the command line","text":"<p>IREE command line tooling can load parameter files alongside module files:</p> <pre><code>iree-run-module --module=program.vmfb --parameters=data.irpa ...\n</code></pre> <p>For concrete examples, see these test files:</p> <ul> <li><code>tools/test/parameters_scoped.mlir</code></li> <li><code>tools/test/parameters_unscoped.mlir</code></li> </ul>"},{"location":"guides/parameters/#from-python","title":"From Python","text":"<p>See the <code>runtime/bindings/python/tests/io_runtime_test.py</code> file for usage examples.</p>"},{"location":"guides/parameters/#using-the-c-api","title":"Using the C API","text":"<p>TODO: <code>iree_io_parameters_module_create()</code> sample code</p>"},{"location":"guides/deployment-configurations/","title":"Deployment configurations","text":"<p>IREE provides a flexible set of tools for various deployment scenarios. Fully featured environments can use IREE to load programs on demand and to take advantage of multi-threaded hardware, while embedded systems can bypass IREE's runtime entirely or interface with custom accelerators.</p>"},{"location":"guides/deployment-configurations/#stable-configurations","title":"Stable configurations","text":"<ul> <li> CPU for general   purpose CPU deployment</li> <li> CPU - Bare-Metal   with minimal platform dependencies</li> <li> GPU - Vulkan   for cross-platform usage and interop with graphics applications</li> <li> GPU - ROCm   for AMD-specific solutions</li> <li> GPU - CUDA   for NVIDIA-specific solutions</li> <li> GPU - Metal   for running on Apple hardware</li> </ul> <p>These are just the most stable configurations IREE supports. Feel free to reach out on any of IREE's communication channels if you have questions about a specific platform, hardware accelerator, or set of system features.</p>"},{"location":"guides/deployment-configurations/#compiler-target-backends","title":"Compiler target backends","text":"<p>Compiler target backends are used to generate executable code for hardware APIs and device architectures. Compiler targets may implement special optimizations or generate distinct code for certain device/architecture/performance profiles.</p> <p>When compiling programs, a list of target backends must be specified via</p> <ul> <li><code>--iree-hal-target-backends=</code> (command-line)</li> <li><code>target_backends=[...]</code> (Python)</li> </ul> Target backend Description Compatible HAL devices <code>llvm-cpu</code> Code generation for CPU-like devices supported by LLVM <code>local-sync</code>, <code>local-task</code> <code>vmvx</code> Portable interpreter powered by a microkernel library <code>local-sync</code>, <code>local-task</code> <code>vulkan-spirv</code> Portable GPU support via SPIR-V for Vulkan <code>vulkan</code> <code>rocm</code> AMD GPU support via HSACO for HIP <code>hip</code> <code>cuda</code> NVIDIA GPU support via PTX for CUDA <code>cuda</code> <code>metal-spirv</code> GPU support on Apple platforms via MSL for Metal <code>metal</code> <code>webgpu-spirv</code> Experimental  GPU support on the Web via WGSL for WebGPU <code>webgpu</code>"},{"location":"guides/deployment-configurations/#listing-available-backends","title":"Listing available backends","text":"<p>The list of compiler target backends can be queried:</p> Command-linePython bindings <pre><code>$ iree-compile --iree-hal-list-target-backends\n\nRegistered target backends:\n    cuda\n    llvm-cpu\n    metal-spirv\n    rocm\n    vmvx\n    vmvx-inline\n    vulkan-spirv\n</code></pre> <pre><code>import iree.compiler as ireec\n\nireec.query_available_targets()\n# ['cuda', 'llvm-cpu', 'metal-spirv', 'rocm', 'vmvx', 'vmvx-inline', 'vulkan-spirv']\n</code></pre>"},{"location":"guides/deployment-configurations/#runtime-hal-drivers-and-devices","title":"Runtime HAL drivers and devices","text":"<p>Runtime HAL drivers can be used to enumerate and create HAL devices.</p> <p>Runtime HAL devices call into hardware APIs to load and run executable code. Devices may use multithreading or other system resources, depending on their focus and the build configuration.</p> HAL device Description <code>local-sync</code> Synchronous local CPU device with inline execution <code>local-task</code> Multithreaded local CPU device using a 'task' executor <code>vulkan</code> Portable GPU execution using the Vulkan API <code>hip</code> AMD GPU execution using HIP <code>cuda</code> NVIDIA GPU execution using CUDA <code>metal</code> GPU execution on Apple platforms using Metal <code>webgpu</code> Experimental  GPU execution on the web using WebGPU <p>Tip - External HAL drivers</p> <p>Additional HAL drivers can also be defined out of tree via the <code>IREE_EXTERNAL_HAL_DRIVERS</code> CMake option.</p>"},{"location":"guides/deployment-configurations/#listing-available-drivers-and-devices","title":"Listing available drivers and devices","text":"<p>The list of runtime HAL drivers and devices can be queried:</p> Command-linePython bindings <p>List drivers:</p> <pre><code>$ iree-run-module --list_drivers\n\n# ============================================================================\n# Available HAL drivers\n# ============================================================================\n# Use --list_devices={driver name} to enumerate available devices.\n\n        cuda: NVIDIA CUDA HAL driver (via dylib)\n         hip: HIP HAL driver (via dylib)\n  local-sync: Local execution using a lightweight inline synchronous queue\n  local-task: Local execution using the IREE multithreading task system\n      vulkan: Vulkan 1.x (dynamic)\n</code></pre> <p>List devices:</p> <pre><code>$ iree-run-module --list_devices\n\nhip://GPU-00000000-1111-2222-3333-444444444444\nlocal-sync://\nlocal-task://\nvulkan://00000000-1111-2222-3333-444444444444\n</code></pre> <p>Dump information about devices:</p> <pre><code>$ iree-run-module --dump_devices\n\n# ============================================================================\n# Enumerated devices for driver 'cuda'\n# ============================================================================\n\n\n# ============================================================================\n# Enumerated devices for driver 'hip'\n# ============================================================================\n\n# ===----------------------------------------------------------------------===\n# --device=hip://GPU-00000000-1111-2222-3333-444444444444\n#   AMD Radeon PRO W7900 Dual Slot\n# ===----------------------------------------------------------------------===\n\n- amdhip64_dylib_path: /opt/rocm-6.1.3/lib/libamdhip64.so\n- gpu-compute-capability: 11.0\n- gpu-arch-name: gfx1100\n\n- launch-max-block-dims: (1024, 1024, 1024)\n\n- block-max-thread-count: 1024\n- block-max-32-bit-register-count: 65536\n- block-max-shared-memory: 64 KB\n\n- memory-is-integrated-memory: 0\n- memory-supports-managed-memory: 1\n- memory-total-const-memory-size: 2047 MB\n- memory-total-global-memory-size: 46064 MB\n- memory-l2-cache-size: 6291456 bytes\n\n- gpu-compute-unit-count: 48\n- gpu-compute-max-clock-rate: 1760 mHz\n- gpu-memory-max-clock-rate: 1124 mHz\n- gpu-warp-size: 32\n# ============================================================================\n# Enumerated devices for driver 'local-sync'\n# ============================================================================\n\n# ===----------------------------------------------------------------------===\n# --device=local-sync://\n#   default\n# ===----------------------------------------------------------------------===\n\n# ============================================================================\n# Enumerated devices for driver 'local-task'\n# ============================================================================\n\n# ===----------------------------------------------------------------------===\n# --device=local-task://\n#   default\n# ===----------------------------------------------------------------------===\n\n# ============================================================================\n# Enumerated devices for driver 'vulkan'\n# ============================================================================\n\n# ===----------------------------------------------------------------------===\n# --device=vulkan://00000000-1111-2222-3333-444444444444\n#   AMD Radeon PRO W7900 Dual Slot  (RADV GFX1100)\n# ===----------------------------------------------------------------------===\n</code></pre> <p>List drivers:</p> <pre><code>import iree.runtime as ireert\n\nireert.system_setup.query_available_drivers()\n# ['cuda', 'hip', 'local-sync', 'local-task', 'vulkan']\n</code></pre> <p>List devices:</p> <pre><code>import iree.runtime as ireert\n\nfor driver_name in ireert.system_setup.query_available_drivers():\n    print(driver_name)\n    try:\n        driver = ireert.get_driver(driver_name)\n        device_infos = driver.query_available_devices()\n        for device_info in device_infos:\n            print(f\"  {device_info}\")\n    except:\n        print(f\"  (failed to initialize)\")\n\n# cuda\n#   (failed to initialize)\n# hip\n#   {'device_id': 1, 'path': 'GPU-00000000-1111-2222-3333-444444444444', 'name': 'AMD Radeon ...'}\n# local-sync\n#   {'device_id': 0, 'path': '', 'name': 'default'}\n# local-task\n#   {'device_id': 0, 'path': '', 'name': 'default'}\n# vulkan\n#   {'device_id': 1234, 'path': '00000000-1111-2222-3333-444444444444', 'name': 'AMD Radeon ...'}\n</code></pre>"},{"location":"guides/deployment-configurations/bare-metal/","title":"Running on a bare-metal platform","text":"<p>IREE supports model execution via CPU on bare-metal platforms. Bare metal platforms have no operating system support, and executables are built using machine-specific linker scripts and/or board support packages (BSPs).</p> <p>Bare-metal deployment typically uses IREE's LLVM compiler target backend much like the CPU configuration, but using a limited subset of IREE's CPU HAL driver code at runtime to load and execute compiled programs.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/bare-metal/#prerequisites","title":"Prerequisites","text":"<p>Out-of-tree bare-metal platform tools and source code for the system should be ready, such as</p> <ul> <li>Compilation toolchain</li> <li>Platform linker script</li> <li>Firmware libraries</li> </ul> <p>Please follow the instructions to retrieve the IREE compiler.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/bare-metal/#compile-the-model-for-bare-metal","title":"Compile the model for bare-metal","text":"<p>The model can be compiled with the following command:</p> <pre><code>iree-compile \\\n    --iree-stream-partitioning-favor=min-peak-memory \\\n    --iree-hal-target-device=local \\\n    --iree-hal-local-target-device-backends=llvm-cpu \\\n    --iree-llvmcpu-target-triple=x86_64-pc-linux-elf \\\n    --iree-llvmcpu-debug-symbols=false \\\n    samples/models/simple_abs.mlir \\\n    -o /tmp/simple_abs_cpu.vmfb\n</code></pre> <p>In which</p> <ul> <li><code>--iree-stream-partitioning-favor=min-peak-memory</code>: Optimize for minimum peak     memory usage at the cost of concurrency - include when targeting     single-threaded execution to reduce memory consumption.</li> <li><code>--iree-hal-target-device=local</code>: Compile to run on the local executor.</li> <li><code>--iree-hal-local-target-device-backends=llvm-cpu</code>: Compile using the LLVM CPU     target.</li> <li><code>--iree-llvmcpu-target-triple</code>: Use the <code>&lt;arch&gt;-pc-linux-elf</code> LLVM target triple     so the artifact has a fixed ABI to be rendered by the     elf_module library.</li> <li><code>--iree-llvmcpu-debug-symbols=false</code>: To reduce the artifact size.</li> </ul> <p>See generate.sh for example command-line instructions of some common architectures.</p> <p>You can replace the MLIR file with the other MLIR model files, following the instructions.</p> Tip - Compiler Optimizations <p>Use <code>--iree-opt-level=[O0,O1,O2,O3]</code> to enable additional compiler optimizations. The default value of <code>O0</code> enables only minimal optimizations while higher levels enable progressively more aggressive optimizations. See Optimization Options for more details.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/bare-metal/#compiling-the-bare-metal-model-for-static-library-support","title":"Compiling the bare-metal model for static-library support","text":"<p>See the static_library demo sample for an example and instructions on running a model with IREE's <code>static_library_loader</code>.</p> <p>By default, the demo targets the host machine when compiling. To produce a bare-metal compatible model, run <code>iree-compile</code> as in the previous example and add the additional <code>-iree-llvmcpu-static-library-output-path=</code> flag to specify the static library destination. This will produce a <code>.h\\.o</code> file to link directly into the target application.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/bare-metal/#build-bare-metal-runtime-from-source","title":"Build bare-metal runtime from source","text":"<p>A few CMake options and macros should be set to build a subset of IREE runtime libraries compatible with the bare-metal platform. We assume there's no multi-thread control nor system library support in the bare-metal system. The model execution is in a single-thread synchronous fashion.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/bare-metal/#set-cmake-options","title":"Set CMake options","text":"<pre><code># Build the IREE runtime only\nset(IREE_BUILD_COMPILER OFF)\n\n# Tell CMake to skip targeting a specific operating system\nset(CMAKE_SYSTEM_NAME Generic)\n\n# Disable multi-thread library support\nset(IREE_ENABLE_THREADING OFF)\n\n# Only enable the local synchronous HAL driver\nset(IREE_HAL_DRIVER_DEFAULTS OFF)\nset(IREE_HAL_DRIVER_LOCAL_SYNC ON)\n\n# Only enable some executable loaders\nset(IREE_HAL_EXECUTABLE_LOADER_DEFAULTS OFF)\nset(IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF ON)\nset(IREE_HAL_EXECUTABLE_LOADER_VMVX_MODULE ON)\n\n# Only enable the embedded ELF executable plugin\nset(IREE_HAL_EXECUTABLE_PLUGIN_DEFAULTS OFF)\nset(IREE_HAL_EXECUTABLE_PLUGIN_EMBEDDED_ELF ON)\n\n# Disable tests until IREE supports running them on bare-metal platforms\nset(IREE_BUILD_TESTS OFF)\n\n# Build samples\nset(IREE_BUILD_SAMPLES ON)\n</code></pre> <p>Todo</p> <p>Clean the list up after #6353 is fixed.</p> <p>Also, set the toolchain-specific cmake file to match the tool path, target architecture, target abi, linker script, system library path, etc.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/bare-metal/#define-iree-macros","title":"Define IREE macros","text":"<p>These macros should be defined, either in C/C++ or via CMake options like</p> <pre><code>set(MY_FLAGS \"-DIREE_PLATFORM_GENERIC=1\")\nset(CMAKE_C_FLAGS ${MY_FLAGS} ${CMAKE_C_FLAGS})\nset(CMAKE_CXX_FLAGS ${MY_FLAGS} ${CMAKE_CXX_FLAGS})\n</code></pre> Macro Description <code>IREE_PLATFORM_GENERIC</code> Let IREE build the runtime library without targeting a specific platform. <code>IREE_SYNCHRONIZATION_DISABLE_UNSAFE=1</code> Disable thread synchronization support.Must only be used if there's a single thread. <code>IREE_FILE_IO_ENABLE=0</code> Disable file I/O. <code>IREE_TIME_NOW_FN</code> A function to return the system time. For the bare-metal systems, it can be set as <code>IREE_TIME_NOW_FN=\\\"\\{ return 0;\\}\\\"</code> as there's no asynchronous wait handling. <code>IREE_WAIT_UNTIL_FN</code> A function to wait until the given time in nanoseconds. Must match the signature <code>bool(uint64_t nanos)</code> and return false if the wait failed. <p>Examples of how to setup the CMakeLists.txt and .cmake file:</p> <ul> <li>IREE RISC-V toolchain cmake</li> <li>IREE Bare-Metal Arm Sample</li> <li>IREE Bare-Metal RV32 Sample</li> </ul>","tags":["CPU"]},{"location":"guides/deployment-configurations/bare-metal/#bare-metal-execution-example","title":"Bare-metal execution example","text":"<p>See simple_embedding for generic platform to see how to use the IREE runtime library to build/run the IREE model for the bare-metal target.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/","title":"CPU deployment","text":"<p>IREE supports efficient program execution on CPU devices by using LLVM to compile all dense computations in each program into highly optimized CPU native instruction streams, which are embedded in one of IREE's deployable formats.</p> <p>To compile a program for CPU execution:</p> <ol> <li> <p>Pick a CPU target supported by LLVM. By default, IREE includes these LLVM    targets:</p> <ul> <li>X86</li> <li>ARM</li> <li>AArch64</li> <li>RISCV</li> </ul> <p>Other targets may work, but in-tree test coverage and performance work is focused on that list.</p> </li> <li> <p>Pick one of IREE's supported executable formats:</p> Executable Format Description Embedded ELF (Default) Portable, high performance dynamic library System library Platform-specific dynamic library (.so, .dll, etc.) VMVX Reference target </li> </ol> <p>At runtime, CPU executables can be loaded using one of IREE's CPU HAL devices:</p> <ul> <li><code>local-task</code>: asynchronous, multithreaded device built on IREE's \"task\"    system</li> <li><code>local-sync</code>: synchronous, single-threaded devices that executes work inline</li> </ul>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#prerequisites","title":"Prerequisites","text":"","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#get-the-iree-compiler","title":"Get the IREE compiler","text":"","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#download-the-compiler-from-a-release","title":"Download the compiler from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-compiler</code> package includes the compiler tools:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-compiler\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-compiler\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre> <p>Tip</p> <p><code>iree-compile</code> and other tools are installed to your python module installation path. If you pip install with the user mode, it is under <code>${HOME}/.local/bin</code>, or <code>%APPDATA%\\Python</code> on Windows. You may want to include the path in your system's <code>PATH</code> environment variable:</p> <pre><code>export PATH=${HOME}/.local/bin:${PATH}\n</code></pre>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#build-the-compiler-from-source","title":"Build the compiler from source","text":"<p>Please make sure you have followed the Getting started page to build IREE for your host platform. The <code>llvm-cpu</code> compiler backend is compiled in by default on all platforms, though you should ensure that the <code>IREE_TARGET_BACKEND_LLVM_CPU</code> CMake option is <code>ON</code> when configuring.</p> <p>Tip</p> <p><code>iree-compile</code> will be built under the <code>iree-build/tools/</code> directory. You may want to include this path in your system's <code>PATH</code> environment variable.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#get-the-iree-runtime","title":"Get the IREE runtime","text":"<p>You will need to get an IREE runtime that supports the local CPU HAL driver, along with the appropriate executable loaders for your application.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#download-the-runtime-from-a-release","title":"Download the runtime from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-runtime</code> package includes the local CPU HAL drivers:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-runtime\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-runtime\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#build-the-runtime-from-source","title":"Build the runtime from source","text":"<p>Please make sure you have followed one of the Building from source pages to build IREE for your target platform. The local CPU HAL drivers and devices are compiled in by default on all platforms, though you should ensure that the <code>IREE_HAL_DRIVER_LOCAL_TASK</code> and <code>IREE_HAL_EXECUTABLE_LOADER_EMBEDDED_ELF</code> (or other executable loader) CMake options are <code>ON</code> when configuring.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#check-for-cpu-devices","title":"Check for CPU devices","text":"<p>You can check for CPU support by looking for the <code>local-sync</code> and <code>local-task</code> drivers and devices:</p> <pre><code>$ iree-run-module --list_drivers\n\n# ============================================================================\n# Available HAL drivers\n# ============================================================================\n# Use --list_devices={driver name} to enumerate available devices.\n\n        cuda: NVIDIA CUDA HAL driver (via dylib)\n         hip: HIP HAL driver (via dylib)\n  local-sync: Local execution using a lightweight inline synchronous queue\n  local-task: Local execution using the IREE multithreading task system\n      vulkan: Vulkan 1.x (dynamic)\n</code></pre> <pre><code>$ iree-run-module --list_devices\n\nhip://GPU-00000000-1111-2222-3333-444444444444\nlocal-sync://\nlocal-task://\nvulkan://00000000-1111-2222-3333-444444444444\n</code></pre>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#compile-and-run-a-program","title":"Compile and run a program","text":"<p>With the requirements out of the way, we can now compile a model and run it.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#compile-a-program","title":"Compile a program","text":"<p>The IREE compiler transforms a model into its final deployable format in several sequential steps. A model authored with Python in an ML framework should use the corresponding framework's import tool to convert into a format (i.e., MLIR) expected by the IREE compiler first.</p> <p>Using a MobileNet model as an example, import using IREE's ONNX importer:</p> <pre><code># Download the model you want to compile and run.\nwget https://github.com/onnx/models/raw/refs/heads/main/validated/vision/classification/mobilenet/model/mobilenetv2-10.onnx\n\n# Import to MLIR using IREE's ONNX importer.\npip install iree-base-compiler[onnx]\niree-import-onnx mobilenetv2-10.onnx --opset-version 17 -o mobilenetv2.mlir\n</code></pre> <p>Then run the following command to compile with the <code>local</code> device and <code>llvm-cpu</code> target compilation backend:</p> <pre><code>iree-compile \\\n    --iree-hal-target-device=local \\\n    --iree-hal-local-target-device-backends=llvm-cpu \\\n    --iree-llvmcpu-target-cpu=host \\\n    mobilenetv2.mlir -o mobilenet_cpu.vmfb\n</code></pre> Tip - Target CPUs and CPU features <p>By default, the compiler will use a generic CPU target which will result in poor performance. A target CPU or target CPU feature set should be selected using one of these options:</p> <ul> <li><code>--iree-llvmcpu-target-cpu=...</code></li> <li><code>--iree-llvmcpu-target-cpu-features=...</code></li> </ul> <p>When not cross compiling, passing <code>--iree-llvmcpu-target-cpu=host</code> is usually sufficient on most devices.</p> Tip - Compiler Optimizations <p>Use <code>--iree-opt-level=[O0,O1,O2,O3]</code> to enable additional compiler optimizations. The default value of <code>O0</code> enables only minimal optimizations while higher levels enable progressively more aggressive optimizations. See Optimization Options for more details.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#choosing-cpu-targets","title":"Choosing CPU targets","text":"<p>The <code>--iree-llvmcpu-target-triple</code> flag tells the compiler to generate code for a specific type of CPU. You can see the list of supported targets with <code>iree-compile --iree-llvmcpu-list-targets</code>, or use the default value of \"host\" to let LLVM infer the triple from your host machine (e.g. <code>x86_64-linux-gnu</code>).</p> <pre><code>$ iree-compile --iree-llvmcpu-list-targets\n\n  Registered Targets:\n    aarch64    - AArch64 (little endian)\n    aarch64_32 - AArch64 (little endian ILP32)\n    aarch64_be - AArch64 (big endian)\n    arm        - ARM\n    arm64      - ARM64 (little endian)\n    arm64_32   - ARM64 (little endian ILP32)\n    armeb      - ARM (big endian)\n    riscv32    - 32-bit RISC-V\n    riscv64    - 64-bit RISC-V\n    wasm32     - WebAssembly 32-bit\n    wasm64     - WebAssembly 64-bit\n    x86        - 32-bit X86: Pentium-Pro and above\n    x86-64     - 64-bit X86: EM64T and AMD64\n</code></pre>","tags":["CPU"]},{"location":"guides/deployment-configurations/cpu/#run-a-compiled-program","title":"Run a compiled program","text":"<p>To run the compiled program:</p> <pre><code>iree-run-module \\\n    --device=local-task \\\n    --module=mobilenet_cpu.vmfb \\\n    --function=torch-jit-export \\\n    --input=\"1x3x224x224xf32=0\"\n</code></pre> <p>The above assumes the exported function in the model is named <code>torch-jit-export</code> and it expects one 224x224 RGB image. We are feeding in an image with all 0 values here for brevity, see <code>iree-run-module --help</code> for the format to specify concrete values.</p>","tags":["CPU"]},{"location":"guides/deployment-configurations/gpu-cuda/","title":"GPU deployment using CUDA","text":"<p>IREE can accelerate model execution on Nvidia GPUs using CUDA.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#prerequisites","title":"Prerequisites","text":"<p>In order to use CUDA to drive the GPU, you need to have a functional CUDA environment. It can be verified by the following steps:</p> <pre><code>nvidia-smi | grep CUDA\n</code></pre> <p>If <code>nvidia-smi</code> does not exist, you will need to install the latest CUDA Toolkit SDK.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#get-the-iree-compiler","title":"Get the IREE compiler","text":"","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#download-the-compiler-from-a-release","title":"Download the compiler from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-compiler</code> package includes the CUDA compiler:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-compiler\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-compiler\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre> <p>Tip</p> <p><code>iree-compile</code> and other tools are installed to your python module installation path. If you pip install with the user mode, it is under <code>${HOME}/.local/bin</code>, or <code>%APPDATA%\\Python</code> on Windows. You may want to include the path in your system's <code>PATH</code> environment variable:</p> <pre><code>export PATH=${HOME}/.local/bin:${PATH}\n</code></pre>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#build-the-compiler-from-source","title":"Build the compiler from source","text":"<p>Please make sure you have followed the Getting started page to build the IREE compiler, then enable the CUDA compiler target with the <code>IREE_TARGET_BACKEND_CUDA</code> option.</p> <p>Tip</p> <p><code>iree-compile</code> will be built under the <code>iree-build/tools/</code> directory. You may want to include this path in your system's <code>PATH</code> environment variable.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#get-the-iree-runtime","title":"Get the IREE runtime","text":"<p>Next you will need to get an IREE runtime that includes the CUDA HAL driver.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#download-the-runtime-from-a-release","title":"Download the runtime from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-runtime</code> package includes the CUDA HAL driver:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-runtime\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-runtime\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#build-the-runtime-from-source","title":"Build the runtime from source","text":"<p>Please make sure you have followed the Getting started page to build IREE from source, then enable the CUDA HAL driver with the <code>IREE_HAL_DRIVER_CUDA</code> option.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#check-for-cuda-devices","title":"Check for CUDA devices","text":"<p>You can check for CUDA support by looking for a matching driver and device:</p> <pre><code>$ iree-run-module --list_drivers\n\n# ============================================================================\n# Available HAL drivers\n# ============================================================================\n# Use --list_devices={driver name} to enumerate available devices.\n\n        cuda: NVIDIA CUDA HAL driver (via dylib)\n         hip: HIP HAL driver (via dylib)\n  local-sync: Local execution using a lightweight inline synchronous queue\n  local-task: Local execution using the IREE multithreading task system\n      vulkan: Vulkan 1.x (dynamic)\n</code></pre> <pre><code>$ iree-run-module --list_devices\n\ncuda://GPU-00000000-1111-2222-3333-444444444444\nlocal-sync://\nlocal-task://\nvulkan://00000000-1111-2222-3333-444444444444\n</code></pre>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#compile-and-run-a-program","title":"Compile and run a program","text":"<p>With the requirements out of the way, we can now compile a model and run it.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#compile-a-program","title":"Compile a program","text":"<p>The IREE compiler transforms a model into its final deployable format in several sequential steps. A model authored with Python in an ML framework should use the corresponding framework's import tool to convert into a format (i.e., MLIR) expected by the IREE compiler first.</p> <p>Using a MobileNet model as an example, import using IREE's ONNX importer:</p> <pre><code># Download the model you want to compile and run.\nwget https://github.com/onnx/models/raw/refs/heads/main/validated/vision/classification/mobilenet/model/mobilenetv2-10.onnx\n\n# Import to MLIR using IREE's ONNX importer.\npip install iree-base-compiler[onnx]\niree-import-onnx mobilenetv2-10.onnx --opset-version 17 -o mobilenetv2.mlir\n</code></pre> <p>Then run the following command to compile with the <code>cuda</code> target:</p> <pre><code>iree-compile \\\n    --iree-hal-target-device=cuda \\\n    --iree-cuda-target=&lt;...&gt; \\\n    mobilenetv2.mlir -o mobilenet_cuda.vmfb\n</code></pre> Tip - Compiler Optimizations <p>Use <code>--iree-opt-level=[O0,O1,O2,O3]</code> to enable additional compiler optimizations. The default value of <code>O0</code> enables only minimal optimizations while higher levels enable progressively more aggressive optimizations. See Optimization Options for more details.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#choosing-cuda-targets","title":"Choosing CUDA targets","text":"<p>Canonically a CUDA target (<code>iree-cuda-target</code>) matching the LLVM NVPTX backend of the form <code>sm_&lt;arch_number&gt;</code> is needed to compile towards each GPU architecture. If no architecture is specified then we will default to <code>sm_60</code>.</p> <p>Here is a table of commonly used architectures:</p> CUDA GPU Target Architecture Architecture Code Name NVIDIA P100 <code>sm_60</code> <code>pascal</code> NVIDIA V100 <code>sm_70</code> <code>volta</code> NVIDIA A100 <code>sm_80</code> <code>ampere</code> NVIDIA H100 <code>sm_90</code> <code>hopper</code> NVIDIA RTX20 series <code>sm_75</code> <code>turing</code> NVIDIA RTX30 series <code>sm_86</code> <code>ampere</code> NVIDIA RTX40 series <code>sm_89</code> <code>ada</code> <p>In addition to the canonical <code>sm_&lt;arch_number&gt;</code> scheme, <code>iree-cuda-target</code> also supports two additonal schemes to make a better developer experience:</p> <ul> <li>Architecture code names like <code>volta</code> or <code>ampere</code></li> <li>GPU product names like <code>a100</code> or <code>rtx3090</code></li> </ul> <p>These two schemes are translated into the canonical form under the hood. We add support for common code/product names without aiming to be exhaustive. If the ones you want are missing, please use the canonical form.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-cuda/#run-a-compiled-program","title":"Run a compiled program","text":"<p>To run the compiled program:</p> <pre><code>iree-run-module \\\n    --device=cuda \\\n    --module=mobilenet_cuda.vmfb \\\n    --function=torch-jit-export \\\n    --input=\"1x3x224x224xf32=0\"\n</code></pre> <p>The above assumes the exported function in the model is named <code>torch-jit-export</code> and it expects one 224x224 RGB image. We are feeding in an image with all 0 values here for brevity, see <code>iree-run-module --help</code> for the format to specify concrete values.</p>","tags":["GPU","CUDA"]},{"location":"guides/deployment-configurations/gpu-metal/","title":"GPU deployment using Metal","text":"<p>Documentation coming soon!</p>","tags":["GPU","iOS"]},{"location":"guides/deployment-configurations/gpu-rocm/","title":"GPU deployment using ROCm","text":"<p>IREE can accelerate model execution on AMD GPUs using ROCm.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#prerequisites","title":"Prerequisites","text":"<p>In order to use ROCm to drive the GPU, you need to have a functional ROCm environment. It can be verified by the following steps:</p>  Linux Windows <p>Linux users can run the ROCmInfo tool:</p> <pre><code>$ rocminfo\n\nROCk module is loaded\n=====================\nHSA System Attributes\n=====================\nRuntime Version:         1.13\nRuntime Ext Version:     1.4\n\n...\n</code></pre> <p>If <code>rocminfo</code> does not exist, you will need to install the latest ROCm for Linux.</p> <p>Tip</p> <p>The <code>rocm-smi</code> tool and the more recent <code>amd-smi</code> tool can also show information about your ROCm installation.</p> <p>Windows users can run <code>hipInfo.exe</code> to check their environment:</p> <pre><code>$ hipInfo.exe\n\n--------------------------------------------------------------------------------\ndevice#                           0\nName:                             AMD Radeon PRO W7900 Dual Slot\npciBusID:                         35\npciDeviceID:                      0\npciDomainID:                      0\nmultiProcessorCount:              48\n\n...\n</code></pre> <p>If <code>hipInfo.exe</code> does not exist, you will need to install the latest HIP SDK for Windows.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#get-the-iree-compiler","title":"Get the IREE compiler","text":"","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#download-the-compiler-from-a-release","title":"Download the compiler from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-compiler</code> package includes the ROCm compiler:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-compiler\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-compiler\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre> <p>Tip</p> <p><code>iree-compile</code> and other tools are installed to your python module installation path. If you pip install with the user mode, it is under <code>${HOME}/.local/bin</code>, or <code>%APPDATA%\\Python</code> on Windows. You may want to include the path in your system's <code>PATH</code> environment variable:</p> <pre><code>export PATH=${HOME}/.local/bin:${PATH}\n</code></pre>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#build-the-compiler-from-source","title":"Build the compiler from source","text":"<p>Please make sure you have followed the Getting started page to build the IREE compiler, then enable the ROCm compiler target with the <code>IREE_TARGET_BACKEND_ROCM</code> option.</p> <p>Tip</p> <p><code>iree-compile</code> will be built under the <code>iree-build/tools/</code> directory. You may want to include this path in your system's <code>PATH</code> environment variable.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#get-the-iree-runtime","title":"Get the IREE runtime","text":"<p>Next you will need to get an IREE runtime that includes the HIP HAL driver.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#download-the-runtime-from-a-release","title":"Download the runtime from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-runtime</code> package includes the HIP HAL driver:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-runtime\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-runtime\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#build-the-runtime-from-source","title":"Build the runtime from source","text":"<p>Please make sure you have followed the Getting started page to build IREE from source, then enable the HIP HAL driver with the <code>IREE_HAL_DRIVER_HIP</code> option.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#check-for-hip-devices","title":"Check for HIP devices","text":"<p>You can check for HIP support by looking for a matching driver and device:</p> <pre><code>$ iree-run-module --list_drivers\n\n# ============================================================================\n# Available HAL drivers\n# ============================================================================\n# Use --list_devices={driver name} to enumerate available devices.\n\n        cuda: NVIDIA CUDA HAL driver (via dylib)\n         hip: HIP HAL driver (via dylib)\n  local-sync: Local execution using a lightweight inline synchronous queue\n  local-task: Local execution using the IREE multithreading task system\n      vulkan: Vulkan 1.x (dynamic)\n</code></pre> <pre><code>$ iree-run-module --list_devices\n\nhip://GPU-00000000-1111-2222-3333-444444444444\nlocal-sync://\nlocal-task://\nvulkan://00000000-1111-2222-3333-444444444444\n</code></pre> <p>To see device details, including the architecture to use as a HIP target when compiling a program:</p> <pre><code>$ iree-run-module --dump_devices\n\n...\n# ============================================================================\n# Enumerated devices for driver 'hip'\n# ============================================================================\n\n# ===----------------------------------------------------------------------===\n# --device=hip://GPU-00000000-1111-2222-3333-444444444444\n#   AMD Radeon PRO W7900 Dual Slot\n# ===----------------------------------------------------------------------===\n\n- amdhip64_dylib_path: /opt/rocm-6.1.3/lib/libamdhip64.so\n- gpu-compute-capability: 11.0\n- gpu-arch-name: gfx1100\n</code></pre>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#compile-and-run-a-program","title":"Compile and run a program","text":"<p>With the compiler and runtime ready, we can now compile programs and run them on GPUs.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#compile-a-program","title":"Compile a program","text":"<p>The IREE compiler transforms a model into its final deployable format in several sequential steps. A model authored with Python in an ML framework should use the corresponding framework's import tool to convert into a format (i.e., MLIR) expected by the IREE compiler first.</p> <p>Using a MobileNet model as an example, import using IREE's ONNX importer:</p> <pre><code># Download the model you want to compile and run.\nwget https://github.com/onnx/models/raw/refs/heads/main/validated/vision/classification/mobilenet/model/mobilenetv2-10.onnx\n\n# Import to MLIR using IREE's ONNX importer.\npip install iree-base-compiler[onnx]\niree-import-onnx mobilenetv2-10.onnx --opset-version 17 -o mobilenetv2.mlir\n</code></pre> <p>Then run the following command to compile with the <code>rocm</code> target backend:</p> <pre><code># You need to specify a HIP target for your GPU. For this example we extract\n# the architecture name for the first device using rocm_agent_enumerator.\n# See the section below for more context and alternatives.\nIREE_HIP_TARGET=$(rocm_agent_enumerator | sed -n '2 p')  # e.g. gfx1100\n\niree-compile \\\n    --iree-hal-target-device=hip \\\n    --iree-hip-target=${IREE_HIP_TARGET} \\\n    mobilenetv2.mlir -o mobilenet_hip.vmfb\n</code></pre> Tip - Compiler Optimizations <p>Use <code>--iree-opt-level=[O0,O1,O2,O3]</code> to enable additional compiler optimizations. The default value of <code>O0</code> enables only minimal optimizations while higher levels enable progressively more aggressive optimizations. See Optimization Options for more details.</p> Tip - HIP bitcode files <p>That IREE comes with bundled bitcode files, which are used for linking certain intrinsics on AMD GPUs. These will be used automatically or if the <code>--iree-hip-bc-dir</code> is empty. As additional support may be needed for different chips, users can use this flag to point to an explicit directory. For example, in ROCm installations on Linux, this is often found under <code>/opt/rocm/amdgcn/bitcode</code>.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#choosing-hip-targets","title":"Choosing HIP targets","text":"<p>A HIP target (<code>iree-hip-target</code>) matching the LLVM AMDGPU backend is needed to compile towards each GPU chip. Here is a table of commonly used architectures:</p> AMD GPU SKU Name Target Architecture Architecture Code Name AMD MI100 <code>mi100</code> <code>gfx908</code> <code>cdna1</code> AMD MI210 <code>mi210</code> <code>gfx90a</code> <code>cdna2</code> AMD MI250 <code>mi250</code> <code>gfx90a</code> <code>cdna2</code> AMD MI300A <code>mi300a</code> <code>gfx942</code> <code>cdna3</code> AMD MI300X <code>mi300x</code> <code>gfx942</code> <code>cdna3</code> AMD MI308X <code>mi308x</code> <code>gfx942</code> <code>cdna3</code> AMD MI325X <code>mi325x</code> <code>gfx942</code> <code>cdna3</code> AMD PRO V710 <code>v710</code> <code>gfx1101</code> <code>rdna3</code> AMD PRO W7700 <code>w7700</code> <code>gfx1101</code> <code>rdna3</code> AMD PRO W7800 <code>w7800</code> <code>gfx1100</code> <code>rdna3</code> AMD PRO W7900 <code>w7900</code> <code>gfx1100</code> <code>rdna3</code> AMD RX 7700XT <code>rx7700xt</code> <code>gfx1101</code> <code>rdna3</code> AMD RX 7800XT <code>rx7800xt</code> <code>gfx1101</code> <code>rdna3</code> AMD RX 7900XT <code>rx7900xt</code> <code>gfx1100</code> <code>rdna3</code> AMD RX 7900XTX <code>rx7900xtx</code> <code>gfx1100</code> <code>rdna3</code> AMD RX 9070 <code>rx9070</code> <code>gfx1201</code> <code>rdna4</code> AMD RX 9070XT <code>rx9070xt</code> <code>gfx1201</code> <code>rdna4</code> <p>For a more comprehensive list of prior GPU generations, you can refer to the LLVM AMDGPU backend.</p> <p>The <code>iree-hip-target</code> option support three schemes:</p> <ol> <li>The exact GPU product name (SKU), e.g., <code>--iree-hip-target=mi300x</code>. This     allows the compiler to know about both the target architecture and about     additional hardware details like the number of compute units. This extra     information guides some compiler heuristics and allows for SKU-specific     tuning specs.</li> <li>The GPU architecture, as defined by LLVM, e.g.,     <code>--iree-hip-target=gfx942</code>. This scheme allows for architecture-specific     tuning specs only.</li> <li>The architecture code name, e.g., <code>--iree-hip-target=cdna3</code>. This scheme     gets translated to closes matching GPU architecture under the hood.</li> </ol> <p>We support for common code/SKU names without aiming to be exhaustive. If the ones you want are missing, please use the GPU architecture scheme (2.) as it is the most general.</p> <p>Tip - querying target information from devices</p> <p>In the example above we used <code>rocm_agent_enumerator</code> to get target chip information for the first GPU device on our system. This information can be queried in several ways:</p> <ul> <li> <p>The <code>amdgpu-arch</code> program on Linux and Windows:</p> <pre><code>amdgpu-arch\n\n# gfx1100\n# gfx1100\n</code></pre> </li> <li> <p>The   <code>rocm_agent_enumerator</code>   program on Linux:</p> <pre><code>rocm_agent_enumerator\n\n# gfx000\n# gfx1100\n# gfx1100\n</code></pre> </li> <li> <p>IREE's <code>iree-run-module</code>   tool:</p> <pre><code># See information about all devices:\niree-run-module --dump_devices\n\n# Grep for the first device target:\niree-run-module --dump_devices | grep -m 1 -oP \"gpu-arch-name: \\K.*\"\n# gfx1100\n</code></pre> </li> <li> <p>The   ROCmInfo   program on Linux:</p> <pre><code>rocminfo\n\n# Look for e.g. gfx1100 in the output:\n\n# ...\n# *******\n# Agent 2\n# *******\n#   Name:                    gfx1100\n#   Uuid:                    GPU-1111111111111111\n#   Marketing Name:          AMD Radeon PRO W7900 Dual Slot\n# ...\n</code></pre> </li> </ul>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-rocm/#run-a-compiled-program","title":"Run a compiled program","text":"<p>To run the compiled program:</p> <pre><code>iree-run-module \\\n    --device=hip \\\n    --module=mobilenet_rocm.vmfb \\\n    --function=torch-jit-export \\\n    --input=\"1x3x224x224xf32=0\"\n</code></pre> <p>The above assumes the exported function in the model is named <code>torch-jit-export</code> and it expects one 224x224 RGB image. We are feeding in an image with all 0 values here for brevity, see <code>iree-run-module --help</code> for the format to specify concrete values.</p>","tags":["GPU"]},{"location":"guides/deployment-configurations/gpu-vulkan/","title":"GPU deployment using Vulkan","text":"<p>IREE can accelerate model execution on GPUs via Vulkan, a low-overhead graphics and compute API. Vulkan is cross-platform: it is available on many operating systems, including Android, Linux, and Windows. Vulkan is also cross-vendor: it is supported by most GPU vendors, including AMD, ARM, Intel, NVIDIA, and Qualcomm.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#support-matrix","title":"Support matrix","text":"<p>As IREE and the compiler ecosystem it operates within matures, more target specific optimizations will be implemented. At this stage, expect reasonable performance across all GPUs and for improvements to be made over time for specific vendors and architectures.</p> GPU Vendor Category Performance Focus Architecture ARM Mali GPU Mobile Good Valhall+ Qualcomm Adreno GPU Mobile Reasonable 640+ AMD GPU Desktop/server Good RDNA+ NVIDIA GPU Desktop/server Reasonable Turing+","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#prerequisites","title":"Prerequisites","text":"<p>In order to use Vulkan to drive the GPU, you need to have a functional Vulkan environment. IREE requires Vulkan 1.1 on Android and 1.2 elsewhere. It can be verified by the following steps:</p> Android Linux Windows <p>Android mandates Vulkan 1.1 support since Android 10. You just need to make sure the device's Android version is 10 or higher.</p> <p>Run the following command in a shell:</p> <pre><code>vulkaninfo | grep apiVersion\n</code></pre> <p>If <code>vulkaninfo</code> does not exist, you will need to install the latest Vulkan SDK. Installing via LunarG's package repository is recommended, as it places Vulkan libraries and tools under system paths so it's easy to discover.</p> <p>If the listed version is lower than Vulkan 1.2, you will need to update the driver for your GPU.</p> <p>Run the following command in a shell:</p> <pre><code>vulkaninfo | grep apiVersion\n</code></pre> <p>If <code>vulkaninfo</code> does not exist, you will need to install the latest Vulkan SDK.</p> <p>If the listed version is lower than Vulkan 1.2, you will need to update the driver for your GPU.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#get-the-iree-compiler","title":"Get the IREE compiler","text":"<p>Vulkan expects the program running on GPU to be expressed by the SPIR-V binary exchange format, which the model must be compiled into.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#download-the-compiler-from-a-release","title":"Download the compiler from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-compiler</code> package includes the SPIR-V compiler:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-compiler\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-compiler\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre> <p>Tip</p> <p><code>iree-compile</code> and other tools are installed to your python module installation path. If you pip install with the user mode, it is under <code>${HOME}/.local/bin</code>, or <code>%APPDATA%\\Python</code> on Windows. You may want to include the path in your system's <code>PATH</code> environment variable:</p> <pre><code>export PATH=${HOME}/.local/bin:${PATH}\n</code></pre>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#build-the-compiler-from-source","title":"Build the compiler from source","text":"<p>Please make sure you have followed the Getting started page to build IREE for your host platform. The SPIR-V compiler backend is compiled in by default on all platforms, though you should ensure that the <code>IREE_TARGET_BACKEND_VULKAN_SPIRV</code> CMake option is <code>ON</code> when configuring.</p> <p>Tip</p> <p><code>iree-compile</code> will be built under the <code>iree-build/tools/</code> directory. You may want to include this path in your system's <code>PATH</code> environment variable.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#get-the-iree-runtime","title":"Get the IREE runtime","text":"<p>Next you will need to get an IREE runtime that supports the Vulkan HAL driver.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#download-the-runtime-from-a-release","title":"Download the runtime from a release","text":"<p>Python packages are distributed through multiple channels. See the Python Bindings page for more details. The core <code>iree-base-runtime</code> package includes the Vulkan HAL driver:</p>  Stable releases Nightly releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-base-runtime\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade --pre iree-base-runtime\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#build-the-runtime-from-source","title":"Build the runtime from source","text":"<p>Please make sure you have followed one of the Building from source pages to build IREE for your target platform. The Vulkan HAL driver is compiled in by default on supported platforms, though you should ensure that the <code>IREE_HAL_DRIVER_VULKAN</code> CMake option is <code>ON</code> when configuring.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#check-for-vulkan-devices","title":"Check for Vulkan devices","text":"<p>You can check for Vulkan support by looking for a matching driver and device:</p> <pre><code>$ iree-run-module --list_drivers\n\n# ============================================================================\n# Available HAL drivers\n# ============================================================================\n# Use --list_devices={driver name} to enumerate available devices.\n\n        cuda: NVIDIA CUDA HAL driver (via dylib)\n         hip: HIP HAL driver (via dylib)\n  local-sync: Local execution using a lightweight inline synchronous queue\n  local-task: Local execution using the IREE multithreading task system\n      vulkan: Vulkan 1.x (dynamic)\n</code></pre> <pre><code>$ iree-run-module --list_devices\n\nhip://GPU-00000000-1111-2222-3333-444444444444\nlocal-sync://\nlocal-task://\nvulkan://00000000-1111-2222-3333-444444444444\n</code></pre> <p>To see device details, including hints about what to use as a Vulkan target when compiling a program:</p> <pre><code>$ iree-run-module --dump_devices\n\n...\n# ============================================================================\n# Enumerated devices for driver 'vulkan'\n# ============================================================================\n\n# ===----------------------------------------------------------------------===\n# --device=vulkan://00000000-1111-2222-3333-444444444444\n#   AMD Radeon PRO W7900 Dual Slot  (RADV GFX1100)\n# ===----------------------------------------------------------------------===\n</code></pre>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#compile-and-run-a-program","title":"Compile and run a program","text":"<p>With the requirements out of the way, we can now compile a model and run it.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#compile-a-program","title":"Compile a program","text":"<p>The IREE compiler transforms a model into its final deployable format in several sequential steps. A model authored with Python in an ML framework should use the corresponding framework's import tool to convert into a format (i.e., MLIR) expected by the IREE compiler first.</p> <p>Using a MobileNet model as an example, import using IREE's ONNX importer:</p> <pre><code># Download the model you want to compile and run.\nwget https://github.com/onnx/models/raw/refs/heads/main/validated/vision/classification/mobilenet/model/mobilenetv2-10.onnx\n\n# Import to MLIR using IREE's ONNX importer.\npip install iree-base-compiler[onnx]\niree-import-onnx mobilenetv2-10.onnx --opset-version 17 -o mobilenetv2.mlir\n</code></pre> <p>Then run the following command to compile with the <code>vulkan</code> target device:</p> <pre><code>iree-compile \\\n    --iree-hal-target-device=vulkan \\\n    --iree-vulkan-target=&lt;...&gt; \\\n    mobilenetv2.mlir -o mobilenet_vulkan.vmfb\n</code></pre> Tip - Compiler Optimizations <p>Use <code>--iree-opt-level=[O0,O1,O2,O3]</code> to enable additional compiler optimizations. The default value of <code>O0</code> enables only minimal optimizations while higher levels enable progressively more aggressive optimizations. See Optimization Options for more details.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#choosing-vulkan-targets","title":"Choosing Vulkan targets","text":"<p>The <code>--iree-vulkan-target</code> specifies the GPU architecture to target. It accepts a few schemes:</p> <ul> <li>LLVM CodeGen backend style: this is using LLVM AMDGPU/NVPTX CodeGen targets   like <code>gfx1100</code> for AMD RX 7900XTX and <code>sm_86</code> for NVIDIA RTX 3090 GPUs.</li> <li>Architecture code name style like <code>rdna3</code>/<code>valhall4</code>/<code>ampere</code>/<code>adreno</code>   for AMD/ARM/NVIDIA/Qualcomm GPUs.</li> <li>Product name style: e.g., using <code>rx7900xtx</code>/<code>a100</code> for corresponding GPUs.</li> </ul> <p>Here are a few examples showing how you can target various recent common GPUs:</p> GPU Product Name Target Architecture Architecture Code Name AMD RX 5000 series <code>rdna1</code> AMD RX 6000 series <code>rdna2</code> AMD RX 7700XT <code>rx7700xt</code> <code>gfx1101</code> <code>rdna3</code> AMD RX 7800XT <code>rx7800xt</code> <code>gfx1101</code> <code>rdna3</code> AMD RX 7900XT <code>rx7900xt</code> <code>gfx1100</code> <code>rdna3</code> AMD RX 7900XTX <code>rx7900xtx</code> <code>gfx1100</code> <code>rdna3</code> AMD RX 9070 <code>rx9070</code> <code>gfx1201</code> <code>rdna4</code> AMD RX 9070XT <code>rx9070xt</code> <code>gfx1201</code> <code>rdna4</code> ARM GPUs <code>valhall</code> ARM Mali G510 <code>mali-g510</code> <code>valhall3</code> ARM Mali G715 <code>mali-g715</code> <code>valhall4</code> NVIDIA RTX20 series <code>rtx2070super</code> <code>sm_75</code> <code>turing</code> NVIDIA RTX30 series <code>rtx3080ti</code> <code>sm_86</code> <code>ampere</code> NVIDIA RTX40 series <code>rtx4090</code> <code>sm_89</code> <code>ada</code> Qualcomm GPUs <code>adreno</code> <p>If no target is specified, then a safe but more limited default will be used.</p> <p>Note</p> <p>We don't support the full spectrum of GPUs here and it is impossible to capture all details of a Vulkan implementation with a target triple, given the allowed variances on extensions, properties, limits, etc. So the target triple is just an approximation for usage. This is more of a mechanism to help us develop IREE itself. In the long term we want to perform multi-targetting to generate code for multiple architectures if no explicit target is given.</p>","tags":["GPU","Vulkan"]},{"location":"guides/deployment-configurations/gpu-vulkan/#run-a-compiled-program","title":"Run a compiled program","text":"<p>To run the compiled program:</p> <pre><code>iree-run-module \\\n    --device=vulkan \\\n    --module=mobilenet_vulkan.vmfb \\\n    --function=torch-jit-export \\\n    --input=\"1x3x224x224xf32=0\"\n</code></pre> <p>The above assumes the exported function in the model is named <code>torch-jit-export</code> and it expects one 224x224 RGB image. We are feeding in an image with all 0 values here for brevity, see <code>iree-run-module --help</code> for the format to specify concrete values.</p>","tags":["GPU","Vulkan"]},{"location":"guides/ml-frameworks/","title":"ML frameworks","text":"<p>IREE supports popular machine learning frameworks using the same underlying technology.</p> <pre><code>graph LR\n  accTitle: ML framework to runtime deployment workflow overview\n  accDescr {\n    Programs start in some ML framework.\n    Programs are imported into MLIR.\n    The IREE compiler uses the imported MLIR.\n    Compiled programs are used by the runtime.\n  }\n\n  A[ML frameworks]\n  B[Imported MLIR]\n  C[IREE compiler]\n  D[Runtime deployment]\n\n  A --&gt; B\n  B --&gt; C\n  C --&gt; D</code></pre>"},{"location":"guides/ml-frameworks/#supported-frameworks","title":"Supported frameworks","text":"<p>See guides on how to use each framework with IREE:</p> <ul> <li> JAX</li> <li> ONNX</li> <li> PyTorch</li> <li> TensorFlow and    TensorFlow Lite</li> </ul>"},{"location":"guides/ml-frameworks/#samples","title":"Samples","text":"<p>Check out the samples in IREE's <code>samples/</code> directory, as well as the iree-experimental repository.</p>"},{"location":"guides/ml-frameworks/#exportimport","title":"Export/Import","text":"<p>Each machine learning framework has some \"export\" mechanism that snapshots the structure and data in your program. These exported programs can then be \"imported\" into IREE's compiler by using either a stable import format or one of IREE's importer tools.</p> <p>This export/import process is specific to each frontend and typically involves a number of stages:</p> <ol> <li>Capture/trace/freeze the ML model into a graph</li> <li>Write that graph to an interchange format (e.g. SavedModel, TorchScript,    ONNX)</li> <li>Load the saved program into an import tool and convert to MLIR</li> <li>Legalize the graph's operations so only IREE-compatible operations remain</li> <li>Write the imported MLIR to a file</li> </ol> <p>This fully imported form can then be compiled indepedently of the source language and framework.</p>"},{"location":"guides/ml-frameworks/#compilation","title":"Compilation","text":"<p>IREE compiles MLIR files for specified sets of backends (CPU, GPU, etc). Each backend generates optimized native code custom to the input program and intended target platform. Once compiled, modules can be executed using IREE's runtime.</p> <p>See the deployment configuration guides for details on selecting a compiler backend and tuning options for your choice of target platform(s) or device(s).</p>"},{"location":"guides/ml-frameworks/#execution","title":"Execution","text":"<p>Compiled modules can be executed by selecting what compute devices to use, loading the module, and then executing it with the intended inputs. IREE provides several language bindings for its runtime API.</p>"},{"location":"guides/ml-frameworks/jax/","title":"JAX integration","text":"<p>Note</p> <p>IREE's JAX support is under development. This page is still under construction.</p>","tags":["Python","JAX"]},{"location":"guides/ml-frameworks/jax/#overview","title":"Overview","text":"<p>IREE offers two ways to interface with JAX programs:</p> <ul> <li>An API for extracting and compiling full models ahead of time (AOT) for   execution apart from JAX. This API is being developed in the   iree-org/iree-jax repository.</li> <li>A PJRT plugin that adapts IREE as a native JAX backend for online / just in   time (JIT) use. This plugin is being developed in the   <code>integrations/pjrt</code> directory.</li> </ul>","tags":["Python","JAX"]},{"location":"guides/ml-frameworks/onnx/","title":"ONNX support","text":"","tags":["ONNX","Python","PyTorch"]},{"location":"guides/ml-frameworks/onnx/#overview","title":"Overview","text":"<p>Machine learning models using the Open Neural Network Exchange (ONNX) format can be deployed using the IREE compiler and runtime:</p> <pre><code>graph LR\n  accTitle: ONNX to runtime deployment workflow overview\n  accDescr {\n    Programs start as ONNX protobufs.\n    Programs are imported into MLIR using iree-import-onnx.\n    The IREE compiler uses the imported MLIR.\n    Compiled programs are used by the runtime.\n  }\n\n  A[\"ONNX&lt;br&gt;(protobuf)\"]\n  B[\"MLIR&lt;br&gt;(torch-mlir)\"]\n  C[IREE compiler]\n  D[Runtime deployment]\n\n  A -- iree-import-onnx --&gt; B\n  B --&gt; C\n  C --&gt; D</code></pre>","tags":["ONNX","Python","PyTorch"]},{"location":"guides/ml-frameworks/onnx/#prerequisites","title":"Prerequisites","text":"<p>Install IREE packages, either by building from source or from pip:</p>  Stable releases Nightly releases <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install \\\n  iree-base-compiler[onnx] \\\n  iree-base-runtime\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade \\\n  --pre \\\n  iree-base-compiler[onnx] \\\n  iree-base-runtime\n</code></pre>","tags":["ONNX","Python","PyTorch"]},{"location":"guides/ml-frameworks/onnx/#quickstart","title":"Quickstart","text":"<ol> <li> <p>Start with a <code>.onnx</code> protobuf file, such as a model from    https://github.com/onnx/models.</p> </li> <li> <p>Convert the <code>.onnx</code> file into MLIR using the <code>iree-import-onnx</code> tool:</p> <pre><code>iree-import-onnx \\\n  [model.onnx] \\\n  --opset-version 17 \\\n  -o [model.mlir]\n</code></pre> <p>This tool produces a MLIR file with the help of the torch-mlir project. Run <code>iree-import-onnx --help</code> for a full list of options.</p> </li> <li> <p>Once imported, the standard set of tools and APIs available for any of    IREE's deployment configurations and    API bindings can be used:</p> <pre><code>iree-compile \\\n  model.mlir \\\n  --iree-hal-target-device=local \\\n  --iree-hal-local-target-device-backends=llvm-cpu \\\n  --iree-llvmcpu-target-cpu=host \\\n  -o model_cpu.vmfb\n\niree-run-module \\\n  --module=model_cpu.vmfb \\\n  --device=local-task \\\n  --function=... \\\n  --input=... \\\n  ...\n</code></pre> </li> </ol>","tags":["ONNX","Python","PyTorch"]},{"location":"guides/ml-frameworks/onnx/#samples","title":"Samples","text":"Code samples Generated op tests iree-test-suites <code>onnx_ops</code> Public model tests iree-test-suites <code>onnx_models</code> Curated op and model tests SHARK-TestSuite <code>e2eshark/onnx</code> and <code>alt_e2eshark/onnx_tests</code> Importer tests torch-mlir <code>test/python/onnx_importer</code>","tags":["ONNX","Python","PyTorch"]},{"location":"guides/ml-frameworks/onnx/#troubleshooting","title":"Troubleshooting","text":"<p>Support for a broad set of ONNX operators and data types is an active investment area. See the ONNX Op Support tracking issue for the latest status.</p>","tags":["ONNX","Python","PyTorch"]},{"location":"guides/ml-frameworks/onnx/#failed-to-legalize-operation-that-was-explicitly-marked-illegal","title":"Failed to legalize operation that was explicitly marked illegal","text":"<p>If you see an error compiling a converted .mlir file like this:</p> <pre><code>$ iree-compile model.mlir --iree-hal-target-device=local --iree-hal-local-target-device-backends=llvm-cpu -o model.vmfb\n\nmodel.mlir:507:12: error: failed to legalize operation 'torch.operator' that was explicitly marked illegal\n    %503 = torch.operator \"onnx.Identity\"(%arg0) : (!torch.vtensor&lt;[?],si64&gt;) -&gt; !torch.vtensor&lt;[?],si64&gt;\n           ^\n</code></pre> <p>There are several possible scenarios:</p> <ol> <li>The operator is not implemented, or the implementation is missing a case.    Search for a matching issue in one of these places:<ul> <li>https://github.com/llvm/torch-mlir/issues</li> <li>https://github.com/nod-ai/SHARK-ModelDev/issues</li> </ul> </li> <li> <p>The operator is implemented but only for a more recent ONNX version. You can    try upgrading your .onnx file using the    ONNX Version Converter:</p> convert_onnx_model.py<pre><code>import onnx\noriginal_model = onnx.load_model(\"model.onnx\")\nconverted_model = onnx.version_converter.convert_version(original_model, 17)\nonnx.save(converted_model, \"model_17.onnx\")\n</code></pre> <p>and then attempting the convert -&gt; compile again:</p> <pre><code>iree-import-onnx model_17.onnx -o model_17.mlir\niree-compile model_17.mlir ...\n</code></pre> </li> </ol>","tags":["ONNX","Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/","title":"PyTorch + IREE =","text":"","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#overview","title":"Overview","text":"<p>iree-turbine offers a tight integration between compatible versions of IREE, torch-mlir, and PyTorch.</p> <ul> <li> Seamless integration with standard PyTorch workflows</li> <li> Deployment support for running PyTorch models on cloud and edge devices</li> <li> General purpose model compilation and execution tools</li> </ul> <p>Both just-in-time (JIT) and ahead-of-time (AOT) workflows are supported:</p> <pre><code>graph LR\n  accTitle: PyTorch integration overview\n  accDescr {\n    PyTorch programs can be optimized within a Python session with\n    iree-turbine's just-in-time tools.\n    PyTorch programs can be exported out of Python to native binaries using\n    iree-turbine's ahead-of-time export toolkit.\n  }\n\n  subgraph Python\n    pytorch(PyTorch)\n    subgraph turbine [iree-turbine]\n      jit(\"Eager execution (JIT)\")\n      aot(\"Export toolkit (AOT)\")\n    end\n\n    pytorch --&gt; jit\n    jit --&gt; pytorch\n    pytorch --&gt; aot\n  end\n\n  subgraph Native\n    binary([\"binary (.vmfb)\"])\n  end\n\n  aot -.-&gt; binary</code></pre> <p>Info</p> <p>Documentation for iree-turbine is available at https://iree-turbine.readthedocs.io/.</p>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>First install a recent version of PyTorch by following    the official instructions:</p>  Linux macOS Windows <pre><code>python -m pip install torch --index-url https://download.pytorch.org/whl/cpu\n</code></pre> <pre><code>python -m pip install torch\n</code></pre> <pre><code>python -m pip install torch\n</code></pre> <p>Tip</p> <p>IREE includes its own GPU support, so we recommend the CPU versions of PyTorch. You can install CUDA or ROCm as you wish, but those packages can be quite large.</p> </li> <li> <p>Then install iree-turbine:</p>  Stable releases Nightly pre-releases <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install iree-turbine\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --pre \\\n  --upgrade \\\n  iree-turbine\n</code></pre> </li> </ol>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#just-in-time-jit-execution","title":"Just-in-time (JIT) execution","text":"<p>Just-in-time integration allows for Python code using TorchDynamo to optimize PyTorch models/functions using IREE, all within an interactive Python session.</p> <pre><code>graph TD\n  accTitle: PyTorch JIT workflow overview\n  accDescr {\n    Programs start as either PyTorch nn.Module objects or callable functions.\n    Programs are compiled into optimized modules using torch.compile.\n    Within torch.compile, Dynamo runs the program through Turbine and IREE.\n  }\n\n  subgraph Python\n    input([nn.Module / function])\n\n    subgraph compile [\"torch.compile()\"]\n      direction LR\n      dynamo{{TorchDynamo}}\n      turbine{{iree-turbine}}\n      iree{{IREE}}\n      dynamo --&gt; turbine --&gt; iree\n    end\n\n    output([Optimized module])\n    input --&gt; compile --&gt; output\n  end</code></pre> <p>For deployment outside of Python, see the ahead-of-time sections below.</p>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#quickstart","title":"Quickstart","text":"<p>Turbine integrates into PyTorch as a custom backend for <code>torch.compile</code>.</p> <p>Behind the scenes, PyTorch captures the structure of the input model into a computation graph and feeds that graph through to the selected backend compiler.</p> <pre><code>import torch\n\n# Define the `nn.Module` or Python function to run.\nclass LinearModule(torch.nn.Module):\n  def __init__(self, in_features, out_features):\n    super().__init__()\n    self.weight = torch.nn.Parameter(torch.randn(in_features, out_features))\n    self.bias = torch.nn.Parameter(torch.randn(out_features))\n\n  def forward(self, input):\n    return (input @ self.weight) + self.bias\n\nlinear_module = LinearModule(4, 3)\n\n# Compile the program using the turbine backend.(1)\nopt_linear_module = torch.compile(linear_module, backend=\"turbine_cpu\")\n\n# Use the compiled program as you would the original program.\nargs = torch.randn(4)\nturbine_output = opt_linear_module(args)\n</code></pre> <ol> <li>Initial integration only supports CPU, but support for many of IREE's other    targets is coming soon.</li> </ol>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#samples","title":"Samples","text":"Code samples JIT compilation notebook Simple MLP eager iree-turbine <code>core/examples/eager_mlp/mlp_eager_simple.py</code>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#ahead-of-time-aot-export","title":"Ahead-of-time (AOT) export","text":"<p>The ahead-of-time toolkit allows developers to define a program's structure in Python and then export deployment-ready artifacts that can be used in IREE's deployment configurations via the API bindings.</p>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#simple-api","title":"Simple API","text":"<p>For simple models, a one-shot export API is available.</p> <pre><code>graph LR\n  accTitle: PyTorch simple AOT workflow overview\n  accDescr {\n    Programs start as PyTorch nn.Module objects.\n    Modules are exported using the \"aot\" API.\n    Exported outputs are then compiled to .vmfb files with executable binaries.\n  }\n\n  subgraph Python\n    input([nn.Module])\n    export([\"ExportOutput (MLIR)\"])\n    input -- \"aot.export()\" --&gt; export\n  end\n\n  subgraph Native\n    binary([\"binary (.vmfb)\"])\n  end\n\n  export -. \"compile()\" .-&gt; binary</code></pre> <pre><code>import iree.runtime as ireert\nimport numpy as np\nimport iree.turbine.aot as aot\nimport torch\n\n# Define the `nn.Module` to export.\nclass LinearModule(torch.nn.Module):\n  def __init__(self, in_features, out_features):\n    super().__init__()\n    self.weight = torch.nn.Parameter(torch.randn(in_features, out_features))\n    self.bias = torch.nn.Parameter(torch.randn(out_features))\n\n  def forward(self, input):\n    return (input @ self.weight) + self.bias\n\nlinear_module = LinearModule(4, 3)\n\n# Export the program using the simple API.\nexample_arg = torch.randn(4)\nexport_output = aot.export(linear_module, example_arg)\n\n# Compile to a deployable artifact.\nbinary = export_output.compile(save_to=None)\n\n# Use the IREE runtime API to test the compiled program.\nconfig = ireert.Config(\"local-task\")\nvm_module = ireert.load_vm_module(\n    ireert.VmModule.copy_buffer(config.vm_instance, binary.map_memory()),\n    config,\n)\ninput = np.array([1.0, 2.0, 3.0, 4.0], dtype=np.float32)\nresult = vm_module.main(input)\nprint(result.to_host())\n</code></pre>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#samples_1","title":"Samples","text":"Code samples Simple AOT export notebook Import Whisper from  Hugging Face notebook Simple MLP export iree-turbine <code>core/examples/aot_mlp/mlp_export_simple.py</code>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#advanced-api","title":"Advanced API","text":"<p>For more complex models, an underlying advanced API is available that gives access to more features.</p> <pre><code>graph LR\n  accTitle: PyTorch advanced AOT workflow overview\n  accDescr {\n    Programs are represented using the aot.CompiledModule class.\n    CompiledModules can extend nn.Module objects, export globals, and set\n    shapes and dtypes for each function.\n    Modules are exported using the \"aot\" API.\n    Exported outputs are then compiled to .vmfb files with executable binaries.\n  }\n\n  subgraph Python\n    compiledmodule(\"aot.CompiledModule&lt;br&gt;&lt;br&gt;- extend nn.Module&lt;br&gt;- export globals&lt;br&gt;- set shapes/dtypes\")\n    export([\"ExportOutput (MLIR)\"])\n    compiledmodule -- \"aot.export()\" --&gt; export\n  end\n\n  subgraph Native\n    binary([\"binary (.vmfb)\"])\n  end\n\n  export -. \"compile()\" .-&gt; binary</code></pre> <p>Advanced export workflows can use the <code>aot.CompiledModule</code> class to define and constrain the structure of a program prior to compiling it.</p> <pre><code>import iree.turbine.aot as aot\n\n# A minimal program, with no functions or variables.\nclass BasicModule(aot.CompiledModule):\n  ...\n\n# Create an instance of the program and convert it to MLIR.\nfrom iree.compiler.ir import Context\ninstance = BasicModule(context=Context())\nmodule_str = str(aot.CompiledModule.get_mlir_module(instance))\n\nprint(module_str)\n# module @basic {\n# }\n</code></pre>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#exporting-functions","title":"Exporting functions","text":"<p>Exported functions are the API entry points into a compiled program.</p> <p>Simple feed-forward neural networks used for inference may have a single exported function (typically called \"forward\"), while more complex programs can have multiple computation functions, initialization functions, \"backward\" methods for training, state management functions, debugging functions, etc.</p>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#global-variables","title":"Global variables","text":"<p>Global variables are used to represent persistent state within a program instance.</p> <p>For example, they can be used to represent the weights and biases in a neural network, and exporting these as mutable variables can allow for setting their values independently at runtime.</p> <ul> <li> <p>Individual globals can be exported using <code>aot.export_global()</code>:</p> <pre><code>state_example = torch.zeros([1], dtype=torch.int32)\n\nclass SampleModule(aot.CompiledModule):\n  value = aot.export_global(state_example, mutable=True)\n\n  def get_value(self):\n    return self.value\n\n  def update_value(self, new_value=aot.abstractify(value)):\n    self.value = new_value\n</code></pre> </li> </ul>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#using-external-parameters","title":"Using external parameters","text":"<p>Model parameters can be stored in standalone files that can be efficiently stored and loaded separately from model compute graphs. See the Parameters guide for more general information about parameters in IREE.</p> <p>When using iree-turbine, the <code>aot.externalize_module_parameters()</code> function separates parameters from program modules and encodes a symbolic relationship between them so they can be loaded at runtime.</p> <p>We use Safetensors here to store the models parameters on disk, so that they can be loaded later during runtime.</p> <pre><code>import torch\nfrom safetensors.torch import save_file\nimport numpy as np\nimport iree.turbine.aot as aot\n\nclass LinearModule(torch.nn.Module):\n    def __init__(self, in_features, out_features):\n        super().__init__()\n        self.weight = torch.nn.Parameter(torch.randn(in_features, out_features))\n        self.bias = torch.nn.Parameter(torch.randn(out_features))\n\n    def forward(self, input):\n        return (input @ self.weight) + self.bias\n\nlinear_module = LinearModule(4,3)\n\n# Create a params dictionary. Note that the keys here match LinearModule's\n# attributes. We will use the saved safetensor file for use from the command\n# line.\nwt = linear_module.weight.data.contiguous()\nbias = linear_module.bias.data.contiguous()\nparams = { \"weight\": wt, \"bias\": bias }\nsave_file(params, \"params.safetensors\")\n\n# Externalize the model parameters. This removes weight tensors from the IR\n# module, allowing them to be loaded at runtime. Symbolic references to these\n# parameters are still retained in the IR.\naot.externalize_module_parameters(linear_module)\n\ninput = torch.randn(4)\nexported_module = aot.export(linear_module, input)\n\n# Compile the exported module, to generate the binary. When `save_to` is\n# not None, the binary will be stored at the path passed in to `save_to`.\n# Here, we pass in None, so that the binary can stored in a variable.\nbinary = exported_module.compile(save_to=None)\n\n# Save the input as an npy tensor, so that it can be passed in through the\n# command line to `iree-run-module`.\ninput_np = input.numpy()\nnp.save(\"input.npy\", input_np)\n</code></pre> Python runtimeCommand line tools <p>Runtime invocation now requires loading the parameters as a separate module. To get the parameters as a module, iree.runtime provides a convenient method, called <code>create_io_parameters_module()</code>.</p> <pre><code>import iree.runtime as ireert\n\n# To load the parameters, we need to define ParameterIndex for each\n# parameter class.\nidx = ireert.ParameterIndex()\nidx.add_buffer(\"weight\", wt.detach().numpy().tobytes())\nidx.add_buffer(\"bias\", bias.detach().numpy().tobytes())\n\n\n# Create the runtime instance, and load the runtime.\nconfig = ireert.Config(driver_name=\"local-task\")\ninstance = config.vm_instance\n\nparam_module = ireert.create_io_parameters_module(\n    instance, idx.create_provider(scope=\"model\"),\n)\n\n# Load the runtime. There are essentially two modules to load, one for the\n# weights, and one for the main module. Ensure that the VMFB file is not\n# already open or deleted before use.\nvm_modules = ireert.load_vm_modules(\n    param_module,\n    ireert.create_hal_module(instance, config.device),\n    ireert.VmModule.copy_buffer(instance, binary.map_memory()),\n    config=config,\n)\n\n# vm_modules is a list of modules. The last module in the list is the one\n# generated from the binary, so we use that to generate an output.\nresult = vm_modules[-1].main(input)\nprint(result.to_host())\n</code></pre> <p>It is also possible to save the VMFB binary to disk, then call <code>iree-run-module</code> through the command line to generate outputs.</p> <pre><code># When save_to is not None, the binary is saved to the given path,\n# and a None value is returned.\nbinary = exported_module.compile(save_to=\"compiled_module.vmfb\")\n</code></pre> <p>The stored safetensors file, the input tensor, and the VMFB can now be passed in to IREE through the command line.</p> <pre><code>iree-run-module --module=compiled_module.vmfb --parameters=model=params.safetensors \\\n                --input=@input.npy\n</code></pre> <p>Note here that the <code>--parameters</code> flag has <code>model=</code> following it immediately. This simply specifies the scope of the parameters, and is reflected in the compiled module.</p>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/pytorch/#samples_2","title":"Samples","text":"Code samples Advanced AOT export notebook PyTorch dynamic shapes notebook AOT unit tests iree-turbine <code>tests/aot/</code> <p>The sharktank project hosted at https://github.com/nod-ai/shark-ai/tree/main/sharktank also uses <code>iree-turbine</code> heavily to provide inference-optimized ops, layers, and models for popular gen-ai applications.</p>","tags":["Python","PyTorch"]},{"location":"guides/ml-frameworks/tensorflow/","title":"TensorFlow integration","text":"","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#overview","title":"Overview","text":"<p>IREE supports compiling and running TensorFlow programs represented as <code>tf.Module</code> classes or stored in the <code>SavedModel</code> format.</p> <pre><code>graph LR\n  accTitle: TensorFlow to runtime deployment workflow overview\n  accDescr {\n    Programs start as either TensorFlow SavedModel or tf.Module programs.\n    Programs are imported into MLIR as StableHLO.\n    The IREE compiler uses the imported MLIR.\n    Compiled programs are used by the runtime.\n  }\n\n  subgraph A[TensorFlow]\n    direction TB\n    A1[SavedModel]\n    A2[tf.Module]\n\n    A1 --- A2\n  end\n\n  subgraph B[MLIR]\n    B1[StableHLO]\n  end\n\n  C[IREE compiler]\n  D[Runtime deployment]\n\n  A -- iree-import-tf --&gt; B\n  B --&gt; C\n  C --&gt; D</code></pre>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install TensorFlow by following the     official documentation:</p> <pre><code>python -m pip install tensorflow\n</code></pre> </li> <li> <p>Install IREE packages, either by     building from source     or from pip:</p> Stable releases Nightly releases <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install \\\n  iree-base-compiler \\\n  iree-base-runtime \\\n  iree-tools-tf\n</code></pre> <p>Nightly releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade \\\n  --pre \\\n  iree-base-compiler \\\n  iree-base-runtime \\\n  iree-tools-tf\n</code></pre> </li> </ol>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#importing-models","title":"Importing models","text":"<p>IREE compilers transform a model into its final deployable format in several sequential steps. The first step for a TensorFlow model is to use either the <code>iree-import-tf</code> command-line tool or IREE's Python APIs to import the model into a format (i.e., MLIR) compatible with the generic IREE compilers.</p>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#from-savedmodel-on-tensorflow-hub","title":"From SavedModel on TensorFlow Hub","text":"<p>IREE supports importing and using SavedModels from TensorFlow Hub.</p>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#using-the-command-line-tool","title":"Using the command-line tool","text":"<p>First download the SavedModel and load it to get the serving signature, which is used as the entry point for IREE compilation flow:</p> <pre><code>import tensorflow.compat.v2 as tf\nloaded_model = tf.saved_model.load('/path/to/downloaded/model/')\nprint(list(loaded_model.signatures.keys()))\n</code></pre> <p>Note</p> <p>If there are no serving signatures in the original SavedModel, you may add them by yourself by following \"Missing serving signature in SavedModel\".</p> <p>Then you can import the model with <code>iree-import-tf</code>. You can read the options supported via <code>iree-import-tf -help</code>. Using MobileNet v2 as an example and assuming the serving signature is <code>predict</code>:</p> <pre><code>iree-import-tf\n  --tf-import-type=savedmodel_v1 \\\n  --tf-savedmodel-exported-names=predict \\\n  /path/to/savedmodel -o iree_input.mlir\n</code></pre> <p>Tip</p> <p><code>iree-import-tf</code> is installed as <code>/path/to/python/site-packages/iree/tools/tf/iree-import-tf</code>. You can find out the full path to the <code>site-packages</code> directory via the <code>python -m site</code> command.</p> <p>Tip</p> <p><code>-tf-import-type</code> needs to match the SavedModel version. You can try both v1 and v2 if you see one of them gives an empty dump.</p> <p>Next, you can compile the model in <code>iree_input.mlir</code> for one of IREE's supported targets by following one of the deployment configuration guides.</p>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#samples","title":"Samples","text":"Colab notebooks Training an MNIST digits classifier Edge detection Pretrained ResNet50 inference TensorFlow Hub import <p>End-to-end execution tests can be found in IREE's integrations/tensorflow/e2e/ directory.</p>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#troubleshooting","title":"Troubleshooting","text":"","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tensorflow/#missing-serving-signature-in-savedmodel","title":"Missing serving signature in SavedModel","text":"<p>Sometimes SavedModels are exported without explicit serving signatures. This happens by default for TensorFlow Hub SavedModels. However, serving signatures are required as entry points for IREE compilation flow. You can use Python to load and re-export the SavedModel to give it serving signatures. For example, for MobileNet v2, assuming we want the serving signature to be <code>predict</code> and operating on a 224x224 RGB image:</p> <pre><code>import tensorflow.compat.v2 as tf\nloaded_model = tf.saved_model.load('/path/to/downloaded/model/')\ncall = loaded_model.__call__.get_concrete_function(\n         tf.TensorSpec([1, 224, 224, 3], tf.float32))\nsignatures = {'predict': call}\ntf.saved_model.save(loaded_model,\n  '/path/to/resaved/model/', signatures=signatures)\n</code></pre> <p>The above will create a new SavedModel with a serving signature, <code>predict</code>, and save it to <code>/path/to/resaved/model/</code>.</p>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/","title":"TensorFlow Lite (LiteRT) integration","text":"<p>Warning</p> <p>Support for TensorFlow Lite depends on the TOSA MLIR dialect, which is undergoing a major version change that will introduce a new backwards compatibility baseline. During this transition, support will be unstable.</p> <p>See https://github.com/iree-org/iree/issues/19777 for details.</p>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/#overview","title":"Overview","text":"<p>IREE supports compiling and running TensorFlow Lite (TFLite) programs stored as TFLite FlatBuffers. These files can be imported into an IREE-compatible format then compiled to a series of backends.</p> <pre><code>graph LR\n  accTitle: TFLite to runtime deployment workflow overview\n  accDescr {\n    Programs start as TensorFlow Lite FlatBuffers.\n    Programs are imported into MLIR's TOSA dialect using iree-import-tflite.\n    The IREE compiler uses the imported MLIR.\n    Compiled programs are used by the runtime.\n  }\n\n  subgraph A[TFLite]\n    A1[FlatBuffer]\n  end\n\n  subgraph B[MLIR]\n    B1[TOSA]\n  end\n\n  C[IREE compiler]\n  D[Runtime deployment]\n\n  A -- iree-import-tflite --&gt; B\n  B --&gt; C\n  C --&gt; D</code></pre>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install TensorFlow by following the     official documentation:</p> <pre><code>python -m pip install \"tensorflow&lt;=2.18.0\"\n</code></pre> </li> <li> <p>Install IREE packages, either by     building from source     or from pip:</p> Stable releases Nightly releases <p>Stable release packages are published to PyPI.</p> <p>Note</p> <p>Until the major version updates in https://github.com/iree-org/iree/issues/19777 are completed, we recommend users install old versions.</p> <pre><code>python -m pip install \\\n  \"iree-base-compiler&lt;=3.1.0\" \\\n  \"iree-base-runtime&lt;=3.1.0\" \\\n  \"iree-tools-tflite&lt;=20250107.1133\"\n</code></pre> <p>Nightly releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --upgrade \\\n  --pre \\\n  iree-base-compiler \\\n  iree-base-runtime \\\n  iree-tools-tflite\n</code></pre> </li> </ol>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/#importing-and-compiling","title":"Importing and Compiling","text":"<p>IREE's tooling is divided into two components: import and compilation.</p> <ol> <li>The import tool converts the TFLite FlatBuffer to an IREE compatible form,   validating that only IREE compatible operations remain. Containing a combination   of TOSA and IREE operations.</li> <li>The compilation stage generates the bytecode module for a list of targets,   which can be executed by IREE.</li> </ol>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/#using-command-line-tools","title":"Using Command Line Tools","text":"<p>These two stages can be completed entirely via the command line.</p> <pre><code>WORKDIR=\"/tmp/workdir\"\nmkdir -p ${WORKDIR}\ncd ${WORKDIR}\n\n# Fetch a model from https://www.kaggle.com/models/tensorflow/posenet-mobilenet\nTFLITE_URL=\"https://www.kaggle.com/api/v1/models/tensorflow/posenet-mobilenet/tfLite/float-075/1/download\"\ncurl -L -o posenet.tar.gz ${TFLITE_URL}\ntar xf posenet.tar.gz\n\nTFLITE_PATH=${WORKDIR}/1.tflite\nIMPORT_PATH=${WORKDIR}/tosa.mlir\nMODULE_PATH=${WORKDIR}/module.vmfb\n\n# Import the model to MLIR (in the TOSA dialect) so IREE can compile it.\niree-import-tflite ${TFLITE_PATH} -o ${IMPORT_PATH}\n\n# Compile for the CPU backend\niree-compile \\\n    --iree-hal-target-device=local \\\n    --iree-hal-local-target-device-backends=llvm-cpu \\\n    ${IMPORT_PATH} \\\n    -o ${MODULE_PATH}\n</code></pre>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/#using-the-python-api","title":"Using the Python API","text":"<p>The example below demonstrates downloading, compiling, and executing a TFLite model using the Python API. This includes some initial setup to declare global variables, download the sample module, and download the sample inputs.</p> <p>The default setup uses the CPU backend as the only target. This can be reconfigured to select alternative targets.</p> <p>First install some extra packages:</p> <pre><code>python -m pip install kagglehub pillow\n</code></pre> <p>Then run the demo Python script:</p> <pre><code>import iree.compiler.tflite as iree_tflite_compile\nimport iree.runtime as iree_rt\nimport kagglehub\nimport numpy as np\nimport os\nimport urllib.request\n\nfrom PIL import Image\n\nworkdir = \"/tmp/workdir\"\nos.makedirs(workdir, exist_ok=True)\n\n# Download a model.\ndownload_path = kagglehub.model_download(\n    \"tensorflow/posenet-mobilenet/tfLite/float-075\"\n)\ntflite_file = os.path.join(download_path, \"1.tflite\")\n\n# Once downloaded we can compile the model for the selected backends. Both the\n# TFLite and TOSA representations of the model are saved for debugging purposes.\n# This is optional and can be omitted.\ntosa_ir = os.path.join(workdir, \"tosa.mlirbc\")\nbytecode_module = os.path.join(workdir, \"iree.vmfb\")\nbackends = [\"llvm-cpu\"]\nbackend_extra_args = [\"--iree-llvmcpu-target-cpu=host\"]\n\niree_tflite_compile.compile_file(\n    tflite_file,\n    input_type=\"tosa\",\n    extra_args=backend_extra_args,\n    output_file=bytecode_module,\n    save_temp_iree_input=tosa_ir,\n    target_backends=backends,\n    import_only=False,\n)\n\n# After compilation is completed we configure the VmModule using the local-task\n# configuration and compiled IREE module.\nconfig = iree_rt.Config(\"local-task\")\ncontext = iree_rt.SystemContext(config=config)\nwith open(bytecode_module, \"rb\") as f:\n    vm_module = iree_rt.VmModule.from_flatbuffer(config.vm_instance, f.read())\n    context.add_vm_module(vm_module)\n\n# Finally, the IREE module is loaded and ready for execution. Here we load the\n# sample image, manipulate to the expected input size, and execute the module.\n# By default TFLite models include a single function named 'main'. The final\n# results are printed.\n\njpg_file = \"/\".join([workdir, \"input.jpg\"])\njpg_url = \"https://raw.githubusercontent.com/tensorflow/tfjs-models/refs/heads/master/pose-detection/test_data/pose.jpg\"\nurllib.request.urlretrieve(jpg_url, jpg_file)\n\nim = (\n    np.array(Image.open(jpg_file).resize((353, 257)))\n    .astype(np.float32)\n    .reshape((1, 353, 257, 3))\n)\nargs = [im]\n\ninvoke = context.modules.module[\"main\"]\niree_results = invoke(*args)\nprint(iree_results[0].to_host())\n</code></pre>","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/#samples","title":"Samples","text":"<ul> <li> <p>The tflitehub folder in the iree-experimental repository contains test scripts to compile, run, and compare various TensorFlow Lite models sourced from TensorFlow Hub.</p> </li> <li> <p>An example smoke test of the TensorFlow Lite C API is available here.</p> </li> </ul> Colab notebooks Text classification with TFLite and IREE","tags":["Python","TensorFlow"]},{"location":"guides/ml-frameworks/tflite/#troubleshooting","title":"Troubleshooting","text":"<p>Failures during the import step usually indicate a failure to lower from TensorFlow Lite's operations to TOSA, the intermediate representation used by IREE. Some TensorFlow Lite operations are not fully supported. Please reach out on one of IREE's communication channels if you notice something missing.</p>","tags":["Python","TensorFlow"]},{"location":"reference/","title":"Reference pages","text":""},{"location":"reference/#api-bindings","title":"API bindings","text":"<p>IREE offers API bindings for compiling and running programs from various languages.</p> <ul> <li>Index page</li> </ul>"},{"location":"reference/#mlir-dialects","title":"MLIR dialects","text":"<p>Automatically generated documentation for the MLIR dialects defined in the IREE repository.</p> <ul> <li>Index page</li> </ul>"},{"location":"reference/#other-topics","title":"Other topics","text":"<ul> <li>Glossary</li> <li>Optimization options</li> <li>Tuning</li> <li>Extensions</li> </ul>"},{"location":"reference/extensions/","title":"Extension mechanisms","text":"<p>Note</p> <p>Much of this describes provisions for extension within IREE but until the core of the system has settled little work will be done to fully flesh-out and document them in detail. A large majority of things that would make someone want to extend IREE can instead be accomplished much easier and performantly using native MLIR dialects that are then processed by the IREE compiler.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#guidelines","title":"Guidelines","text":"<p>IREE has a compiler and runtime separation, a multi-layered architecture, and split between execution of \"host code\" that schedules compute-heavy work and SPMD \"device code\" that performs the bulk of compute operations. Each axis has a different set of extension mechanisms that can be used independently or combined.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#extension-philosophy","title":"Extension philosophy","text":"<p>Organized below are some of the mechanisms IREE provides for extending the core compiler and runtime and when they should(n't) be used. The goal of these progressively lower-level extension mechanisms is to make it easier for users to fall into the pit of success:</p> <p>Quote</p> <p>\"a well-designed system makes it easy to do the right things and annoying (but not impossible) to do the wrong things.\" - Jeff Atwood</p> <p>The amount of engineering complexity for initial bring-up and maintenance increases with each subsequently lower-level approach and it is best to start from the top and exit as fast as possible: this is a choose-your-own-adventure where you're trying to escape the dungeon with both the loot and your limbs . Avoid the temptation of immediately dropping down to making external C calls at runtime because that's how it's been done before as it's easier, more robust, and more performant to use the system as it is intended to be used.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#when-to-extend","title":"When to extend","text":"<p>The primary goal when extending any framework should first be to avoid extending it at all. There is no mechanism that is free - whether in terms of engineering effort to develop and maintain over time, include in compiler deployments, or include in runtime deployments. As a system scales in deployment configurations the available mechanisms for extension increase but so too does the chaos introduced by extensions that do not also scale with that design. Users are the only ones who can determine the tradeoffs they are willing to accept: for example, the mechanism to extend device code with a custom runtime call to a C function does not work on GPUs and gets significantly more complicated on CPUs as sandboxes/enclaves are used - but if the user scenario is for local process CPU-only execution that may not matter.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#where-to-extend-inputscompilerruntime","title":"Where to extend (inputs/compiler/runtime)","text":"<p>Consider in normal software development when one would choose to write more code (possibly packaging it into a reusable library) vs. changing the programming language or compiler they are using to compile their code vs. changing the operating systems their code runs on. The further one gets from the problem they are trying to solve the more work, coordination, and maintenance is involved and though there are reasons to make changes across the stack they should be done only when a simpler solution would not suffice.</p> <p>An author will retain more control over their logic the closer they sit to the inputs to the compiler. IREE provides several mechanisms that try to keep control with the author and robust to changes in IREE or MLIR internals and it is strongly encouraged that those looking to extend take those routes first. Contributions that help everyone are very welcome but do have a higher cost and it's often much easier to design and justify upstream changes with working examples in forks or at higher levels of the stack.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#where-to-extend-hostdevice","title":"Where to extend (host/device)","text":"<p>From a performance perspective the rule is to colocate code with the data it is acting on: tensor data, for example, should almost exclusively be manipulated by device code as tensors live on device. Attempting to use tensor data with host code will result in synchronization points and host/device transfers that can decimate performance. This can lead to seemingly paradoxical situations where swapping out compiler-generated code for a human-authored \"fast path\" can be slower than even the most naive compiler results. An important thing to keep in mind with compilers is that it is exceedingly difficult to produce code by hand that is consistently more performant across a broad range of deployments and the first temptation should always be to improve the compiler - extending it via other mechanisms when not required by the task is often just premature optimization.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#1-target-iree-input-dialects","title":"1. Target IREE input dialects","text":"<p>TL;DR</p> <p>Convert your custom ops into standard MLIR dialects.</p> <pre><code>+------------+      +--------+      +---------------+\n| Your input | -+-&gt; |  iree  | -+-&gt; | IREE compiler |\n+------------+  |   +--------+  |   +---------------+\n                |   +--------+  |\n                +-&gt; | linalg | -+\n                |   +--------+  |\n                |      ....     |\n</code></pre> <p>The easiest, cleanest, and most robust path to extend IREE is to make use of what MLIR is designed for: composing dialects and converting between them. IREE supports several input dialects such as <code>tosa</code>, <code>mhlo</code>, <code>linalg</code>, and the standard <code>arith</code>, <code>math</code>, <code>tensor</code>, and <code>scf</code> dialects. Any source IR that can be turned into that mix of dialects (directly or transitively) will work with the whole IREE pipeline for all deployment configurations and targets. If possible to express the computation in this form it will always be the best route to getting small deployments without the need to modify or include any additional code at runtime and run on all device types and execution modes.</p> <p>This mechanism can also be layered with any of the subsequent lower-level ones: if some part of the operation runs on the host and some part on device then decomposing it such that it contains as many standard ops for flow control as possible and linear algebra/custom ops for the dense math will reduce the engineering effort required on both sides and lead to an easier to maintain solution even if lower-level extension is required.</p> <p>A large majority of classic ML \"custom ops\" can be accomplished with this approach. When bringing up projects built on IREE it's best to concisely describe the operation in more elemental mathematical representations and then add optimizations where required knowing that things will still work even if those optimizations never happen.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#pros","title":"Pros","text":"<ul> <li>No IREE compiler or runtime code changes required.<ul> <li>Can use standard IREE packaged releases and tools.</li> <li>No versioning issues at runtime.</li> </ul> </li> <li>IREE's host/device partitioning can partition your code.</li> <li>Fusion and other compiler techniques (CSE/DCE/inlining/etc) work on your code.</li> <li>All target backends (CPU/GPU/accelerators/enclaves/etc) work.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#cons","title":"Cons","text":"<ul> <li>Input dialects cannot natively represent all possible programs (such as file   IO and other syscalls).</li> <li>Performance-sensitive host code (b-trees and other in-memory databases) will   run through the slower VM paths if not authored as dense compute.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#when-to-use","title":"When to use","text":"<ul> <li> Targeting multiple MLIR toolchains of which IREE is just   one (as little to no IREE-specific code is required).</li> <li> Operation represents host code in addition to device code.</li> <li> All code is known statically or symbolically at   compile-time (instead of independently versioned libraries at runtime).</li> <li> Complex high-performance code not representable as linear algebra.</li> <li> External runtime interactions (file/network/user IO). Use   custom modules.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#implementation","title":"Implementation","text":"<p>To make use of this approach one just needs to follow the standard MLIR dialect conversion behavior: add a dialect with ops, add a conversion pass, and run that pass before providing the resulting IR to the IREE compiler. See Creating a Dialect.</p> <p>Think of this like authoring C++ sources with templates that you compile into your application: Clang (and LLVM beyond) don't know about your library details and instead just process it as it would any other code. You can take the same source and pass it to GCC and it'll be robust to underlying changes in the system.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#2-extend-host-code-with-custom-modules","title":"2. Extend host code with custom modules","text":"<p>TL;DR</p> <p>Import MLIR functions in the compiler and custom modules at runtime.</p> <pre><code>// Main user module compiled by IREE:\nmodule @model {\n  // Declare a synchronous external function:\n  func.func private @my_custom_module.sync_func(%input: tensor&lt;?xf32&gt;) -&gt; i32\n  // Declare an asynchronous external function:\n  func.func private @my_custom_module.async_func(%input: tensor&lt;?xf32&gt;) -&gt; tensor&lt;?xf32&gt; attributes {\n    iree.abi.model = \"coarse-fences\",\n    nosideeffects\n  }\n  func.func @predict() {\n    ...\n    // Call a synchronous/blocking external function:\n    %sync_result = call @my_custom_module.sync_func(%sync_input) : (tensor&lt;?xf32&gt;) -&gt; i32\n    ...\n    ...\n    // Call an asynchronous/non-blocking external function:\n    %async_result = call @my_custom_module.async_func(%async_input) : (tensor&lt;?xf32&gt;) -&gt; tensor&lt;?xf32&gt;\n    ...\n  }\n}\n</code></pre> <p>IREE provides dynamic linking at runtime via its VM interfaces. For code that runs on the host and requires syscalls or calling out to existing libraries - such as file IO, text processing, and JPEG decoding - this is an easy way to interop without paying attention to the more complex details of device code. An IREE module compiled using custom modules is portable and dynamically deployable so long as the custom module is registered at runtime.</p> <p>This approach conceptually matches what normal native binaries do in an OS: imports are declared and at runtime they are resolved based on the available exports of modules in the system. Just as with normal systems engineering design of the API between modules is up to the user and depending on rigor can have several pitfalls but these problems and their solutions are not IREE specific and anyone who has designed a shared library interface can apply the same rules here in IREE around versioning, performance, etc. One does not add 2 integers via a syscall and the same holds here: custom modules and the functions within should perform a large amount of work to hide overheads involved in the cross-module calls and users must be aware that the compiler cannot optimize across the call boundaries.</p> <p>See the synchronous tensor I/O and asynchronous tensor I/O samples.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#pros_1","title":"Pros","text":"<ul> <li>No IREE compiler code changes required.</li> <li>Produced artifacts are portable across IREE deployment configurations.</li> <li>Full system access is allowed - the VM just calls external functions.</li> <li>Runtime modules can be implemented (via shims) in other languages/runtimes.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#cons_1","title":"Cons","text":"<ul> <li>Custom modules must be registered at runtime by the user.</li> <li>The VM custom module ABI goo must be authored by the user (such as with JNI or   pybind to move between java/python and C).</li> <li>All custom module code must be compiled and deployed regardless of how much   any modules use. The granularity of modules and their versioning is up to the   user.</li> <li>Custom module code cannot be optimized by the IREE compiler to avoid   host/device readbacks and unnecessary data type conversion.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#when-to-use_1","title":"When to use","text":"<ul> <li> Interactions with large libraries or system calls.</li> <li> Performance-sensitive host code that cannot easily be   represented as device code (like UTF-8 string transformation using libicu).</li> <li> Extensively using tensor resources.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#implementation_1","title":"Implementation","text":"<p>The runtime portion requires that the code be exported to the VM system by way of an <code>iree_vm_module_t</code> interface. A low-level native interface exists with minimal overhead and is used for example by the IREE HAL itself. There is also a C++ wrapper that is significantly easier to work with however it needs some performance improvements.</p> <p>Full end-to-end examples can be found under <code>samples/custom_modules/</code>:</p> <ul> <li>The basic sample shows how to add VM modules with custom types and take advantage of ABI features like fallback functions and optional imports.</li> <li>The synchronous tensor I/O sample shows a call taking and returning a tensor and performing blocking work.</li> <li>The asynchronous tensor I/O sample shows the same thing but with fences for asynchronous scheduling.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#3-extend-target-specific-device-conversion-patterns","title":"3. Extend target-specific device conversion patterns","text":"<p>TL;DR</p> <p>Add patterns to <code>iree/Compiler/Codegen/</code> to emit target code.</p> <p>The easiest and most robust path for specializations of device code is to emit such code mixed with the IREE compiler generated code at the highest possible level of abstraction within the target pipeline. For example, if the code can be represented with the <code>vector</code> dialect then inserting conversion patterns between <code>linalg</code> and <code>vector</code> enables the emitted code to be specialized further based on user configuration and optimized with the full set of available passes that run in the pipeline. For each level lower one goes the more flexibility they gain such as being able to emit inline assembly blocks that do anything while trading off generality and multi-targeting applicability.</p> <p>How much the tradeoff matters is based on the behavior of the extension. If a pattern changing a transcendental function to an approximation can operate at the vector level then all IREE deployment targets can benefit from the pattern and as new targets are made available they will automatically receive the benefits. In contrast, a pattern at the vector level that turns generic vector operations into architecture-specific LLVM intrinsics by its nature only pertains to a single target family and can be done at a lower level. As a rule of thumb if a particular pattern is going to need ~N implementations for ~N targets that are all mostly the same it's better to try to move that higher in the stack.</p> <p>At this point the complexity of extending things is still fairly constrained: a C++ pass or pattern is verified with normal lit tests and can be upstreamed easily either into MLIR or IREE (a large number of IREE patterns are upstreamed, benefiting all users of MLIR). Cross-compilation and versioning are not a factor and the IREE artifacts can be considered durable at a coarse level (outside of major target architectural changes).</p> <p>Note that depending on the target there are various mechanisms for representing code in MLIR, up to including inline assembly snippets in IR via <code>llvm.inline_asm</code>.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#pros_2","title":"Pros","text":"<ul> <li>Not limited to what is possible to represent in any particular MLIR dialect.</li> <li>Rich target configuration available; multiple passes can contribute info.</li> <li>Produced executable binaries are hermetic and no runtime changes are required.</li> <li>Specialization can happen in MLIR dialects like <code>linalg</code> or <code>vector</code> as well   as target-specific representations like SPIR-V and LLVM IR.</li> <li>The compiler can perform deep optimizations across both the generated code and   the provided code (hoisting/loop invariant code motion/cse/etc).</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#cons_2","title":"Cons","text":"<ul> <li>Requires implementing the patterns as code in the IREE compiler or via TBD   interfaces.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#when-to-use_2","title":"When to use","text":"<ul> <li> Code that must be emitted during target lowering - such as   something optimizing for a particular CPU architecture.</li> <li> Hot code mixed with generated code at a fine granularity   (within the innermost loop).</li> <li> External existing hand-authored libraries. Either statically   or dynamically link instead.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#implementation_2","title":"Implementation","text":"<p>There are several ways to author patterns and passes in MLIR. As examples:</p> <ul> <li>A majority of patterns are authored in C++ using PatternRewriter.</li> <li>PDL is an MLIR-based way to   express rewrite operations with strong typing, compile-time verification, and   easily-readable and less-verbose IR.</li> <li><code>linalg</code> uses a python-based DSL   for defining some of its extended ops.</li> </ul> <p>There are many examples within both MLIR and IREE, one specifically being the polynomial approximation expansion patterns.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#4-include-external-target-specific-device-code","title":"4. Include external target-specific device code","text":"<p>TL;DR</p> <p>Statically link external object files into IREE executables.</p> <p>For large bodies of existing device code or library calls that are available for static linkage the work involved to reimplement them at higher levels of the stack can be cost prohibitive even if it leads to better results. In these cases just as with a normal toolchain one would just want to declare an external function, call it, and add the object file to the linker command line. In IREE the same can be performed by way of taking compatible bitcode or native object files and linking them in with the generated code. An MLIR pattern would declare and emit the call and the target-specific IREE linker would pull in the objects.</p> <p>As the linking behavior varies per target (for example, some targets like SPIR-V don't have traditional linkers) how this is performed is up to the IREE target backends. The complexity involved in producing the object files to link will also vary per-backend and the complexity of the deployment: cross-compiling for multiple architectures or compilation modes (ASAN, etc) will require unique copies of the object files matching that precise configuration.</p> <p>At this point generality is largely out as is the ability to cleanly upstream such files. It should be apparent how a few dozen lines of C++ or PDL that avoids the need for any of this complexity is more appealing. In extremely specific cases of a single platform/architecture/version for a single program deployed via a specific artifact composition it's not so bad but IREE is designed such that extreme specificity is an optional mode of the more general solution. This does not mean this mechanism is not useful in some situations and only that it should be a last-resort when one of the easier to manage solutions is not viable - not a shortcut to avoid writing some C++ patterns.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#pros_3","title":"Pros","text":"<ul> <li>Works with hand-authored code in compatible object files from any toolchain.</li> <li>No IREE runtime changes required.<ul> <li>All deployment modes still work, including multi-targeting.</li> <li>No versioning concerns as custom code is included in artifacts.</li> </ul> </li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#cons_3","title":"Cons","text":"<ul> <li>Users must provide per-target precompiled object files on disk.</li> <li>IREE compiler changes are still needed for generating the external calls.</li> <li>Though LTO may be able to optimize across the calls it is not guaranteed.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#when-to-use_3","title":"When to use","text":"<ul> <li> Existing math libraries or architecture-specific functions   that cannot be ported into a more MLIR-friendly form.</li> <li> Mixing in hand-authored code written in C/rust/etc with   generated code from MLIR.</li> <li> External code can be represented as either <code>linalg</code>,   <code>vector</code>, or LLVM IR. Use target-specific conversion patterns instead.</li> <li> External code size is large and unlikely to benefit from   link-time optimizations (such as something like libjpeg). Dynamically link   instead.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#implementation_3","title":"Implementation","text":"<p>As the linking behavior varies per target backend there is no general solution at this level: if targeting the CPU then the system native linker or lld need to be provided the object files, while SPIR-V will need to merge the SPIR-V binaries directly, and Metal shader libraries will need to be constructed with the Apple-specific <code>metallib</code> tooling. Producing these files and performing the linking is outside the scope of IREE.</p> <p>If the files can be acquired then compiler changes will be required to emit calls to them and invoke the linker with the the files.</p> <p>On the CPU an alternative is to use the static library output mode where IREE produces an object file and then the user invokes the linker themselves; this still requires the compiler changes to emit the calls but avoids needing to teach the compiler how to link the files.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#5-dynamically-link-target-specific-device-code-cpu-only","title":"5. Dynamically link target-specific device code (CPU only)","text":"<p>TL;DR</p> <p>Dynamically link external C functions at runtime from device code.</p> <p>It is pitch black. You are likely to be eaten by a grue.</p> <p>This is the lowest-level integration in the system and is designed to act as an escape hatch and - as with any emergency escape hatch - it's not designed for ergonomics. Users should try first to come in through the door and attempting to use this mechanism should trigger alarms about the approach being attempted.</p> <p>IREE's execution model for device code and native machine binary deployment mechanisms are designed with several constraints in order to make all of the above approaches possible and performant. Calling arbitrary C functions from deep within the system can introduce subtle (and not-so-subtle) bugs that are extremely difficult to track down and versioning between the compiler emitting the calls and the runtime providing the implementations can cause skew unless held carefully. Consider the methods added here like syscalls in that they must be extremely focused and if they are ever likely to change (including being removed) then care will be needed just as with versioning or redirecting a syscall. Designing good stable interfaces is hard and a classic pit of failure.</p> <p>Some things to note:</p> <ul> <li>Device code executes in a tiled fashion and single dispatches may invoke the   same function many times from many threads concurrently to perform   the larger work.</li> <li>Tiles may execute in any order and on any thread; performing fine-grained   locking within the tile can lead to deadlocks.</li> <li>Device code is stateless in order to allow for access restrictions and caching   across multiple loaded models - any library state required must be externally   managed via process globals.</li> <li>Device code may be running out-of-process (sandbox/enclave) and the library   functions must be available where the dispatches run and not where they are   launched (such as being linked into the sandbox binary, if separate from the   main process binary).</li> <li>The stack must be used to pass arguments/results to external calls via a   single pointer and there is no libffi-like functionality for magically calling   arbitrary C functions. Users must provide the shims they need.</li> <li>Thread-local storage is unavailable in the called code (it may be usable, but   it is not guaranteed it'll work on all platforms and leaks are likely).</li> <li>No heap allocator is provided and the use of libc malloc is unsupported.</li> </ul> <p>Most of the constraints here come from the SPMD parallelism model, platform-agnostic deployment format, and overall data-oriented design of IREE. Code operating in this fashion has a certain shape and that is usually not the same as big legacy single-threaded CPU-focused BLAS libraries that perform their own caching, internal thread and state management, and other shenanigans. IREE is not designed to wrap such things and if any of these notes are issues it is more an indicator that the approach needs adjustment than anything else. Trying to bypass or workaround the constraints is possible - after all IREE is an open source project and any user is welcome to fork it - but unsupported by the core IREE team.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#pros_4","title":"Pros","text":"<ul> <li>Function resolution at runtime is orthogonal to compiler target specification.</li> <li>Machine code can be shared between the application and IREE artifacts.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#cons_4","title":"Cons","text":"<ul> <li>IREE compiler and runtime must both be modified.</li> <li>Deeper integration with the IREE codegen compiler infrastructure required.</li> <li>ABI versioning complexity between compiler and runtime.</li> <li>Runtimes must ship the imports for the lifetime of any artifact compiled to   use them.<ul> <li>Humans are bad at predicting the future.</li> <li>Using the same artifact in different binaries at runtime requires changes   to each binary - including those that may not be owned by the person   producing the artifact.</li> <li>Weak imports and conditional usage can help but still leads to bloat.</li> </ul> </li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#when-to-use_4","title":"When to use","text":"<ul> <li> Calling into opaque closed-source BLAS-like microkernel   libraries.</li> <li> Any other cases covered above can be used, especially   microkernels that can be represented in MLIR or as statically linked   libraries.</li> </ul>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/extensions/#implementation_4","title":"Implementation","text":"<p>The compiler is changed to produce calls to imports via a dynamic import table provided to each dispatch function. The import table is declared in the executable library for use at runtime. Runtime applications register an import provider to resolve named symbols in the import table to C functions that marshal arguments and results.</p> <p>The compiler-side needs some additional work but an example is included here: Issue 7504. The runtime-side is complete and resolution is performed by a user-supplied <code>iree_hal_executable_import_provider_t</code>.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/","title":"Glossary","text":"<p>IREE exists in an ecosystem of projects and acts as a bridge between machine learning frameworks and a variety of hardware platforms. This glossary outlines some of those projects and technologies.</p> <p>Something missing?</p> <p>Don't see a project of technology here that you think should be? We welcome contributions on our GitHub page!</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#jax","title":"JAX","text":"<p>JAX is Python framework supporting high-performance machine learning research by bridging automatic differentiation and ML compilers like XLA and IREE.</p> <p>See the JAX Integration guide for details on how to use JAX programs with IREE.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#mlir","title":"MLIR","text":"<p>Multi-Level Intermediate Representation (MLIR) is the compiler framework that IREE is built around. Beyond the tooling this includes a set of common dialects and transformations that IREE utilizes for its code generation system.</p> <p>For general discussion on MLIR see the project's discourse forum.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#linalg","title":"Linalg","text":"<p>Linalg is an MLIR dialect that defines Linear Algebra operations in a generalized fashion by modeling iteration spaces together with compute payloads. Linalg includes a set of commonly used operations as well as generic interfaces.</p> <p>IREE uses the Linalg dialect during its code generation pipeline to define tensor operations then generate loop structures for its various backend targets.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#openxla","title":"OpenXLA","text":"<p>OpenXLA is a community-driven, open source ML compiler ecosystem.</p> <p>IREE interfaces with some of the OpenXLA projects, such as StableHLO.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#pytorch","title":"PyTorch","text":"<p>PyTorch is an optimized tensor library for deep learning.</p> <p>PyTorch uses the Torch-MLIR project to interface with projects like IREE. See the PyTorch Integration guide for details on how to use PyTorch programs with IREE.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#spir-v","title":"SPIR-V","text":"<p>SPIR-V is a shader and kernel intermediate language for expressing parallel computation typically used for GPUs. It serves as a hardware agnostic assembly format for distributing complex, computationally intensive programs.</p> <p>IREE uses the SPIR-V MLIR Dialect in its code generation pipeline for Vulkan and other compute APIs.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#stablehlo","title":"StableHLO","text":"<p>StableHLO is a set of versioned high-level operations (HLOs) for ML models with backward and forward compatibility guarantees. StableHLO aims to improve interoperability between frameworks (such as TensorFlow, JAX, and PyTorch) and ML compilers.</p> <p>StableHLO has both a specification and an MLIR dialect.</p> <p>IREE uses the StableHLO MLIR Dialect as one of its input formats.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#tosa","title":"TOSA","text":"<p>Tensor Operator Set Architecture (TOSA) provides a set of tensor operations commonly employed by Deep Neural Networks. TOSA defines accuracy and compatibility constraints so frameworks that use it can trust that applications will produce similar results on a variety of hardware targets.</p> <p>TOSA has both a specification and an MLIR dialect.</p> <p>IREE uses the TOSA MLIR dialect as one of its input formats.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/glossary/#tflite","title":"TFLite","text":"<p>TensorFlow Lite (TFLite) is a library for deploying models on mobile and other edge devices.</p> <p>IREE supports running TFLite programs that have been imported into MLIR using the TOSA dialect. See the TFLite Integration guide for details on how to use TFLite programs with IREE.</p> <p>IREE also has bindings for the TFLite C API, see the <code>runtime/bindings/tflite/</code> directory for details.</p>","tags":["JAX","PyTorch","TensorFlow"]},{"location":"reference/optimization-options/","title":"Optimization options","text":"<p>This page documents various supported flags for optimizing IREE programs. Each is presented with its English name, flag to enable/disable, and default state.</p> <p>These flags can be passed to the:</p> <ul> <li><code>iree-compile</code> command line tool</li> <li><code>extra_args=[\"--flag\"]</code> argument to <code>iree.compiler.tools</code> Python wrappers</li> <li>In-process Python compiler API   <code>iree.compiler.transforms.iree-compile.CompilerOptions(\"--flag\", \"--flag2\")</code>   constructor</li> <li><code>ireeCompilerOptionsSetFlags()</code> compiler C API function</li> </ul>"},{"location":"reference/optimization-options/#optimization-level","title":"Optimization level","text":"<p>As in other compilers like clang and gcc, IREE provides a high level optimization level flag (<code>iree-opt-level</code>) that enables different sets of underlying options.</p> <p><code>iree-opt-level</code> specifies the optimization level for the entire compilation flow. Lower optimization levels prioritize debuggability and stability, while higher levels focus on maximizing performance. By default, <code>iree-opt-level</code> is set to <code>O0</code> (minimal or no optimizations).</p> <p>Note</p> <p>Not all flags that control performance are nested under <code>iree-opt-level</code>. See High level program optimizations below for subflags not covered by optimization flags.</p> <p>This flag takes the following values:</p> Optimization Level Pros Cons O0 (Default, Minimal Optimizations) <ul><li>\u2714\ufe0f Fastest compilation time.</li><li>\u2714\ufe0f Generated code is easier to debug.</li><li>\u2714\ufe0f Keeps assertions enabled</li></ul> <ul><li>\u274c Poor runtime performance.</li><li>\u274c Higher runtime memory usage.</li><li>\u274c Larger code size due to lack of optimization.</li></ul> O1 (Basic Optimizations) <ul><li>\u2714\ufe0f Enables optimizations, allowing for better runtime performance.</li><li>\u2714\ufe0f Optimizations are compatible with all backends.</li></ul> <ul><li>\u2796 Only applies conservative optimizations.</li><li>\u274c Reduced debuggability.</li></ul> O2 (Optimizations without full backend support) <ul><li>\u2714\ufe0f Even more aggressive optimizations.</li><li>\u2714\ufe0f Strikes a balance between optimization level and compatibility.</li></ul> <ul><li>\u2796 Some optimizations may not be supported by all backends.</li><li>\u274c Reduced debuggability.</li></ul> O3 (Aggressive Optimization) <ul><li>\u2714\ufe0f Highest runtime performance.</li><li>\u2714\ufe0f Enables advanced and aggressive transformations.</li><li>\u2714\ufe0f Exploits backend-specific optimizations for optimal efficiency.</li></ul> <ul><li>\u2796 Longer compile times.</li><li>\u274c Some optimizations may be unstable.</li><li>\u274c Reduced debuggability.</li></ul> <p>Although <code>iree-opt-level</code> sets the default for each subflag, they can be explicitly set on or off independently.</p> <p>For example:</p> <pre><code># Apply the default optimizations of `O2` but don't remove assertions.\niree-compile --iree-opt-level=O2 --iree-strip-assertions=false\n\n# Minimize optimizations, but still preform aggressive fusion.\niree-compile --iree-opt-level=O0 --iree-dispatch-creation-enable-aggressive-fusion=true\n</code></pre>"},{"location":"reference/optimization-options/#pipeline-level-control","title":"Pipeline-level control","text":"<p>In addition to <code>iree-opt-level</code>, IREE provides optimization controls at the pipeline level. These flags allow fine-grained tuning of specific compilation stages while still respecting the topmost optimization level unless explicitly overridden.</p>"},{"location":"reference/optimization-options/#dispatch-creation-iree-dispatch-creation-opt-level","title":"Dispatch Creation (<code>iree-dispatch-creation-opt-level</code>)","text":"<ul> <li> <p><code>iree-dispatch-creation-enable-aggressive-fusion</code> (enabled at <code>O2</code>)</p> <p>Enables more aggressive fusion opportunities not yet supported by all backends</p> </li> </ul>"},{"location":"reference/optimization-options/#global-optimization-iree-global-optimization-opt-level","title":"Global Optimization (<code>iree-global-optimization-opt-level</code>)","text":"<ul> <li> <p><code>iree-opt-strip-assertions</code> (enabled at <code>O1</code>)</p> <p>Strips all <code>std.assert</code> ops in the input program after useful information for optimization analysis has been extracted. Assertions provide useful user-visible error messages but can prevent critical optimizations. Assertions are not, however, a substitution for control flow and frontends that want to check errors in optimized release builds should do so via actual code - similar to when one would <code>if (foo) return false;</code> vs. <code>assert(foo);</code> in a normal program.</p> </li> <li> <p><code>iree-opt-outer-dim-concat</code> (enabled at <code>O1</code>)</p> <p>Transpose concat operations to ocurr along the outermost dimension. The resulting concat will now be contiguous and the inserted transposes can possibly be fused with surrounding ops.</p> </li> <li> <p><code>iree-opt-aggressively-propagate-transposes</code> (enabled at <code>O3</code>)</p> <p>Enables more transpose propagation by allowing transposes to be propagated to <code>linalg</code> named ops even when the resulting op will be a <code>linalg.generic</code>.</p> </li> </ul>"},{"location":"reference/optimization-options/#high-level-program-optimizations","title":"High level program optimizations","text":""},{"location":"reference/optimization-options/#constant-evaluation-iree-opt-const-eval-on","title":"Constant evaluation (<code>--iree-opt-const-eval</code> (on))","text":"<p>Performs compile-time evaluation of any global initializers which produce the initial values for global constants, storing the global directly in the program as constant data. This extracts such constant program fragments and recursively compiles them, using the runtime to evaluate the results.</p> <p>Note that this only has any effect on computations in module initializer functions, not free-standing operations in the program which may produce constant-derived results. See <code>--iree-opt-const-expr-hoisting</code> for options to optimize these.</p>"},{"location":"reference/optimization-options/#constant-expression-hoisting-iree-opt-const-expr-hoisting-off","title":"Constant expression hoisting (<code>--iree-opt-const-expr-hoisting</code> (off))","text":"<p>Identifies all trees of constant expressions in the program and uses a heuristic to determine which would be profitable to hoist into global initializers for evaluation at module load. Together with <code>--iree-opt-const-eval</code>, this will convert eligible trees of expressions to purely static data embedded in the module.</p> <p>The heuristic is currently relatively primitive, using static information to disable hoisting of leaf operations which are metadata only (i.e. broadcasts, etc) or are expected to fold away as part of operator fusion. Notably, the current heuristic is likely to pessimize module size in the case of complicated programs with trees of constant, large tensors.</p>"},{"location":"reference/optimization-options/#numeric-precision-reduction-iree-opt-numeric-precision-reduction-off","title":"Numeric precision reduction (<code>--iree-opt-numeric-precision-reduction</code> (off))","text":"<p>Analyzes program constant data and program flow to identify math operations which can be safely evaluated with reduced precision (currently with a minimum of 8bit integers but being extended to infer any bit depth) and inserts appropriate casts. In conjunction with Constant Expression Hoisting, Constant Evaluation and other automatic optimizations, this can produce programs where large amounts (up to the whole) have had their numeric operations and constant data rewritten to lower precision types.</p> <p>This feature is actively evolving and will be the subject of dedicated documentation when ready.</p>"},{"location":"reference/tuning/","title":"Tuning","text":"<p>This page documents support for IREE dispatch tuning. The compiler supports both default and user-provided tuning specs (specifications) that override compiler heuristics that guide dispatch code generation. In our experience, tuning specs can provide meaningful speedup of model execution. For example, we achieved a ~10% improvement on the Stable Diffusion XL (SDXL) model with the MI300X GPU.</p>"},{"location":"reference/tuning/#tuning-specs","title":"Tuning specs","text":"<p>The default specs are shipped with the IREE compiler and are target-specific. We aim to provide default tuning specs that cover the most in-demand hardware and dispatches from most popular ML models, although we do not guarantee completeness.</p> <p>User-provided tuning specs are a mechanism that allows for users to get the best performance on custom models and hardware targets without having to modify the compiler source code or needlessly special-case compiler heuristics.</p> <p>Currently, the dispatch tuner that generates tuning specs is still experimental and hosted in an external repo. This document describes how to work with tuning specs generated by the SHARK Tuner or produced manually, but it does not go into detail on how to generate these specs.</p>"},{"location":"reference/tuning/#flags","title":"Flags","text":"<p>The use of tuning specs in <code>iree-compile</code> is controlled with the following flags:</p> <ul> <li><code>--iree-codegen-enable-default-tuning-specs</code> -- enables or disables the   default tuning specs shipped with the compiler.</li> <li><code>--iree-codegen-tuning-spec-path</code> -- loads a user-specified tuning spec.</li> <li><code>--iree-codegen-dump-tuning-specs-to</code> -- dumps final tuning specs to a   directory or standard output.</li> </ul> <p>Note that both default and user-provided specs can be enabled at the same time. The compiler will link them together and invoke the user-provided spec before attempting the default one.</p>"},{"location":"reference/tuning/#anatomy-of-a-tuning-spec","title":"Anatomy of a tuning spec","text":""},{"location":"reference/tuning/#example","title":"Example","text":"<pre><code>module @my_spec attributes { transform.with_named_sequence, iree_codegen.tuning_spec_with_default_entrypoint } {\ntransform.named_sequence @apply_op_config(%op: !transform.any_op {transform.readonly},\n                                          %config: !transform.any_param {transform.readonly}) {\n  transform.annotate %op \"compilation_info\" = %config : !transform.any_op, !transform.any_param\n  transform.yield\n}\n\ntransform.named_sequence\n@match_mmt_f16_f16_f32(%root: !transform.any_op {transform.readonly}) -&gt; !transform.any_op {\n  transform.match.operation_name %root [\"linalg.generic\"] : !transform.any_op\n  %ins, %outs = transform.iree.match.cast_compatible_dag_from_root %root {\n    ^bb0(%lhs: tensor&lt;?x?xf16&gt;, %rhs: tensor&lt;?x?xf16&gt;, %out: tensor&lt;?x?xf32&gt;):\n    %7 = linalg.generic {indexing_maps = [affine_map&lt;(d0, d1, d2) -&gt; (d0, d2)&gt;,\n                                          affine_map&lt;(d0, d1, d2) -&gt; (d1, d2)&gt;,\n                                          affine_map&lt;(d0, d1, d2) -&gt; (d0, d1)&gt;],\n                          iterator_types = [\"parallel\", \"parallel\", \"reduction\"]}\n        ins(%lhs, %rhs : tensor&lt;?x?xf16&gt;, tensor&lt;?x?xf16&gt;) outs(%out : tensor&lt;?x?xf32&gt;) {\n      ^bb0(%in: f16, %in_0: f16, %acc: f32):\n        %8 = arith.extf %in : f16 to f32\n        %9 = arith.extf %in_0 : f16 to f32\n        %10 = arith.mulf %8, %9 : f32\n        %11 = arith.addf %acc, %10 : f32\n        linalg.yield %11 : f32\n      } -&gt; tensor&lt;?x?xf32&gt;\n  } : (!transform.any_op) -&gt; (!transform.any_value, !transform.any_value)\n  transform.yield %root : !transform.any_op\n}\n\ntransform.named_sequence\n@match_mmt_2048x1280x5120_f16_f16_f32(%matmul: !transform.any_op {transform.readonly})\n  -&gt; (!transform.any_op, !transform.any_param) {\n  %mmt = transform.include @match_mmt_f16_f16_f32 failures(propagate) (%matmul)\n    : (!transform.any_op) -&gt; !transform.any_op\n  %lhs = transform.get_operand %matmul[0] : (!transform.any_op) -&gt; !transform.any_value\n  %rhs = transform.get_operand %matmul[1] : (!transform.any_op) -&gt; !transform.any_value\n  transform.iree.match.cast_compatible_type %lhs = tensor&lt;2048x5120xf16&gt; : !transform.any_value\n  transform.iree.match.cast_compatible_type %rhs = tensor&lt;1280x5120xf16&gt; : !transform.any_value\n  %config = transform.param.constant #iree_codegen.compilation_info&lt;\n    lowering_config = #iree_gpu.lowering_config&lt;{promote_operands = [0, 1],\n                                                 mma_kind = #iree_gpu.mma_layout&lt;MFMA_F32_16x16x16_F16&gt;,\n                                                 subgroup_m_count = 2, subgroup_n_count = 2,\n                                                 reduction = [0, 0, 64],\n                                                 workgroup = [64, 128, 0]}&gt;,\n    translation_info = #iree_codegen.translation_info&lt;pipeline = LLVMGPUVectorDistribute\n      workgroup_size = [256, 1, 1] subgroup_size = 64,\n      {gpu_pipeline_options = #iree_gpu.pipeline_options&lt;prefetch_shared_memory = true&gt;}&gt;\n  &gt; -&gt; !transform.any_param\n  transform.yield %matmul, %config : !transform.any_op, !transform.any_param\n}\n\ntransform.named_sequence\n@__kernel_config(%variant_op: !transform.any_op {transform.consumed}) -&gt; !transform.any_op\n  attributes { iree_codegen.tuning_spec_entrypoint } {\n  %res = transform.foreach_match in %variant_op\n    @match_mmt_2048x1280x5120_f16_f16_f32 -&gt; @apply_op_config\n    : (!transform.any_op) -&gt; !transform.any_op\n  transform.yield %res : !transform.any_op\n}\n}\n</code></pre>"},{"location":"reference/tuning/#explanation","title":"Explanation","text":"<p>Tuning specs are transform dialect libraries that conform to the following format:</p> <ul> <li>All tuning spec entry points (named sequence ops) are marked with the   <code>iree_codegen.tuning_spec_entrypoint</code> attribute. They have a single argument   of type <code>!transform.any_op</code> and return a single value of type   <code>!transform.any_op</code>.</li> <li>All entry points in the final tuning specs must either read   (<code>transform.readonly</code>) or consume (<code>transform.consumed</code>) the argument.</li> <li>The <code>iree_codegen.tuning_spec_with_default_entrypoint</code> attribute ensures that   the tuning spec includes a named sequence op with name <code>__kernel_config</code>, which   must contain exactly one <code>foreach_match</code> op. That <code>foreach_match</code> op must have   exactly one argument and one result of type any_op.</li> </ul> <p>The tuning spec above attempts to match <code>linalg.generic</code> ops that correspond to the matmul operation with the RHS operand transposed (a.k.a. mmt) of shape <code>2048x1280x5120</code> and <code>f16</code> operand element types and <code>f32</code> result element type.</p> <p>If the match succeeds, the tuning spec applies the <code>compilation_info</code> attribute that will drive the code generation. This attribute is considered a compiler implementation detail; in general, each codegen pipeline has its own requirements as to what is considered a valid compilation info and how to interpret it.</p> <p>Tuning specs get executed by the 'Materialize User Configs` pass.</p>"},{"location":"reference/bindings/","title":"API bindings","text":"<p>API bindings allow for programmatic use of IREE's compiler and runtime components. The core IREE project is written in C<sup>1</sup>, allowing for API bindings to be written in a variety of other languages.</p> <p>Something missing?</p> <p>Want to use another language? Looking for something specific out of one of those already listed?</p> <p>We welcome discussions on our communication channels and contributions on our GitHub page!</p>"},{"location":"reference/bindings/#official-api-bindings","title":"Official API bindings","text":"<p>Members of the core project team and other partner groups maintain these official bindings:</p> Language Compiler API? Runtime API? Published packages? C/C++  Supported  Supported  Unsupported Python  Supported  Supported  Supported"},{"location":"reference/bindings/#cc","title":"C/C++","text":"<p>See the C API reference page.</p>"},{"location":"reference/bindings/#python","title":"Python","text":"<p>See the Python reference page.</p>"},{"location":"reference/bindings/#unofficial-and-experimental-api-bindings","title":"Unofficial and experimental API bindings","text":"<p>Members of our developer community have authored bindings using other languages:</p> Language Compiler API? Runtime API? Published packages? JavaScript  Experimental  Experimental  Unsupported Java  Unsupported  Experimental  Unsupported Julia  Experimental  Experimental  Unsupported Rust  Unsupported  Experimental  Experimental"},{"location":"reference/bindings/#javascript","title":"JavaScript","text":"<ul> <li>JavaScript bindings for WebAssembly and WebGPU are under development in IREE's <code>experimental/web/</code> directory.</li> </ul>"},{"location":"reference/bindings/#java","title":"Java","text":"<ul> <li>Java TFLite bindings were developed at one point in IREE's <code>runtime/bindings/tflite/java</code> directory.</li> </ul>"},{"location":"reference/bindings/#julia","title":"Julia","text":"<ul> <li>Coil.jl is an experimental package to lower and execute Julia tensor operations to IREE.</li> </ul>"},{"location":"reference/bindings/#rust","title":"Rust","text":"<ul> <li>iree-rs is a crate containing rustic bindings for the IREE runtime.</li> </ul> <ol> <li> <p>with some C++ tools and utilities\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/bindings/c-api/","title":"C API bindings","text":""},{"location":"reference/bindings/c-api/#overview","title":"Overview","text":"<p>The IREE compiler and IREE runtime both have their own C/C++ APIs. This page introduces the available APIs and describes how to use them from your applications.</p> <p>Note</p> <p>There are multiple ways to distribute and depend on C/C++ projects, each with varying levels of portability, flexibility, and toolchain compatibility. IREE aims to support common configurations and platforms.</p>"},{"location":"reference/bindings/c-api/#compiler-api","title":"Compiler API","text":"<p>The IREE compiler is structured as a monolithic shared object with a dynamic plugin system allowing for extensions. The shared object exports symbols for versioned API functions.</p> <pre><code>graph TD\n  accTitle: IREE compiler linkage model diagram\n  accDescr {\n    The libIREECompiler.so or IREECompiler.dll shared object contains pipelines,\n    target backends, and general passes as private implementation details.\n    Compiler plugins interface with the compiler shared object to extend it with\n    custom targets, dialects, etc.\n    Applications interface with the compiler shared object through the compiler\n    C API's exported symbols.\n  }\n\n  subgraph compiler[libIREECompiler.so]\n    pipelines(\"Pipelines\n\n    \u2022 Flow\n    \u2022 Stream\n    \u2022 etc.\")\n\n    targets(\"Target backends\n\n    \u2022 llvm-cpu\n    \u2022 vulkan-spirv\n    \u2022 etc.\")\n\n    passes(\"General passes\n\n    \u2022 Const eval\n    \u2022 DCE\n    \u2022 etc.\")\n  end\n\n  plugins(\"Compiler plugins\n\n    \u2022 Custom targets\n    \u2022 Custom dialects\n    \u2022 etc.\")\n\n  application(Your application)\n\n  compiler &lt;-- \"Plugin API&lt;br&gt;(static or dynamic linking)\" --&gt; plugins\n  compiler -. \"Compiler C API&lt;br&gt;(exported symbols)\" .-&gt; application</code></pre> <p>API definitions can be found in the following locations:</p> Source location Overview <code>iree/compiler/embedding_api.h</code> Top-level IREE compiler embedding API <code>iree/compiler/PluginAPI/</code> directory IREE compiler plugin API <code>mlir/include/mlir-c/</code> directory MLIR C API headers"},{"location":"reference/bindings/c-api/#concepts","title":"Concepts","text":"<p>The compiler API is centered around running pipelines to translate inputs to artifacts. These are modeled via sessions, invocations, sources, and outputs.</p> <pre><code>stateDiagram-v2\n  accTitle: IREE compiler session and invocation state diagram\n  accDescr {\n    Input files are opened (or buffers are wrapped) as sources in a session.\n    Sources are parsed into invocations, which run pipelines.\n    Output files are written (or buffers are mapped) for compilation artifacts.\n    Sessions can contain multiple sources and run multiple invocations.\n  }\n\n  direction LR\n  InputFile --&gt; Source1 : open file\n  InputBuffer --&gt; Source2 : wrap buffer\n\n  state Session {\n    Invocation1: Invocation1&lt;br&gt;(run pipelines on this)\n    Source1 --&gt; Invocation1\n\n    --\n\n    Invocation2: Invocation2&lt;br&gt;(run pipelines on this)\n    Source2 --&gt; Invocation2\n  }\n\n  Invocation1 --&gt; Output1File   : write file\n  Invocation1 --&gt; Output1Buffer : map memory\n  Invocation2 --&gt; Output2Buffer : map memory</code></pre>"},{"location":"reference/bindings/c-api/#sessions","title":"Sessions","text":"<p>A session (<code>iree_compiler_session_t</code>) is a scope where one or more invocations can run.</p> <ul> <li>Internally, sessions consist of an <code>MLIRContext</code> and a private set of   options.</li> <li>Sessions may activate available plugins based on their options.</li> </ul>"},{"location":"reference/bindings/c-api/#invocations","title":"Invocations","text":"<p>An invocation (<code>iree_compiler_invocation_t</code>) is a discrete run of the compiler.</p> <ul> <li>Invocations run pipelines, consisting of passes, to translate from   sources to outputs.</li> </ul>"},{"location":"reference/bindings/c-api/#sources","title":"Sources","text":"<p>A source (<code>iree_compiler_source_t</code>) represents an input program, including operations and data.</p> <ul> <li>Sources may refer to files or buffers in memory.</li> </ul>"},{"location":"reference/bindings/c-api/#outputs","title":"Outputs","text":"<p>An output (<code>iree_compiler_output_t</code>) represents a compilation artifact.</p> <ul> <li>Outputs can be standalone files or more advanced streams.</li> </ul>"},{"location":"reference/bindings/c-api/#plugins","title":"Plugins","text":"<p>A plugin extends the compiler with some combination of target backends, options, passes, or pipelines. For documentation on compiler plugins, see <code>compiler/PluginAPI/README.md</code>.</p>"},{"location":"reference/bindings/c-api/#usage","title":"Usage","text":"<p>This snippet shows the general layout of the API. For working examples, see the samples below.</p> <p>To build a custom tool using the compiler API:</p> CMakeLists.txt<pre><code>set(_IREE_COMPILER_API \"${_IREE_COMPILER_ROOT}/bindings/c/iree/compiler\")\ntarget_include_directories(${_NAME} SYSTEM PRIVATE ${_IREE_COMPILER_API})\ntarget_link_libraries(${_NAME} iree_compiler_bindings_c_loader)\n</code></pre> iree_compiler_demo.c<pre><code>#include &lt;iree/compiler/embedding_api.h&gt;\n#include &lt;iree/compiler/loader.h&gt;\n\nint main(int argc, char** argv) {\n  // Load the compiler library then initialize it.\n  ireeCompilerLoadLibrary(\"libIREECompiler.so\");\n  ireeCompilerGlobalInitialize();\n\n  // Create a session to track compiler state and set flags.\n  iree_compiler_session_t *session = ireeCompilerSessionCreate();\n  ireeCompilerSessionSetFlags(session, argc, argv);\n\n  // Open a file as an input source to the compiler.\n  iree_compiler_source_t *source = NULL;\n  ireeCompilerSourceOpenFile(session, \"input.mlir\", &amp;source);\n\n  // Use an invocation to compile from the input source to one or more outputs.\n  iree_compiler_invocation_t *inv = ireeCompilerInvocationCreate(session);\n  ireeCompilerInvocationPipeline(inv, IREE_COMPILER_PIPELINE_STD);\n\n  // Output the compiled artifact to a file.\n  iree_compiler_output_t *output = NULL;\n  ireeCompilerOutputOpenFile(\"output.vmfb\", &amp;output);\n  ireeCompilerInvocationOutputVMBytecode(inv, output);\n\n  // Cleanup state.\n  ireeCompilerInvocationDestroy(inv);\n  ireeCompilerOutputDestroy(output);\n  ireeCompilerSourceDestroy(source);\n  ireeCompilerSessionDestroy(session);\n  ireeCompilerGlobalShutdown();\n}\n</code></pre>"},{"location":"reference/bindings/c-api/#samples","title":"Samples","text":"Project Source Description iree-org/iree-template-compiler-cmake <code>hello_compiler.c</code> Compiler application template iree-org/iree <code>integrations/pjrt/.../iree_compiler.cc</code> JIT for TensorFlow + JAX to IREE iree-org/iree <code>compiler/plugins</code> In-tree supported compiler plugins iree-org/iree <code>samples/compiler_plugins/</code> In-tree sample compiler plugins nod-ai/iree-amd-aie <code>plugins/.../iree-amd-aie</code> Early-phase plugins for interfacing with AMD AIE accelerators"},{"location":"reference/bindings/c-api/#runtime-api","title":"Runtime API","text":"<p>The IREE runtime is structured as a modular set of library components. Each component is designed to be linked into applications directly and compiled with LTO style optimizations.</p> <p>The low level library components can be used directly or through a higher level API.</p> <p>Caution</p> <p>Prefer using the low level API directly when writing custom bindings or integrating into larger projects. The high level API is mainly useful as a reference and when building samples.</p> Low level APIHigh level API <p>Each runtime component has its own low level API. The low level APIs are typically verbose as they expose the full flexibility of each underlying system.</p> <pre><code>graph TD\n  accTitle: IREE runtime low level API diagram\n  accDescr {\n    The IREE runtime includes 'base', 'HAL', and 'VM' components, each with\n    their own types and API methods.\n    Applications can interface directly with the IREE runtime via the low\n    level component APIs.\n  }\n\n  subgraph iree_runtime[IREE Runtime]\n    subgraph base\n      base_types(\"Types\n      \u2022 allocator\n      \u2022 status\n      \u2022 etc.\")\n    end\n\n    subgraph hal[HAL]\n      hal_types(\"Types\n      \u2022 buffer\n      \u2022 device\n      \u2022 etc.\")\n\n      hal_drivers(\"Drivers\n      \u2022 local-*\n      \u2022 vulkan\n      \u2022 etc.\")\n    end\n\n    subgraph vm[VM]\n      vm_types(\"Types\n      \u2022 context\n      \u2022 invocation\n      \u2022 etc.\")\n    end\n  end\n\n  application(Your application)\n\n  base_types &amp; hal_types &amp; hal_drivers &amp; vm_types --&gt; application</code></pre> <p>The high level 'runtime' API sits on top of the low level components. It is relatively terse but does not expose the full flexibility of the underlying systems.</p> <pre><code>graph TD\n  accTitle: IREE runtime high level API diagram\n  accDescr {\n    The IREE runtime includes 'base', 'HAL', and 'VM' components, each with\n    their own types and API methods.\n    A high level \"runtime API\" sits on top of these component APIs.\n    Applications can interface indirectly with the IREE runtime via this\n    high level runtime API.\n  }\n\n  subgraph iree_runtime[IREE Runtime]\n    subgraph base\n      base_types(\"Types\n      \u2022 allocator\n      \u2022 status\n      \u2022 etc.\")\n    end\n\n    subgraph hal[HAL]\n      hal_types(\"Types\n      \u2022 buffer\n      \u2022 device\n      \u2022 etc.\")\n\n      hal_drivers(\"Drivers\n      \u2022 local-*\n      \u2022 vulkan\n      \u2022 etc.\")\n    end\n\n    subgraph vm[VM]\n      vm_types(\"Types\n      \u2022 context\n      \u2022 invocation\n      \u2022 etc.\")\n    end\n\n    runtime_api(\"Runtime API\n    \u2022 instance\n    \u2022 session\n    \u2022 call\")\n\n    base_types &amp; hal_types &amp; hal_drivers &amp; vm_types --&gt; runtime_api\n  end\n\n  application(Your application)\n\n  runtime_api --&gt; application</code></pre> <p>Runtime API header files are organized by component:</p> Component header file Overview <code>iree/base/api.h</code> Base API: type definitions, cross-platform primitives, utilities <code>iree/vm/api.h</code> VM APIs: loading modules, I/O, calling functions <code>iree/hal/api.h</code> HAL APIs: device management, synchronization, accessing hardware features <code>iree/runtime/api.h</code> High level runtime API"},{"location":"reference/bindings/c-api/#low-level-concepts","title":"Low level concepts","text":""},{"location":"reference/bindings/c-api/#base","title":"Base","text":"<p>The 'base' component includes general runtime utilities such as:</p> <ul> <li>Memory allocators</li> <li>Status and error handling</li> <li>String manipulation</li> <li>File input and output</li> <li>Event pools and loops</li> <li>Synchronization and threading primitives</li> <li>Tracing and other debugging</li> </ul> <p>As IREE is designed to support a variety of deployment targets, many of these utilities are written to be cross-platform or be optional.</p>"},{"location":"reference/bindings/c-api/#vm","title":"VM","text":"<p>IREE uses its own Virtual Machine (VM) at runtime to interpret program instructions on the host system.</p> Tip - EmitC alternate lowering path <p>VM instructions may be further lowered to C source code for static or resource constrained deployment.</p> <p>See the <code>--output-format=vm-c</code> compiler option and the samples in <code>samples/emitc_modules/</code> for more information.</p> <p>The VM supports generic operations like loads, stores, arithmetic, function calls, and control flow. The VM builds streams of more complex program logic and dense math into HAL command buffers that are dispatched to hardware backends.</p> <ul> <li>VM instances can serve multiple isolated execution contexts.</li> <li>VM contexts are effectively sandboxes for loading modules and running   programs.</li> <li> <p>VM modules provide all functionality to execution contexts, including   access to hardware accelerators through the HAL. Compiled user programs are   also modules.</p> <pre><code>stateDiagram-v2\n  accTitle: Sample VM Modules\n  accDescr {\n    Bytecode modules contain program state, program functions, and debug\n    information.\n    HAL modules contain devices, executables, HAL functions, and HAL types.\n    Custom modules may contain external functions and custom types.\n  }\n\n  state \"Bytecode module\" as bytecode {\n    bytecode_contents: Module state&lt;br&gt;Program funcs&lt;br&gt;Debug info\n  }\n\n  state \"HAL module\" as HAL {\n    hal_contents: Devices&lt;br&gt;Executables&lt;br&gt;HAL funcs&lt;br&gt;HAL types\n  }\n\n  state \"Parameters module\" as Params {\n    parameters_contents: Providers\n  }\n\n  state \"Custom module\" as custom {\n    custom_contents: External funcs&lt;br&gt;Custom types\n  }</code></pre> </li> </ul> <p>For more detailed information about the design of the VM, see this design doc.</p>"},{"location":"reference/bindings/c-api/#hal","title":"HAL","text":"<p>IREE uses a Hardware Abstraction Layer (HAL) to model and interact with hardware devices like CPUs, GPUs and other accelerators.</p> <ul> <li>HAL drivers are used to enumerate and create HAL devices.</li> <li>HAL devices interface with hardware, such as by allocating device memory,   preparing executables, recording and dispatching command buffers, and   synchronizing with the host.</li> <li>HAL buffers represent data storage and buffer views represent views into   that storage with associated shapes and types (similar to \"tensors\").</li> </ul>"},{"location":"reference/bindings/c-api/#high-level-concepts","title":"High level concepts","text":"<p>The high level API uses instances, sessions, and calls to run programs with a small API surface.</p> <pre><code>stateDiagram-v2\n  accTitle: IREE runtime high level API state diagram\n  accDescr {\n    Instances track sessions and state: options, drivers, devices.\n    Sessions track calls and state: a device and bytecode/VM modules.\n    Calls track input and output lists.\n  }\n\n  state iree_runtime_instance_t {\n    instance_state: state&lt;br&gt;- options&lt;br&gt;- drivers&lt;br&gt;- devices\n\n    state iree_runtime_session_t {\n      session_state: state&lt;br&gt;- device&lt;br&gt;- VM / bytecode modules\n      state iree_runtime_call_t  {\n        inputs\n        outputs\n      }\n    }\n  }</code></pre>"},{"location":"reference/bindings/c-api/#instance","title":"Instance","text":"<p>An instance (<code>iree_runtime_instance_t</code>) isolates runtime usage and manages device resources.</p> <ul> <li>Instances may service multiple sessions to avoid extra device interaction   and reuse caches/pools.</li> <li>Separate instances are isolated/sandboxed from one another.</li> </ul>"},{"location":"reference/bindings/c-api/#session","title":"Session","text":"<p>A session (<code>iree_runtime_session_t</code>) contains a set of loaded modules and their state.</p> <ul> <li>Sessions that share an instance may share resources directly.</li> <li>Sessions that do not share an instance can transfer resources using   import and export APIs.</li> </ul>"},{"location":"reference/bindings/c-api/#call","title":"Call","text":"<p>A call (<code>iree_runtime_call_t</code>) is a stateful VM function call builder.</p> <ul> <li>Calls can be reused to avoid having to construct input lists for each   invocation.</li> </ul>"},{"location":"reference/bindings/c-api/#usage_1","title":"Usage","text":""},{"location":"reference/bindings/c-api/#samples_1","title":"Samples","text":"Project Source Description iree-org/iree-template-runtime-cmake <code>hello_world.c</code> Runtime application template iree-org/iree <code>runtime/demo/</code> In-tree demos of the high level runtime API iree-org/iree <code>samples/</code> In-tree sample applications iree-org/iree-experimental <code>runtime-library/</code> Shared runtime library builderBuilds <code>libireert.so</code> to aid development iml130/iree-template-cpp <code>simple_embedding.c</code> Demo integration into a project"},{"location":"reference/bindings/c-api/#high-level-hello-world","title":"High level \"hello world\"","text":"<p>Below are two samples showing how to use the high level runtime API - one \"terse\" sample and one \"explained\" sample with more detailed comments:</p> hello_world_terse.chello_world_explained.c <p>Source file: <code>runtime/src/iree/runtime/demo/hello_world_terse.c</code></p> runtime/src/iree/runtime/demo/hello_world_terse.c<pre><code>#include &lt;stdio.h&gt;\n\n#include \"iree/runtime/api.h\"\n#include \"iree/runtime/demo/simple_mul_module_c.h\"\n\nstatic void iree_runtime_demo_run_session(iree_runtime_instance_t* instance);\nstatic void iree_runtime_demo_perform_mul(iree_runtime_session_t* session);\n\n//===----------------------------------------------------------------------===//\n// 1. Entry point / shared iree_runtime_instance_t setup\n//===----------------------------------------------------------------------===//\n\nint main(int argc, char** argv) {\n  // Create and configure the instance shared across all sessions.\n  iree_runtime_instance_options_t instance_options;\n  iree_runtime_instance_options_initialize(&amp;instance_options);\n  iree_runtime_instance_options_use_all_available_drivers(&amp;instance_options);\n  iree_runtime_instance_t* instance = NULL;\n  IREE_CHECK_OK(iree_runtime_instance_create(\n      &amp;instance_options, iree_allocator_system(), &amp;instance));\n\n  // All sessions should share the same instance.\n  iree_runtime_demo_run_session(instance);\n\n  iree_runtime_instance_release(instance);\n  return 0;\n}\n\n//===----------------------------------------------------------------------===//\n// 2. Load modules and initialize state in iree_runtime_session_t\n//===----------------------------------------------------------------------===//\n\nstatic void iree_runtime_demo_run_session(iree_runtime_instance_t* instance) {\n  // TODO(#5724): move device selection into the compiled modules.\n  iree_hal_device_t* device = NULL;\n  IREE_CHECK_OK(iree_runtime_instance_try_create_default_device(\n      instance, iree_make_cstring_view(\"local-task\"), &amp;device));\n\n  // Create one session per loaded module to hold the module state.\n  iree_runtime_session_options_t session_options;\n  iree_runtime_session_options_initialize(&amp;session_options);\n  iree_runtime_session_t* session = NULL;\n  IREE_CHECK_OK(iree_runtime_session_create_with_device(\n      instance, &amp;session_options, device,\n      iree_runtime_instance_host_allocator(instance), &amp;session));\n  iree_hal_device_release(device);\n\n  // Load your user module into the session (from memory, from file, etc).\n  const iree_file_toc_t* module_file =\n      iree_runtime_demo_simple_mul_module_create();\n  IREE_CHECK_OK(iree_runtime_session_append_bytecode_module_from_memory(\n      session, iree_make_const_byte_span(module_file-&gt;data, module_file-&gt;size),\n      iree_allocator_null()));\n\n  // Run your functions; you should reuse the session to make multiple calls.\n  iree_runtime_demo_perform_mul(session);\n\n  iree_runtime_session_release(session);\n}\n\n//===----------------------------------------------------------------------===//\n// 3. Call a function within a module with buffer views\n//===----------------------------------------------------------------------===//\n\n// func.func @simple_mul(%arg0: tensor&lt;4xf32&gt;, %arg1: tensor&lt;4xf32&gt;) -&gt;\n// tensor&lt;4xf32&gt;\nstatic void iree_runtime_demo_perform_mul(iree_runtime_session_t* session) {\n  iree_runtime_call_t call;\n  IREE_CHECK_OK(iree_runtime_call_initialize_by_name(\n      session, iree_make_cstring_view(\"module.simple_mul\"), &amp;call));\n\n  // %arg0: tensor&lt;4xf32&gt;\n  iree_hal_buffer_view_t* arg0 = NULL;\n  static const iree_hal_dim_t arg0_shape[1] = {4};\n  static const float arg0_data[4] = {1.0f, 1.1f, 1.2f, 1.3f};\n  IREE_CHECK_OK(iree_hal_buffer_view_allocate_buffer_copy(\n      iree_runtime_session_device(session),\n      iree_runtime_session_device_allocator(session),\n      IREE_ARRAYSIZE(arg0_shape), arg0_shape, IREE_HAL_ELEMENT_TYPE_FLOAT_32,\n      IREE_HAL_ENCODING_TYPE_DENSE_ROW_MAJOR,\n      (iree_hal_buffer_params_t){\n          .type = IREE_HAL_MEMORY_TYPE_DEVICE_LOCAL,\n          .access = IREE_HAL_MEMORY_ACCESS_ALL,\n          .usage = IREE_HAL_BUFFER_USAGE_DEFAULT,\n      },\n      iree_make_const_byte_span(arg0_data, sizeof(arg0_data)), &amp;arg0));\n  IREE_CHECK_OK(iree_hal_buffer_view_fprint(\n      stdout, arg0, /*max_element_count=*/4096,\n      iree_runtime_session_host_allocator(session)));\n  IREE_CHECK_OK(iree_runtime_call_inputs_push_back_buffer_view(&amp;call, arg0));\n  iree_hal_buffer_view_release(arg0);\n\n  fprintf(stdout, \"\\n * \\n\");\n\n  // %arg1: tensor&lt;4xf32&gt;\n  iree_hal_buffer_view_t* arg1 = NULL;\n  static const iree_hal_dim_t arg1_shape[1] = {4};\n  static const float arg1_data[4] = {10.0f, 100.0f, 1000.0f, 10000.0f};\n  IREE_CHECK_OK(iree_hal_buffer_view_allocate_buffer_copy(\n      iree_runtime_session_device(session),\n      iree_runtime_session_device_allocator(session),\n      IREE_ARRAYSIZE(arg1_shape), arg1_shape, IREE_HAL_ELEMENT_TYPE_FLOAT_32,\n      IREE_HAL_ENCODING_TYPE_DENSE_ROW_MAJOR,\n      (iree_hal_buffer_params_t){\n          .type = IREE_HAL_MEMORY_TYPE_DEVICE_LOCAL,\n          .access = IREE_HAL_MEMORY_ACCESS_ALL,\n          .usage = IREE_HAL_BUFFER_USAGE_DEFAULT,\n      },\n      iree_make_const_byte_span(arg1_data, sizeof(arg1_data)), &amp;arg1));\n  IREE_CHECK_OK(iree_hal_buffer_view_fprint(\n      stdout, arg1, /*max_element_count=*/4096,\n      iree_runtime_session_host_allocator(session)));\n  IREE_CHECK_OK(iree_runtime_call_inputs_push_back_buffer_view(&amp;call, arg1));\n  iree_hal_buffer_view_release(arg1);\n\n  IREE_CHECK_OK(iree_runtime_call_invoke(&amp;call, /*flags=*/0));\n\n  fprintf(stdout, \"\\n = \\n\");\n\n  // -&gt; tensor&lt;4xf32&gt;\n  iree_hal_buffer_view_t* ret0 = NULL;\n  IREE_CHECK_OK(iree_runtime_call_outputs_pop_front_buffer_view(&amp;call, &amp;ret0));\n  IREE_CHECK_OK(iree_hal_buffer_view_fprint(\n      stdout, ret0, /*max_element_count=*/4096,\n      iree_runtime_session_host_allocator(session)));\n  iree_hal_buffer_view_release(ret0);\n\n  iree_runtime_call_deinitialize(&amp;call);\n}\n</code></pre> <p>Source file: <code>runtime/src/iree/runtime/demo/hello_world_explained.c</code></p> runtime/src/iree/runtime/demo/hello_world_explained.c<pre><code>#include &lt;stdio.h&gt;\n\n#include \"iree/runtime/api.h\"\n\nstatic int iree_runtime_demo_main(void);\nstatic iree_status_t iree_runtime_demo_run_session(\n    iree_runtime_instance_t* instance);\nstatic iree_status_t iree_runtime_demo_perform_mul(\n    iree_runtime_session_t* session);\n\n#if defined(IREE_RUNTIME_DEMO_LOAD_FILE_FROM_COMMAND_LINE_ARG)\n\nstatic const char* demo_file_path = NULL;\n\n// Takes the first argument on the command line as a file path and loads it.\nint main(int argc, char** argv) {\n  if (argc &lt; 2) {\n    fprintf(stderr, \"usage: session_demo module_file.vmfb\\n\");\n    return 1;\n  }\n  demo_file_path = argv[1];\n  return iree_runtime_demo_main();\n}\n\n// Loads a compiled IREE module from the file system.\nstatic iree_status_t iree_runtime_demo_load_module(\n    iree_runtime_session_t* session) {\n  return iree_runtime_session_append_bytecode_module_from_file(session,\n                                                               demo_file_path);\n}\n\n#elif defined(IREE_RUNTIME_DEMO_LOAD_FILE_FROM_EMBEDDED_DATA)\n\n#include \"iree/runtime/demo/simple_mul_module_c.h\"\n\nint main(int argc, char** argv) { return iree_runtime_demo_main(); }\n\n// Loads the bytecode module directly from memory.\n//\n// Embedding the compiled output into your binary is not always possible (or\n// recommended) but is a fairly painless way to get things working on a variety\n// of targets without worrying about how to deploy files or pass flags.\n//\n// In cases like this the module file is in .rodata and does not need to be\n// freed; if the memory needs to be released when the module is unloaded then a\n// custom allocator can be provided to get a callback instead.\nstatic iree_status_t iree_runtime_demo_load_module(\n    iree_runtime_session_t* session) {\n  const iree_file_toc_t* module_file =\n      iree_runtime_demo_simple_mul_module_create();\n  return iree_runtime_session_append_bytecode_module_from_memory(\n      session, iree_make_const_byte_span(module_file-&gt;data, module_file-&gt;size),\n      iree_allocator_null());\n}\n\n#else\n#error \"must specify a way to load the module data\"\n#endif  // IREE_RUNTIME_DEMO_LOAD_FILE_FROM_*\n\n//===----------------------------------------------------------------------===//\n// 1. Entry point / shared iree_runtime_instance_t setup\n//===----------------------------------------------------------------------===//\n// Applications should create and share a single instance across all sessions.\n\n// This would live in your application startup/shutdown code or scoped to the\n// usage of IREE. Creating and destroying instances is expensive and should be\n// avoided.\nstatic int iree_runtime_demo_main(void) {\n  // Set up the shared runtime instance.\n  // An application should usually only have one of these and share it across\n  // all of the sessions it has. The instance is thread-safe, while the\n  // sessions are only thread-compatible (you need to lock if its required).\n  iree_runtime_instance_options_t instance_options;\n  iree_runtime_instance_options_initialize(&amp;instance_options);\n  iree_runtime_instance_options_use_all_available_drivers(&amp;instance_options);\n  iree_runtime_instance_t* instance = NULL;\n  iree_status_t status = iree_runtime_instance_create(\n      &amp;instance_options, iree_allocator_system(), &amp;instance);\n\n  // Run the demo.\n  // A real application would load its models (at startup, on-demand, etc) and\n  // retain them somewhere to be reused. Startup time and likelihood of failure\n  // varies across different HAL backends; the synchronous CPU backend is nearly\n  // instantaneous and will never fail (unless out of memory) while the Vulkan\n  // backend may take significantly longer and fail if there are not supported\n  // devices.\n  if (iree_status_is_ok(status)) {\n    status = iree_runtime_demo_run_session(instance);\n  }\n\n  // Release the shared instance - it will be deallocated when all sessions\n  // using it have been released (here it is deallocated immediately).\n  iree_runtime_instance_release(instance);\n\n  int ret = (int)iree_status_code(status);\n  if (!iree_status_is_ok(status)) {\n    // Dump nice status messages to stderr on failure.\n    // An application can route these through its own logging infrastructure as\n    // needed. Note that the status is a handle and must be freed!\n    iree_status_fprint(stderr, status);\n    iree_status_ignore(status);\n  }\n  return ret;\n}\n\n//===----------------------------------------------------------------------===//\n// 2. Load modules and initialize state in iree_runtime_session_t\n//===----------------------------------------------------------------------===//\n// Each instantiation of a module will live in its own session. Module state\n// like variables will be retained across calls within the same session.\n\n// Loads the demo module and uses it to perform some math.\n// In a real application you'd want to hang on to the iree_runtime_session_t\n// and reuse it for future calls - especially if it holds state internally.\nstatic iree_status_t iree_runtime_demo_run_session(\n    iree_runtime_instance_t* instance) {\n  // TODO(#5724): move device selection into the compiled modules.\n  iree_hal_device_t* device = NULL;\n  IREE_RETURN_IF_ERROR(iree_runtime_instance_try_create_default_device(\n      instance, iree_make_cstring_view(\"local-task\"), &amp;device));\n\n  // Set up the session to run the demo module.\n  // Sessions are like OS processes and are used to isolate modules from each\n  // other and hold runtime state such as the variables used within the module.\n  // The same module loaded into two sessions will see their own private state.\n  iree_runtime_session_options_t session_options;\n  iree_runtime_session_options_initialize(&amp;session_options);\n  iree_runtime_session_t* session = NULL;\n  iree_status_t status = iree_runtime_session_create_with_device(\n      instance, &amp;session_options, device,\n      iree_runtime_instance_host_allocator(instance), &amp;session);\n  iree_hal_device_release(device);\n\n  // Load the compiled user module in a demo-specific way.\n  // Applications could specify files, embed the outputs directly in their\n  // binaries, fetch them over the network, etc.\n  if (iree_status_is_ok(status)) {\n    status = iree_runtime_demo_load_module(session);\n  }\n\n  // Build and issue the call.\n  if (iree_status_is_ok(status)) {\n    status = iree_runtime_demo_perform_mul(session);\n  }\n\n  // Release the session and free all resources.\n  iree_runtime_session_release(session);\n  return status;\n}\n\n//===----------------------------------------------------------------------===//\n// 3. Call a function within a module with buffer views\n//===----------------------------------------------------------------------===//\n// The inputs and outputs of a call are reusable across calls (and possibly\n// across sessions depending on device compatibility) and can be setup by the\n// application as needed. For example, an application could perform\n// multi-threaded buffer view creation and then issue the call from a single\n// thread when all inputs are ready. This simple demo just allocates them\n// per-call and throws them away.\n\n// Sets up and calls the simple_mul function and dumps the results:\n// func.func @simple_mul(%arg0: tensor&lt;4xf32&gt;, %arg1: tensor&lt;4xf32&gt;) -&gt;\n// tensor&lt;4xf32&gt;\n//\n// NOTE: this is a demo and as such this performs no memoization; a real\n// application could reuse a lot of these structures and cache lookups of\n// iree_vm_function_t to reduce the amount of per-call overhead.\nstatic iree_status_t iree_runtime_demo_perform_mul(\n    iree_runtime_session_t* session) {\n  // Initialize the call to the function.\n  iree_runtime_call_t call;\n  IREE_RETURN_IF_ERROR(iree_runtime_call_initialize_by_name(\n      session, iree_make_cstring_view(\"module.simple_mul\"), &amp;call));\n\n  // Append the function inputs with the HAL device allocator in use by the\n  // session. The buffers will be usable within the session and _may_ be usable\n  // in other sessions depending on whether they share a compatible device.\n  iree_hal_device_t* device = iree_runtime_session_device(session);\n  iree_hal_allocator_t* device_allocator =\n      iree_runtime_session_device_allocator(session);\n  iree_allocator_t host_allocator =\n      iree_runtime_session_host_allocator(session);\n  iree_status_t status = iree_ok_status();\n  {\n    // %arg0: tensor&lt;4xf32&gt;\n    iree_hal_buffer_view_t* arg0 = NULL;\n    if (iree_status_is_ok(status)) {\n      static const iree_hal_dim_t arg0_shape[1] = {4};\n      static const float arg0_data[4] = {1.0f, 1.1f, 1.2f, 1.3f};\n      status = iree_hal_buffer_view_allocate_buffer_copy(\n          device, device_allocator,\n          // Shape rank and dimensions:\n          IREE_ARRAYSIZE(arg0_shape), arg0_shape,\n          // Element type:\n          IREE_HAL_ELEMENT_TYPE_FLOAT_32,\n          // Encoding type:\n          IREE_HAL_ENCODING_TYPE_DENSE_ROW_MAJOR,\n          (iree_hal_buffer_params_t){\n              // Where to allocate (host or device):\n              .type = IREE_HAL_MEMORY_TYPE_DEVICE_LOCAL,\n              // Access to allow to this memory:\n              .access = IREE_HAL_MEMORY_ACCESS_ALL,\n              // Intended usage of the buffer (transfers, dispatches, etc):\n              .usage = IREE_HAL_BUFFER_USAGE_DEFAULT,\n          },\n          // The actual heap buffer to wrap or clone and its allocator:\n          iree_make_const_byte_span(arg0_data, sizeof(arg0_data)),\n          // Buffer view + storage are returned and owned by the caller:\n          &amp;arg0);\n    }\n    if (iree_status_is_ok(status)) {\n      IREE_IGNORE_ERROR(iree_hal_buffer_view_fprint(\n          stdout, arg0, /*max_element_count=*/4096, host_allocator));\n      // Add to the call inputs list (which retains the buffer view).\n      status = iree_runtime_call_inputs_push_back_buffer_view(&amp;call, arg0);\n    }\n    // Since the call retains the buffer view we can release it here.\n    iree_hal_buffer_view_release(arg0);\n\n    fprintf(stdout, \"\\n * \\n\");\n\n    // %arg1: tensor&lt;4xf32&gt;\n    iree_hal_buffer_view_t* arg1 = NULL;\n    if (iree_status_is_ok(status)) {\n      static const iree_hal_dim_t arg1_shape[1] = {4};\n      static const float arg1_data[4] = {10.0f, 100.0f, 1000.0f, 10000.0f};\n      status = iree_hal_buffer_view_allocate_buffer_copy(\n          device, device_allocator, IREE_ARRAYSIZE(arg1_shape), arg1_shape,\n          IREE_HAL_ELEMENT_TYPE_FLOAT_32,\n          IREE_HAL_ENCODING_TYPE_DENSE_ROW_MAJOR,\n          (iree_hal_buffer_params_t){\n              .type = IREE_HAL_MEMORY_TYPE_DEVICE_LOCAL,\n              .access = IREE_HAL_MEMORY_ACCESS_ALL,\n              .usage = IREE_HAL_BUFFER_USAGE_DEFAULT,\n          },\n          iree_make_const_byte_span(arg1_data, sizeof(arg1_data)), &amp;arg1);\n    }\n    if (iree_status_is_ok(status)) {\n      IREE_IGNORE_ERROR(iree_hal_buffer_view_fprint(\n          stdout, arg1, /*max_element_count=*/4096, host_allocator));\n      status = iree_runtime_call_inputs_push_back_buffer_view(&amp;call, arg1);\n    }\n    iree_hal_buffer_view_release(arg1);\n  }\n\n  // Synchronously perform the call.\n  if (iree_status_is_ok(status)) {\n    status = iree_runtime_call_invoke(&amp;call, /*flags=*/0);\n  }\n\n  fprintf(stdout, \"\\n = \\n\");\n\n  // Dump the function outputs.\n  iree_hal_buffer_view_t* ret0 = NULL;\n  if (iree_status_is_ok(status)) {\n    // Try to get the first call result as a buffer view.\n    status = iree_runtime_call_outputs_pop_front_buffer_view(&amp;call, &amp;ret0);\n  }\n  if (iree_status_is_ok(status)) {\n    // This prints the buffer view out but an application could read its\n    // contents, pass it to another call, etc.\n    status = iree_hal_buffer_view_fprint(\n        stdout, ret0, /*max_element_count=*/4096, host_allocator);\n  }\n  iree_hal_buffer_view_release(ret0);\n\n  iree_runtime_call_deinitialize(&amp;call);\n  return status;\n}\n</code></pre>"},{"location":"reference/bindings/c-api/#compiler-runtime-jit","title":"Compiler + Runtime = JIT","text":"<p>The compiler and runtime APIs may be used together to build a \"just in time\" (JIT) execution engine. JIT compilation allows for last-minute specialization with no prior knowledge of target devices and avoids issues with version drift, but it can also constrain deployment options and usage scenarios.</p>"},{"location":"reference/bindings/python/","title":"Python bindings","text":"","tags":["Python"]},{"location":"reference/bindings/python/#overview","title":"Overview","text":"<p>IREE offers several Python packages, including API bindings, utilities, and integrations with frameworks:</p> PIP package name Description <code>iree-base-compiler</code> IREE's generic compiler tools and helpers <code>iree-base-runtime</code> IREE's runtime, including CPU and GPU backends <code>iree-tools-tf</code> Tools for importing from TensorFlow <code>iree-tools-tflite</code> Tools for importing from TensorFlow Lite <code>iree-turbine</code> IREE's frontend for PyTorch <p>Collectively, these packages allow for importing from frontends, compiling towards various targets, and executing compiled code on IREE's backends.</p> Note - deprecated package names <p>The Python packages <code>iree-compiler</code> and <code>iree-runtime</code> are deprecated. The packages were renamed to <code>iree-base-compiler</code> and <code>iree-base-runtime</code> respectively.</p> <p>To clean old installed packages, run <code>pip uninstall iree-compiler iree-runtime</code>.</p>","tags":["Python"]},{"location":"reference/bindings/python/#prerequisites","title":"Prerequisites","text":"<p>To use IREE's Python bindings, you will first need to install Python 3 and pip, as needed.</p> Tip - Virtual environments <p>We recommend using virtual environments to manage python packages, such as through <code>venv</code> (about, tutorial):</p>  Linux macOS Windows <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre> <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre> <pre><code>python -m venv .venv\n.venv\\Scripts\\activate.bat\n</code></pre> <p>When done, run <code>deactivate</code>.</p>","tags":["Python"]},{"location":"reference/bindings/python/#installing-iree-packages","title":"Installing IREE packages","text":"","tags":["Python"]},{"location":"reference/bindings/python/#prebuilt-packages","title":"Prebuilt packages","text":"Stable releases Nightly pre-releases Development packages <p>Stable release packages are published to PyPI.</p> <pre><code>python -m pip install \\\n  iree-base-compiler \\\n  iree-base-runtime\n</code></pre> <p>Nightly pre-releases are published on GitHub releases.</p> <pre><code>python -m pip install \\\n  --find-links https://iree.dev/pip-release-links.html \\\n  --pre \\\n  --upgrade \\\n  iree-base-compiler \\\n  iree-base-runtime\n</code></pre> <p>Development packages are built at every commit and on pull requests, for limited configurations.</p> <p>On Linux with Python 3.11, development packages can be installed into a Python <code>venv</code> using the <code>build_tools/pkgci/setup_venv.py</code> script:</p> <pre><code># Install packages from a specific commit ref.\n# See also the `--fetch-latest-main` and `--fetch-gh-workflow` options.\npython ./build_tools/pkgci/setup_venv.py /tmp/.venv --fetch-git-ref=8230f41d\nsource /tmp/.venv/bin/activate\n</code></pre>","tags":["Python"]},{"location":"reference/bindings/python/#building-from-source","title":"Building from source","text":"<p>See Building Python bindings page for instructions for building from source.</p>","tags":["Python"]},{"location":"reference/bindings/python/#usage","title":"Usage","text":"","tags":["Python"]},{"location":"reference/bindings/python/#api-reference-pages","title":"API reference pages","text":"Description URL IREE Python APIs https://iree-python-api.readthedocs.io/ IREE Turbine APIs https://iree-turbine.readthedocs.io/ MLIR Python APIs https://mlir.llvm.org/docs/Bindings/Python/","tags":["Python"]},{"location":"reference/bindings/python/#compile-a-program","title":"Compile a program","text":"<pre><code>from iree import compiler as ireec\n\n# Compile a module.\nINPUT_MLIR = \"\"\"\nmodule @arithmetic {\n  func.func @simple_mul(%arg0: tensor&lt;4xf32&gt;, %arg1: tensor&lt;4xf32&gt;) -&gt; tensor&lt;4xf32&gt; {\n    %0 = arith.mulf %arg0, %arg1 : tensor&lt;4xf32&gt;\n    return %0 : tensor&lt;4xf32&gt;\n  }\n}\n\"\"\"\n\n# Compile using the vmvx (reference) target:\ncompiled_flatbuffer = ireec.tools.compile_str(\n    INPUT_MLIR,\n    target_backends=[\"vmvx\"])\n</code></pre>","tags":["Python"]},{"location":"reference/bindings/python/#run-a-compiled-program","title":"Run a compiled program","text":"<pre><code>from iree import runtime as ireert\nimport numpy as np\n\n# Register the module with a runtime context.\n# Use the \"local-task\" CPU driver, which can load the vmvx executable:\nconfig = ireert.Config(\"local-task\")\nctx = ireert.SystemContext(config=config)\nvm_module = ireert.VmModule.copy_buffer(ctx.instance, compiled_flatbuffer)\nctx.add_vm_module(vm_module)\n\n# Invoke the function and print the result.\nprint(\"INVOKE simple_mul\")\narg0 = np.array([1., 2., 3., 4.], dtype=np.float32)\narg1 = np.array([4., 5., 6., 7.], dtype=np.float32)\nf = ctx.modules.arithmetic[\"simple_mul\"]\nresults = f(arg0, arg1).to_host()\nprint(\"Results:\", results)\n</code></pre>","tags":["Python"]},{"location":"reference/bindings/python/#samples","title":"Samples","text":"<p>Check out the samples in IREE's samples/colab/ directory and the iree-experimental repository for examples using the Python APIs.</p>","tags":["Python"]},{"location":"reference/bindings/python/#console-scripts","title":"Console scripts","text":"<p>The Python packages include console scripts for most of IREE's native tools like <code>iree-compile</code> and <code>iree-run-module</code>.  After installing a package from pip, these should be added to your path automatically:</p> <pre><code>$ python -m pip install iree-base-runtime\n$ which iree-run-module\n\n/projects/.venv/Scripts/iree-run-module\n</code></pre>","tags":["Python"]},{"location":"reference/bindings/python/#profiling","title":"Profiling","text":"<p>The tools in the <code>iree-base-runtime</code> package support variants:</p> Variant name Description default Standard runtime tools tracy Runtime tools instrumented using the Tracy profiler <p>Switch between variants of the installed tools using the <code>IREE_PY_RUNTIME</code> environment variable:</p> <pre><code>IREE_PY_RUNTIME=tracy iree-run-module ...\n</code></pre> <p>See the developer documentation page on Profiling with Tracy for information on using Tracy.</p> <p>Tip - flushing profile data</p> <p>When writing a Python-based program that you want to profile you may need to insert IREE runtime calls to periodically flush the profile data:</p> <pre><code>device = ... # HalDevice\ndevice.flush_profiling()\n</code></pre>","tags":["Python"]},{"location":"reference/mlir-dialects/","title":"MLIR dialects","text":"<p>These pages contain automatically generated documentation for the MLIR dialects defined in the IREE repository. IREE also makes extensive use of dialects from the upstream MLIR repository, which are documented at https://mlir.llvm.org/docs/Dialects/.</p>"},{"location":"reference/mlir-dialects/#iree-internal-dialects","title":"IREE internal dialects","text":"<p>These dialects are an implementation detail of the IREE compiler, though they can be used by plugins and other advanced integrations. The sources for most of these dialects can be found in the <code>iree/compiler/Dialect/</code> directory.</p> Dialect Description Check Defines assertions for IREE tests Encoding Tensor encoding attributes and related ops Flow Models execution data flow and partitioning HAL Represents operations against the IREE HAL<sup>1</sup> HAL/Inline Inline HAL interop runtime module dialect HAL/Loader HAL inline executable loader runtime module dialect IO/Parameters External parameter resource management APIs IREECodegen Common functionality used by IREE code generation IREEGPU Common functionality used by GPU focused IREE code generation IREEVectorExt Extensions to the Vector dialect for specific operations LinalgExt Extensions to the Linalg dialect for specific operations Stream Model execution partitioning and scheduling TensorExt Extensions to the Tensor dialect for specific operations Util Types and ops common across IREE subdialects VM Represents operations against an abstract virtual machine VMVX Virtual Machine Vector Extensions <ol> <li> <p>Hardware Abstraction Layer\u00a0\u21a9</p> </li> </ol>"},{"location":"community/blog/archive/2024/","title":"2024","text":""},{"location":"community/blog/archive/2021/","title":"2021","text":""},{"location":"community/blog/category/performance/","title":"Performance","text":""},{"location":"community/blog/category/platforms/","title":"Platforms","text":""},{"location":"community/blog/category/frontends/","title":"Frontends","text":""},{"location":"community/tags/","title":"Tags","text":"<p>Website pages sorted by tag:</p>"},{"location":"community/tags/#android","title":"Android","text":"<ul> <li>Android cross-compilation</li> <li>Android LLDB debugging</li> </ul>"},{"location":"community/tags/#cpu","title":"CPU","text":"<ul> <li>RISC-V cross-compilation</li> <li>IREE / MLIR / Linalg tutorial</li> <li>Exploring CPU microkernels on a matmul example</li> <li>Matrix Multiplication with MMT4D</li> <li>Profiling CPUs</li> <li>CPU - Bare-Metal</li> <li>CPU</li> </ul>"},{"location":"community/tags/#cuda","title":"CUDA","text":"<ul> <li>CUDA backend</li> <li>GPU debugging playbook</li> <li>CUDA HAL driver</li> <li>GPU - CUDA</li> </ul>"},{"location":"community/tags/#gpu","title":"GPU","text":"<ul> <li>CUDA backend</li> <li>Vulkan environment setup</li> <li>GPU debugging playbook</li> <li>CUDA HAL driver</li> <li>HIP HAL driver</li> <li>Metal HAL driver</li> <li>Profiling GPUs using Vulkan</li> <li>GPU - CUDA</li> <li>GPU - Metal</li> <li>GPU - ROCm</li> <li>GPU - Vulkan</li> </ul>"},{"location":"community/tags/#hip","title":"HIP","text":"<ul> <li>HIP HAL driver</li> </ul>"},{"location":"community/tags/#jax","title":"JAX","text":"<ul> <li>JAX</li> <li>Extensions</li> <li>Glossary</li> </ul>"},{"location":"community/tags/#metal","title":"Metal","text":"<ul> <li>GPU debugging playbook</li> <li>Metal HAL driver</li> </ul>"},{"location":"community/tags/#onnx","title":"ONNX","text":"<ul> <li>ONNX</li> </ul>"},{"location":"community/tags/#pytorch","title":"PyTorch","text":"<ul> <li>ONNX</li> <li>PyTorch</li> <li>Extensions</li> <li>Glossary</li> </ul>"},{"location":"community/tags/#python","title":"Python","text":"<ul> <li>JAX</li> <li>ONNX</li> <li>PyTorch</li> <li>TensorFlow</li> <li>TensorFlow Lite</li> <li>Python</li> </ul>"},{"location":"community/tags/#rocm","title":"ROCm","text":"<ul> <li>GPU debugging playbook</li> </ul>"},{"location":"community/tags/#tensorflow","title":"TensorFlow","text":"<ul> <li>TFLite support via TOSA</li> <li>TensorFlow</li> <li>TensorFlow Lite</li> <li>Extensions</li> <li>Glossary</li> </ul>"},{"location":"community/tags/#vulkan","title":"Vulkan","text":"<ul> <li>Vulkan environment setup</li> <li>GPU debugging playbook</li> <li>Profiling GPUs using Vulkan</li> <li>GPU - Vulkan</li> </ul>"},{"location":"community/tags/#web","title":"Web","text":"<ul> <li>Building with Emscripten</li> </ul>"},{"location":"community/tags/#ios","title":"iOS","text":"<ul> <li>iOS cross-compilation</li> <li>GPU - Metal</li> </ul>"}]}